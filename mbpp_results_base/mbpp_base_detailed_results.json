[
  {
    "task_id": 11,
    "prompt": "Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch): \r",
    "generated_codes": [
      "def remove_Occ(s,ch): \r\n    return s.replace(ch,\"\") \r"
    ],
    "test_cases": [
      "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
      "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
      "assert remove_Occ(\"PHP\",\"P\") == \"H\""
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      53
    ],
    "generation_times": [
      0.5823121070861816
    ]
  },
  {
    "task_id": 12,
    "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\r",
    "generated_codes": [
      "def sort_matrix(M):\r\n    sorted_M = sorted(M, key=sum)\r\n    return sorted_M"
    ],
    "test_cases": [
      "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
      "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
      "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      75
    ],
    "generation_times": [
      0.25433945655822754
    ]
  },
  {
    "task_id": 13,
    "prompt": "Write a function to count the most common words in a dictionary.\ndef count_common(words):\r",
    "generated_codes": [
      "def count_common(words):\r\n    word_counts = {}\r\n    for word in words:\r\n        word_counts[word] = word_counts.get(word, 0) + 1\r\n    max_count = max(word_counts.values())\r\n    max_word = [word for word, count in word_counts.items() if count == max_count]\r\nwords = [\"apple\", \"banana\", \"apple\",\r\r\n\"orange\", \"grape\", \"orange\",\r\r\n \"apple\"]\r\r"
    ],
    "test_cases": [
      "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]",
      "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]",
      "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      338
    ],
    "generation_times": [
      1.4996860027313232
    ]
  },
  {
    "task_id": 14,
    "prompt": "Write a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h) : \r",
    "generated_codes": [
      "def find_Volume(l,b,h) : \r\n    return (1/2)*l*b*h\r"
    ],
    "test_cases": [
      "assert find_Volume(10,8,6) == 240",
      "assert find_Volume(3,2,2) == 6",
      "assert find_Volume(1,2,1) == 1"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      50
    ],
    "generation_times": [
      0.23037481307983398
    ]
  },
  {
    "task_id": 15,
    "prompt": "Write a function to split a string at lowercase letters.\ndef split_lowerstring(text):\r",
    "generated_codes": [
      "def split_lowerstring(text):\r\n    return text.split(lowercase_letters)"
    ],
    "test_cases": [
      "assert split_lowerstring(\"AbCd\")==['bC','d']",
      "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']",
      "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      70
    ],
    "generation_times": [
      0.0956122875213623
    ]
  },
  {
    "task_id": 16,
    "prompt": "Write a function to find sequences of lowercase letters joined with an underscore.\ndef text_lowercase_underscore(text):\r",
    "generated_codes": [
      "def text_lowercase_underscore(text):\r\n    return '_'.join([letter for letter in text.lower() if letter.isalpha()])"
    ],
    "test_cases": [
      "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')",
      "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')",
      "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      114
    ],
    "generation_times": [
      0.20014047622680664
    ]
  },
  {
    "task_id": 17,
    "prompt": "Write a function to find the perimeter of a square.\ndef square_perimeter(a):\r",
    "generated_codes": [
      "def square_perimeter(a):\r\n    return 4 * a"
    ],
    "test_cases": [
      "assert square_perimeter(10)==40",
      "assert square_perimeter(5)==20",
      "assert square_perimeter(4)==16"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      42
    ],
    "generation_times": [
      0.19552969932556152
    ]
  },
  {
    "task_id": 18,
    "prompt": "Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string): \r",
    "generated_codes": [
      "def str_to_list(string): \r\n    return list(string) \r\ndef remove_chars(string, chars): \r\n    return [char for char in string if char not in chars] \r"
    ],
    "test_cases": [
      "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
      "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
      "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      147
    ],
    "generation_times": [
      0.853992223739624
    ]
  },
  {
    "task_id": 19,
    "prompt": "Write a function to find whether a given array of integers contains any duplicate element.\ndef test_duplicate(arraynums):\r",
    "generated_codes": [
      "def test_duplicate(arraynums):\r\n    for i in range(len(arraynums)):\r\n        for j in range(i+1, len(arraynums)):\r\n            if arraynums[i] == arraynums[j]:\r\n                return True\r\n    return False\r"
    ],
    "test_cases": [
      "assert test_duplicate(([1,2,3,4,5]))==False",
      "assert test_duplicate(([1,2,3,4, 4]))==True",
      "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      207
    ],
    "generation_times": [
      0.534653902053833
    ]
  },
  {
    "task_id": 20,
    "prompt": "Write a function to check if the given number is woodball or not.\ndef is_woodall(x): \r",
    "generated_codes": [
      "def is_woodall(x): \r\n    return True"
    ],
    "test_cases": [
      "assert is_woodall(383) == True",
      "assert is_woodall(254) == False",
      "assert is_woodall(200) == False"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      36
    ],
    "generation_times": [
      0.10492682456970215
    ]
  },
  {
    "task_id": 21,
    "prompt": "Write a function to find m number of multiples of n.\ndef multiples_of_num(m,n): \r",
    "generated_codes": [
      "def multiples_of_num(m,n): \r\n    return [i for i in range(n,m*n+1) if i%n==0]"
    ],
    "test_cases": [
      "assert multiples_of_num(4,3)== [3,6,9,12]",
      "assert multiples_of_num(2,5)== [5,10]",
      "assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      77
    ],
    "generation_times": [
      0.2044997215270996
    ]
  },
  {
    "task_id": 22,
    "prompt": "Write a function to find the first duplicate element in a given array of integers.\ndef find_first_duplicate(nums):\r",
    "generated_codes": [
      "def find_first_duplicate(nums):\r\n    seen = set()\r\n    for num in nums:\r\n        if num in seen:\r\n            return num\r\n        seen.add(num)\r\n    return -1"
    ],
    "test_cases": [
      "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4",
      "assert find_first_duplicate([1, 2, 3, 4])==-1",
      "assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      158
    ],
    "generation_times": [
      0.30190491676330566
    ]
  },
  {
    "task_id": 23,
    "prompt": "Write a python function to find the maximum sum of elements of list in a list of lists.\ndef maximum_Sum(list1): \r",
    "generated_codes": [
      "def maximum_Sum(list1): \r\n    maximum_sum = list1[0][0] \r\n// Maximum Sum of Elements of List in a List of Lists\r\nmaximum_sum = max(maximum_sum, list1[j][k])\r\r\nreturn maximum_sum\r\r"
    ],
    "test_cases": [
      "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33",
      "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6",
      "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      179
    ],
    "generation_times": [
      1.913764238357544
    ]
  },
  {
    "task_id": 24,
    "prompt": "Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary): \r",
    "generated_codes": [
      "def binary_to_decimal(binary): \r\n    decimal = 0\r\n    for i in range(len(binary)): \r\n        digit = int(binary[i]) \r\n        decimal += digit * (2 ** i) \r\n    return decimal "
    ],
    "test_cases": [
      "assert binary_to_decimal(100) == 4",
      "assert binary_to_decimal(1011) == 11",
      "assert binary_to_decimal(1101101) == 109"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      175
    ],
    "generation_times": [
      0.7561614513397217
    ]
  },
  {
    "task_id": 25,
    "prompt": "Write a python function to find the product of non-repeated elements in a given array.\ndef find_Product(arr,n): \r",
    "generated_codes": [
      "def find_Product(arr,n): \r\n    product = 1\r\n    for i in range(n): \r\n        if arr[i] not in arr[:i] and arr[i]!=0: \r\n            product *= arr[i]\r\n    return product\r"
    ],
    "test_cases": [
      "assert find_Product([1,1,2,3],4) == 6",
      "assert find_Product([1,2,3,1,1],5) == 6",
      "assert find_Product([1,1,4,5,6],5) == 120"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      169
    ],
    "generation_times": [
      2.4134974479675293
    ]
  },
  {
    "task_id": 26,
    "prompt": "Write a function to check if the given tuple list has all k elements.\ndef check_k_elements(test_list, K):\r",
    "generated_codes": [
      "def check_k_elements(test_list, K):\r\n    for i in range(len(test_list)):\r\n        if len(set(test_list[i])) != K:\r\n            return False\r\n    return True"
    ],
    "test_cases": [
      "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True",
      "assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True",
      "assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      156
    ],
    "generation_times": [
      0.27345895767211914
    ]
  },
  {
    "task_id": 27,
    "prompt": "Write a python function to remove all digits from a list of strings.\ndef remove(list): \r",
    "generated_codes": [
      "def remove(list): \r\n    return [i for i in list if not i.isdigit()] "
    ],
    "test_cases": [
      "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']",
      "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']",
      "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      68
    ],
    "generation_times": [
      0.3820486068725586
    ]
  },
  {
    "task_id": 28,
    "prompt": "Write a python function to find binomial co-efficient.\ndef binomial_Coeff(n,k): \r",
    "generated_codes": [
      "def binomial_Coeff(n,k): \r\n    if k > n: \r\n        return 0\r\n    else: \r\n         return (n!/(k!*(n-k)!))\r"
    ],
    "test_cases": [
      "assert binomial_Coeff(5,2) == 10",
      "assert binomial_Coeff(4,3) == 4",
      "assert binomial_Coeff(3,2) == 3"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      106
    ],
    "generation_times": [
      0.4194784164428711
    ]
  },
  {
    "task_id": 29,
    "prompt": "Write a python function to find the element occurring odd number of times.\ndef get_Odd_Occurrence(arr,arr_size):   \r",
    "generated_codes": [
      "def get_Odd_Occurrence(arr,arr_size):   \r\n    result = 0\r\n    for i in range(arr_size):\r\n        result ^= arr[i]\r\n    return result\r"
    ],
    "test_cases": [
      "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1",
      "assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3",
      "assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      133
    ],
    "generation_times": [
      0.6481387615203857
    ]
  },
  {
    "task_id": 30,
    "prompt": "Write a python function to count all the substrings starting and ending with same characters.\ndef check_Equality(s): \r",
    "generated_codes": [
      "def check_Equality(s): \r\n    count = 0\r\n    for i in range(len(s)): \r\n        if s[i] == s[i-1]: \r\n            count += 1\r\n    return count\r"
    ],
    "test_cases": [
      "assert count_Substring_With_Equal_Ends(\"abc\") == 3",
      "assert count_Substring_With_Equal_Ends(\"abcda\") == 6",
      "assert count_Substring_With_Equal_Ends(\"ab\") == 2"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      140
    ],
    "generation_times": [
      0.8230006694793701
    ]
  },
  {
    "task_id": 31,
    "prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\ndef func(nums, k):\r",
    "generated_codes": [
      "def func(nums, k):\r\n    return heapq.nlargest(k, nums)"
    ],
    "test_cases": [
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]",
      "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      54
    ],
    "generation_times": [
      0.11780023574829102
    ]
  },
  {
    "task_id": 32,
    "prompt": "Write a python function to find the largest prime factor of a given number.\ndef max_Prime_Factors (n): \r",
    "generated_codes": [
      "def max_Prime_Factors (n): \r\n    res = -1\r\n    while n % 2 == 0: \r\n        res = 2\r\n        n = n // 2\r\nif n > 2: \r\n    for i in range(3, int(n**0.5) + 1, 2): \r\n        while n%i==0: \r\r\n            res = i\r\n            n = int(n / i)\r\n    if n > res: \r\n       res = n\r\n    return res\r"
    ],
    "test_cases": [
      "assert max_Prime_Factors(15) == 5",
      "assert max_Prime_Factors(6) == 3",
      "assert max_Prime_Factors(2) == 2"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      284
    ],
    "generation_times": [
      1.7110650539398193
    ]
  },
  {
    "task_id": 33,
    "prompt": "Write a python function to convert a decimal number to binary number.\ndef decimal_To_Binary(N): \r",
    "generated_codes": [
      "def decimal_To_Binary(N): \r\n    if N == 0: \r\n        return 0\r\n    else: \r\n         return (N % 2) + 10 * decimal_To_binar(N // 2)\r"
    ],
    "test_cases": [
      "assert decimal_To_Binary(10) == 1010",
      "assert decimal_To_Binary(1) == 1",
      "assert decimal_To_Binary(20) == 10100"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      131
    ],
    "generation_times": [
      0.4849083423614502
    ]
  },
  {
    "task_id": 34,
    "prompt": "Write a python function to find the missing number in a sorted array.\ndef find_missing(ar,N): \r",
    "generated_codes": [
      "def find_missing(ar,N): \r\n    for i in range(N): \r\n        if ar[i] > N or ar[i]<0: \r\n            return ar[i]\r\n        else: \r\n             return -1\r"
    ],
    "test_cases": [
      "assert find_missing([1,2,3,5],4) == 4",
      "assert find_missing([1,3,4,5],4) == 2",
      "assert find_missing([1,2,3,5,6,7],5) == 4"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      151
    ],
    "generation_times": [
      1.3892195224761963
    ]
  },
  {
    "task_id": 35,
    "prompt": "Write a function to find the n-th rectangular number.\ndef find_rect_num(n):\r",
    "generated_codes": [
      "def find_rect_num(n):\r\n    return (n*(n+1)//2)"
    ],
    "test_cases": [
      "assert find_rect_num(4) == 20",
      "assert find_rect_num(5) == 30",
      "assert find_rect_num(6) == 42"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      46
    ],
    "generation_times": [
      0.12225699424743652
    ]
  },
  {
    "task_id": 36,
    "prompt": "Write a python function to find the nth digit in the proper fraction of two given numbers.\ndef find_Nth_Digit(p,q,N) :  \r",
    "generated_codes": [
      "def find_Nth_Digit(p,q,N) :  \r\n    d1 = len(str(p))  \r\n    d2 = len( str(q))  \r\n    total = (p*q) - 1\r\n    if N > total:\r\n        return  0\r\n    pos = N -  (total * (q/d1))\r\n    if pos < 0:\r\n        pos = pos + (d1 * total)\r\n    return int(pos % 10)"
    ],
    "test_cases": [
      "assert find_Nth_Digit(1,2,1) == 5",
      "assert find_Nth_Digit(3,5,1) == 6",
      "assert find_Nth_Digit(5,6,5) == 3"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      249
    ],
    "generation_times": [
      1.470022201538086
    ]
  },
  {
    "task_id": 37,
    "prompt": "Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\r",
    "generated_codes": [
      "def sort_mixed_list(mixed_list):\r\n    sorted_list = sorted(mixedlist)\r\n    return sorted_list"
    ],
    "test_cases": [
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
      "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      93
    ],
    "generation_times": [
      0.2625608444213867
    ]
  },
  {
    "task_id": 38,
    "prompt": "Write a function to find the division of first even and odd number of a given list.\ndef div_even_odd(list1):\r",
    "generated_codes": [
      "def div_even_odd(list1):\r\n    if len(list1) == 0:\r\n        return None\r\n    elif len(list2) ==1:\r\n        if list1[0] % 2 == 1:\r\n            return list1\r\n        else:\r\n            return None\r"
    ],
    "test_cases": [
      "assert div_even_odd([1,3,5,7,4,1,6,8])==4",
      "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
      "assert div_even_odd([1,5,7,9,10])==10"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      194
    ],
    "generation_times": [
      1.018054485321045
    ]
  },
  {
    "task_id": 39,
    "prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\ndef rearange_string(S):\r",
    "generated_codes": [
      "def rearange_string(S):\r\n    S = list(S)\r\n    S.sort()\r\n    for i in range(len(S)-1):\r\n        if S[i] == S[i+1]:\r\n            return False\r\n    return True"
    ],
    "test_cases": [
      "assert rearange_string(\"aab\")==('aba')",
      "assert rearange_string(\"aabb\")==('abab')",
      "assert rearange_string(\"abccdd\")==('cdabcd')"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      156
    ],
    "generation_times": [
      0.4530961513519287
    ]
  },
  {
    "task_id": 40,
    "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.\ndef freq_element(nums):\r",
    "generated_codes": [
      "def freq_element(nums):\r\n    return"
    ],
    "test_cases": [
      "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})",
      "assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})",
      "assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      35
    ],
    "generation_times": [
      0.09566068649291992
    ]
  },
  {
    "task_id": 41,
    "prompt": "Write a function to filter even numbers using lambda function.\ndef filter_evennumbers(nums):\r",
    "generated_codes": [
      "def filter_evennumbers(nums):\r\n    return list(filter(lambda x: x % 2 == 0, nums))"
    ],
    "test_cases": [
      "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]",
      "assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]",
      "assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      82
    ],
    "generation_times": [
      0.17901325225830078
    ]
  },
  {
    "task_id": 42,
    "prompt": "Write a python function to find the sum of repeated elements in a given array.\ndef find_Sum(arr,n): \r",
    "generated_codes": [
      "def find_Sum(arr,n): \r\n    sum = 0\r\n    for i in range(n): \r\n        if arr[i] == arr[i-1]: \r\n            sum += arr[i]\r\n    return sum\r"
    ],
    "test_cases": [
      "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3",
      "assert find_Sum([1,2,3,1,1],5) == 3",
      "assert find_Sum([1,1,2],3) == 2"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      136
    ],
    "generation_times": [
      1.2887027263641357
    ]
  },
  {
    "task_id": 43,
    "prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.\ndef text_match(text):\r",
    "generated_codes": [
      "def text_match(text):\r\n    return re.findall(r'([a-z]+)_([a-zA-Z]+)', text)"
    ],
    "test_cases": [
      "assert text_match(\"aab_cbbbc\") == 'Found a match!'",
      "assert text_match(\"aab_Abbbc\") == 'Not matched!'",
      "assert text_match(\"Aaab_abbbc\") == 'Not matched!'"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      75
    ],
    "generation_times": [
      0.2022254467010498
    ]
  },
  {
    "task_id": 44,
    "prompt": "Write a function that matches a word at the beginning of a string.\ndef text_match_string(text):\r",
    "generated_codes": [
      "def text_match_string(text):\r\n    if text.startswith(\"hello\"):\r\n        return True\r\n    else:\r\n        return False"
    ],
    "test_cases": [
      "assert text_match_string(\" python\")==('Not matched!')",
      "assert text_match_string(\"python\")==('Found a match!')",
      "assert text_match_string(\"  lang\")==('Not matched!')"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      116
    ],
    "generation_times": [
      0.18125152587890625
    ]
  },
  {
    "task_id": 45,
    "prompt": "Write a function to find the gcd of the given array elements.\ndef find_gcd(x, y): \r",
    "generated_codes": [
      "def find_gcd(x, y): \r\n    while y != 0: \r\n        x, y = y, x % y\r\n    return x"
    ],
    "test_cases": [
      "assert get_gcd([2, 4, 6, 8, 16]) == 2",
      "assert get_gcd([1, 2, 3]) == 1",
      "assert get_gcd([2, 4, 6, 8]) == 2 "
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      79
    ],
    "generation_times": [
      0.22928977012634277
    ]
  },
  {
    "task_id": 46,
    "prompt": "Write a python function to determine whether all the numbers are different from each other are not.\ndef test_distinct(data):\r",
    "generated_codes": [
      "def test_distinct(data):\r\n    return len(set(data)) == len(data)"
    ],
    "test_cases": [
      "assert test_distinct([1,5,7,9]) == True",
      "assert test_distinct([2,4,5,5,7,9]) == False",
      "assert test_distinct([1,2,3]) == True"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      64
    ],
    "generation_times": [
      0.11508035659790039
    ]
  },
  {
    "task_id": 47,
    "prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.\ndef compute_Last_Digit(A,B): \r",
    "generated_codes": [
      "def compute_Last_Digit(A,B): \r\n    if A==0 or B==0:\r\n        return 1\r\n    else:\r\n        return (A%B)*(compute_Last_Dig(B,A%B))%B"
    ],
    "test_cases": [
      "assert compute_Last_Digit(2,4) == 2",
      "assert compute_Last_Digit(6,8) == 6",
      "assert compute_Last_Digit(1,2) == 2"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      130
    ],
    "generation_times": [
      0.4540688991546631
    ]
  },
  {
    "task_id": 48,
    "prompt": "Write a python function to set all odd bits of a given number.\ndef odd_bit_set_number(n):\r",
    "generated_codes": [
      "def odd_bit_set_number(n):\r\n    return n & (n - 1)\r"
    ],
    "test_cases": [
      "assert odd_bit_set_number(10) == 15",
      "assert odd_bit_set_number(20) == 21",
      "assert odd_bit_set_number(30) == 31"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      51
    ],
    "generation_times": [
      0.20452332496643066
    ]
  },
  {
    "task_id": 49,
    "prompt": "Write a function to extract every first or specified element from a given two-dimensional list.\ndef specified_element(nums, N):\r",
    "generated_codes": [
      "def specified_element(nums, N):\r\n    result = []\r\n    for i in range(len(nums)):\r\n        if i % N == 0:\r\n            result.append(nums[i])\r\n    return result"
    ],
    "test_cases": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      159
    ],
    "generation_times": [
      0.8319578170776367
    ]
  },
  {
    "task_id": 50,
    "prompt": "Write a function to find the list with minimum length using lambda function.\ndef min_length_list(input_list):\r",
    "generated_codes": [
      "def min_length_list(input_list):\r\n    return min(input_list, key=len)"
    ],
    "test_cases": [
      "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
      "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])",
      "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      69
    ],
    "generation_times": [
      0.10892868041992188
    ]
  },
  {
    "task_id": 51,
    "prompt": "Write a function to print check if the triangle is equilateral or not.\ndef check_equilateral(x,y,z):\r",
    "generated_codes": [
      "def check_equilateral(x,y,z):\r\n    if x==y and y==z:\r\n        return True\r"
    ],
    "test_cases": [
      "assert check_equilateral(6,8,12)==False ",
      "assert check_equilateral(6,6,12)==False",
      "assert check_equilateral(6,6,6)==True"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      74
    ],
    "generation_times": [
      0.20444369316101074
    ]
  },
  {
    "task_id": 52,
    "prompt": "Write a function to caluclate area of a parallelogram.\ndef parallelogram_area(b,h):\r",
    "generated_codes": [
      "def parallelogram_area(b,h):\r\n    return b*h\r"
    ],
    "test_cases": [
      "assert parallelogram_area(10,20)==200",
      "assert parallelogram_area(15,20)==300",
      "assert parallelogram_area(8,9)==72"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      45
    ],
    "generation_times": [
      0.427138090133667
    ]
  },
  {
    "task_id": 53,
    "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not.\ndef check_Equality(str):\r",
    "generated_codes": [
      "def check_Equality(str):\r\n    if str[0] == str[-1]:\r\n        return True\r\n    else:\r\n        return False"
    ],
    "test_cases": [
      "assert check_Equality(\"abcda\") == \"Equal\"",
      "assert check_Equality(\"ab\") == \"Not Equal\"",
      "assert check_Equality(\"mad\") == \"Not Equal\""
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      105
    ],
    "generation_times": [
      0.29389166831970215
    ]
  },
  {
    "task_id": 54,
    "prompt": "Write a function to sort the given array by using counting sort.\ndef counting_sort(my_list):\r",
    "generated_codes": [
      "def counting_sort(my_list):\r\n    max_value = max(my_list)\r\n    count_array = [0] * (max_value + 1)\r\n    for num in my_list:\r\n        count_array[num] += 1\r\n    sorted_list = []\r\nmy_list = [4, 2, 6, 3, 1, 5]\r\ncounting_sort(mylist)"
    ],
    "test_cases": [
      "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]",
      "assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]",
      "assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      229
    ],
    "generation_times": [
      1.1975760459899902
    ]
  },
  {
    "task_id": 55,
    "prompt": "Write a function to find t-nth term of geometric series.\ndef tn_gp(a,n,r):\r",
    "generated_codes": [
      "def tn_gp(a,n,r):\r\n    return (a*r**n-1)/(r-1)\r"
    ],
    "test_cases": [
      "assert tn_gp(1,5,2)==16",
      "assert tn_gp(1,5,4)==256",
      "assert tn_gp(2,6,3)==486"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      47
    ],
    "generation_times": [
      0.26188230514526367
    ]
  },
  {
    "task_id": 56,
    "prompt": "Write a python function to check if a given number is one less than twice its reverse.\ndef rev(num):    \r",
    "generated_codes": [
      "def rev(num):    \r\n    rev = 0\r\n    while num > 0:\r\n        rem = num % 10\r\n        rev = (rev * 1) + rem\r\n        num = num // 1\r\n    return rev\r"
    ],
    "test_cases": [
      "assert check(70) == False",
      "assert check(23) == False",
      "assert check(73) == True"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      146
    ],
    "generation_times": [
      0.8460006713867188
    ]
  },
  {
    "task_id": 57,
    "prompt": "Write a python function to find the largest number that can be formed with the given digits.\ndef find_Max_Num(arr,n) : \r",
    "generated_codes": [
      "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse=True) \r\n    str_arr = ''.join(map(str, arr)) \r\n    return int(str_arr)"
    ],
    "test_cases": [
      "assert find_Max_Num([1,2,3],3) == 321",
      "assert find_Max_Num([4,5,6,1],4) == 6541",
      "assert find_Max_Num([1,2,3,9],4) == 9321"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      119
    ],
    "generation_times": [
      0.43636083602905273
    ]
  },
  {
    "task_id": 58,
    "prompt": "Write a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y): \r",
    "generated_codes": [
      "def opposite_Signs(x,y): \r\n    if x > 0 and y < 0 or x <  0  and y >  1: \r\n        return True\r\n    else: \r\n         return False\r"
    ],
    "test_cases": [
      "assert opposite_Signs(1,-2) == True",
      "assert opposite_Signs(3,2) == False",
      "assert opposite_Signs(-10,-10) == False"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      130
    ],
    "generation_times": [
      0.4805305004119873
    ]
  },
  {
    "task_id": 59,
    "prompt": "Write a function to find the nth octagonal number.\ndef is_octagonal(n): \r",
    "generated_codes": [
      "def is_octagonal(n): \r\n    return (1 + int(2 * n * (n - 1) / 2)) % 8 == 0\r"
    ],
    "test_cases": [
      "assert is_octagonal(5) == 65",
      "assert is_octagonal(10) == 280",
      "assert is_octagonal(15) == 645"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      74
    ],
    "generation_times": [
      0.36051464080810547
    ]
  },
  {
    "task_id": 60,
    "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\ndef max_len_sub( arr, n): \r",
    "generated_codes": [
      "def max_len_sub( arr, n): \r\n    dp = [0] * n\r\n    dp[0] = 1\r\n    for i in range(1,n):\r\n        if arr[i] > arr[i-1]:\r\n            dp[i] = dp[i-2] + 1\r\n        else:\r\n            dp.append(0)\r\n    return max(dp)"
    ],
    "test_cases": [
      "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5",
      "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4",
      "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      210
    ],
    "generation_times": [
      0.7351377010345459
    ]
  },
  {
    "task_id": 61,
    "prompt": "Write a python function to count number of substrings with the sum of digits equal to their length.\ndef count_Substrings(s,n):\r",
    "generated_codes": [
      "def count_Substrings(s,n):\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n+1):\r\n            sum =  0\r\n            for k in range (i,j):\r\n                sum += int(s[k])\r\n            if sum == j:\r\n                count += 1\r\n    return count\r"
    ],
    "test_cases": [
      "assert count_Substrings('112112',6) == 6",
      "assert count_Substrings('111',3) == 6",
      "assert count_Substrings('1101112',7) == 12"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      263
    ],
    "generation_times": [
      0.9022202491760254
    ]
  },
  {
    "task_id": 62,
    "prompt": "Write a python function to find smallest number in a list.\ndef smallest_num(xs):",
    "generated_codes": [
      "def smallest_num(xs):\n    return min(xs)"
    ],
    "test_cases": [
      "assert smallest_num([10, 20, 1, 45, 99]) == 1",
      "assert smallest_num([1, 2, 3]) == 1",
      "assert smallest_num([45, 46, 50, 60]) == 45"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      40
    ],
    "generation_times": [
      0.06862854957580566
    ]
  },
  {
    "task_id": 63,
    "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.\ndef max_difference(test_list):\r",
    "generated_codes": [
      "def max_difference(test_list):\r\n    max_diff = 0\r\n    for i in range(len(test_list)):\r\n        for j in range(i+1, len(test_list)):\r\n            diff = test_list[i][1] - test_list[j][1]\r\n            if diff > max_diff:\r\n                max_diff=diff\r\n    return max_diff"
    ],
    "test_cases": [
      "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
      "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
      "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      270
    ],
    "generation_times": [
      0.6249141693115234
    ]
  },
  {
    "task_id": 64,
    "prompt": "Write a function to sort a list of tuples using lambda.\ndef subject_marks(subjectmarks):\r",
    "generated_codes": [
      "def subject_marks(subjectmarks):\r\n    return sorted(subjectmarks, key=lambda x: x[1])"
    ],
    "test_cases": [
      "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
      "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
      "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      85
    ],
    "generation_times": [
      0.1721043586730957
    ]
  },
  {
    "task_id": 65,
    "prompt": "Write a function of recursion list sum.\ndef recursive_list_sum(data_list):\r",
    "generated_codes": [
      "def recursive_list_sum(data_list):\r\n    if len(data_list) == 0:\r\n        return 0\r\n    else:\r\n        first_element = data_list[0]\r\n        rest_of_list = dataList[1:]\r\n        return first_element + recursive_list(sum(rest_of_list))"
    ],
    "test_cases": [
      "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
      "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
      "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      233
    ],
    "generation_times": [
      0.5098898410797119
    ]
  },
  {
    "task_id": 66,
    "prompt": "Write a python function to count positive numbers in a list.\ndef pos_count(list):\r",
    "generated_codes": [
      "def pos_count(list):\r\n    count = 0\r\n    for i in list:\r\n        if i > 0:\r\n            count += 1\r\n    return count\r"
    ],
    "test_cases": [
      "assert pos_count([1,-2,3,-4]) == 2",
      "assert pos_count([3,4,5,-1]) == 3",
      "assert pos_count([1,2,3,4]) == 4"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      117
    ],
    "generation_times": [
      0.5703251361846924
    ]
  },
  {
    "task_id": 67,
    "prompt": "Write a function to find the number of ways to partition a set of bell numbers.\ndef bell_number(n):   \r",
    "generated_codes": [
      "def bell_number(n):   \r\n    if n == 0:       \r\n        return 1   \r\r\n    return b_n\r\r"
    ],
    "test_cases": [
      "assert bell_number(2)==2",
      "assert bell_number(10)==115975",
      "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      85
    ],
    "generation_times": [
      0.7906844615936279
    ]
  },
  {
    "task_id": 68,
    "prompt": "Write a python function to check whether the given array is monotonic or not.\ndef is_Monotonic(A): \r",
    "generated_codes": [
      "def is_Monotonic(A): \r\n    if len(A) == 0:\r\n        return True\r\n    elif len(A)==1:\r\n        return False\r\n    else:\r\n        for i in range(1,len(A)):\r\n            if A[i-1]>A[i]:\r\n                return False\r\n            elif A[i]<A[i-2]:\r\n                return True"
    ],
    "test_cases": [
      "assert is_Monotonic([6, 5, 4, 4]) == True",
      "assert is_Monotonic([1, 2, 2, 3]) == True",
      "assert is_Monotonic([1, 3, 2]) == False"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      271
    ],
    "generation_times": [
      0.8580379486083984
    ]
  },
  {
    "task_id": 69,
    "prompt": "Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\r",
    "generated_codes": [
      "def is_sublist(l, s):\r\n    for i in range(len(s)):\r\n        if l[i] == s[0]:\r\n            if len(s) == 1:\r\n                return True\r\n            else:\r\n                if is_substring(l[i+1:], s):\r\n                    return True\r\n        else:\r\n            break\r\n    return False\r\ndef is_string(s):\r\n    return isinstance(s, str)\r\ndef is_list(l):\r\n    try:\r\n        l.pop()\r\n        return True \r\n    except IndexError:\r\n        return False\r\ndef is_tuple(t):\r\n    if type(t) == tuple:\r\n        if len(t) > 1 and all(isinstance(i, (int, float)) for i  in t):\r\n            return True\r\n    return is_list(t)\r\ndef substring(l, sub):\r\n    for x in l:\r\n        sub = sub.replace(x, \"\")\r\n        if sub == \"\":\r\n            return l\r"
    ],
    "test_cases": [
      "assert is_sublist([2,4,3,5,7],[3,7])==False",
      "assert is_sublist([2,4,3,5,7],[4,3])==True",
      "assert is_sublist([2,4,3,5,7],[1,6])==False"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      732
    ],
    "generation_times": [
      1.8719522953033447
    ]
  },
  {
    "task_id": 70,
    "prompt": "Write a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input, k):\r",
    "generated_codes": [
      "def find_equal_tuple(Input, k):\r\n    for i in range(len(Input)):\r\n        if len(Input[i]) != k:\r\n            return False\r\n    return True"
    ],
    "test_cases": [
      "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'",
      "assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'",
      "assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      139
    ],
    "generation_times": [
      0.2620210647583008
    ]
  },
  {
    "task_id": 71,
    "prompt": "Write a function to sort a list of elements using comb sort.\ndef comb_sort(nums):\r",
    "generated_codes": [
      "def comb_sort(nums):\r\n    gap = len(nums)\r\n    shrink_factor = 1.3\r\n    swapped = True\r\n    while gap > 1 or swapped:\r\n        gap = int(gap / shrink_factor)\r\n        swapped = False\r\n        for i in range(gap, len(nums)):\r\n            if nums[i] < nums[i - gap]:\r\n                nums[i], nums[i-gap] = nums[i-gap], nums[\r\n                    i]\r\n                swapped =True"
    ],
    "test_cases": [
      "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
      "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
      "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      378
    ],
    "generation_times": [
      0.9444589614868164
    ]
  },
  {
    "task_id": 72,
    "prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not.\ndef dif_Square(n): \r",
    "generated_codes": [
      "def dif_Square(n): \r\n    if n < 0: \r\n        return False\r\n    for i in range(1, int(n**0.5) + 1): \r\n        if (n - i*i) == j*j: \r\n            return True\r\n    return False\r"
    ],
    "test_cases": [
      "assert dif_Square(5) == True",
      "assert dif_Square(10) == False",
      "assert dif_Square(15) == True"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      174
    ],
    "generation_times": [
      0.6241943836212158
    ]
  },
  {
    "task_id": 73,
    "prompt": "Write a function to split the given string with multiple delimiters by using regex.\ndef multiple_split(text):\r",
    "generated_codes": [
      "def multiple_split(text):\r\n    matches = re.findall(r'\\W+', text)\r\n    return [match.strip() for match in matches]"
    ],
    "test_cases": [
      "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']",
      "assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']",
      "assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      114
    ],
    "generation_times": [
      0.5365841388702393
    ]
  },
  {
    "task_id": 74,
    "prompt": "Write a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):    \r",
    "generated_codes": [
      "def is_samepatterns(colors, patterns):    \r\n    return True"
    ],
    "test_cases": [
      "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True ",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False ",
      "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False "
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      59
    ],
    "generation_times": [
      0.11926746368408203
    ]
  },
  {
    "task_id": 75,
    "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\r",
    "generated_codes": [
      "def find_tuples(test_list, K):\r\n    result = []\r\n    for tuple in test_list:\r\n        if all(element % K == 0 for element in tuple):\r\n            result.append(tuple)\r\n    return result"
    ],
    "test_cases": [
      "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'",
      "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'",
      "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      185
    ],
    "generation_times": [
      0.34369707107543945
    ]
  },
  {
    "task_id": 76,
    "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\r",
    "generated_codes": [
      "def count_Squares(m,n):\r\n    pass\r"
    ],
    "test_cases": [
      "assert count_Squares(4,3) == 20",
      "assert count_Squares(2,2) == 5",
      "assert count_Squares(1,1) == 1"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      34
    ],
    "generation_times": [
      0.2552776336669922
    ]
  },
  {
    "task_id": 77,
    "prompt": "Write a python function to find the difference between sum of even and odd digits.\ndef is_Diff(n): \r",
    "generated_codes": [
      "def is_Diff(n): \r\n    sum_even = 0\r\n    sum_odd = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        if digit % 2 == 0:\r\n            sum_even += digit\r\n        else:\r\n            sum_odd += digit\r\n        n //= 1\r"
    ],
    "test_cases": [
      "assert is_Diff (12345) == False",
      "assert is_Diff(1212112) == True",
      "assert is_Diff(1212) == False"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      216
    ],
    "generation_times": [
      0.8919508457183838
    ]
  },
  {
    "task_id": 78,
    "prompt": "Write a python function to find number of integers with odd number of set bits.\ndef count_With_Odd_SetBits(n): \r",
    "generated_codes": [
      "def count_With_Odd_SetBits(n): \r\n    count = 0\r\n    while n > 0: \r\n        if (n & 1) == 1: \r\n            count += 1\r\n        n >>= 1\r\nn = 15 # binary representation is 1110\r\ncount_With_Ord_SetBits(15)\r"
    ],
    "test_cases": [
      "assert count_With_Odd_SetBits(5) == 3",
      "assert count_With_Odd_SetBits(10) == 5",
      "assert count_With_Odd_SetBits(15) == 8"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      202
    ],
    "generation_times": [
      0.7423930168151855
    ]
  },
  {
    "task_id": 79,
    "prompt": "Write a python function to check whether the length of the word is odd or not.\ndef word_len(s): \r",
    "generated_codes": [
      "def word_len(s): \r\n    return len(s) % 2 != 0\r"
    ],
    "test_cases": [
      "assert word_len(\"Hadoop\") == False",
      "assert word_len(\"great\") == True",
      "assert word_len(\"structure\") == True"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      46
    ],
    "generation_times": [
      0.19142889976501465
    ]
  },
  {
    "task_id": 80,
    "prompt": "Write a function to find the nth tetrahedral number.\ndef tetrahedral_number(n): \r",
    "generated_codes": [
      "def tetrahedral_number(n): \r\n    return (n * (n + 1) * (3 * n + 2)) // 6\r"
    ],
    "test_cases": [
      "assert tetrahedral_number(5) == 35.0",
      "assert tetrahedral_number(6) == 56.0",
      "assert tetrahedral_number(7) == 84.0"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      73
    ],
    "generation_times": [
      0.4602534770965576
    ]
  },
  {
    "task_id": 81,
    "prompt": "Write a function to zip the two given tuples.\ndef zip_tuples(test_tup1, test_tup2):\r",
    "generated_codes": [
      "def zip_tuples(test_tup1, test_tup2):\r\n    return tuple(zip(test_tups1, tups2))"
    ],
    "test_cases": [
      "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]",
      "assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]",
      "assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      79
    ],
    "generation_times": [
      0.14855647087097168
    ]
  },
  {
    "task_id": 82,
    "prompt": "Write a function to find the volume of a sphere.\ndef volume_sphere(r):\r",
    "generated_codes": [
      "def volume_sphere(r):\r\n    return (4/3) * pi * r**3"
    ],
    "test_cases": [
      "assert volume_sphere(10)==4188.790204786391",
      "assert volume_sphere(25)==65449.84694978735",
      "assert volume_sphere(20)==33510.32163829113"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      51
    ],
    "generation_times": [
      0.14807939529418945
    ]
  },
  {
    "task_id": 83,
    "prompt": "Write a python function to find the character made by adding all the characters of the given string.\ndef get_Char(strr):  \r",
    "generated_codes": [
      "def get_Char(strr):  \r\n    return str(strr[0]) + str(str(r[1])) + str(r[2]) + \" \" + str(3) + str(\" \") + str(len(strr)) + str() + str()\r"
    ],
    "test_cases": [
      "assert get_Char(\"abc\") == \"f\"",
      "assert get_Char(\"gfg\") == \"t\"",
      "assert get_Char(\"ab\") == \"c\""
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      135
    ],
    "generation_times": [
      0.5239136219024658
    ]
  },
  {
    "task_id": 84,
    "prompt": "Write a function to find the n-th number in newman conway sequence.\ndef sequence(n): \r",
    "generated_codes": [
      "def sequence(n): \r\n    if n == 1: \r\n        return 0\r\n    elif n ==2: \r\n         return 1\r\n    else: \r\n       return sequence(n-1) + sequence(n - 2)\r"
    ],
    "test_cases": [
      "assert sequence(10) == 6",
      "assert sequence(2) == 1",
      "assert sequence(3) == 2"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      149
    ],
    "generation_times": [
      0.4851706027984619
    ]
  },
  {
    "task_id": 85,
    "prompt": "Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\r",
    "generated_codes": [
      "def surfacearea_sphere(r):\r\n    return 4 * 3.14 * r ** 2"
    ],
    "test_cases": [
      "assert surfacearea_sphere(10)==1256.6370614359173",
      "assert surfacearea_sphere(15)==2827.4333882308138",
      "assert surfacearea_sphere(20)==5026.548245743669"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      56
    ],
    "generation_times": [
      0.16479182243347168
    ]
  },
  {
    "task_id": 86,
    "prompt": "Write a function to find nth centered hexagonal number.\ndef centered_hexagonal_number(n):\r",
    "generated_codes": [
      "def centered_hexagonal_number(n):\r\n    return (n*(2*n-1))//2"
    ],
    "test_cases": [
      "assert centered_hexagonal_number(10) == 271",
      "assert centered_hexagonal_number(2) == 7",
      "assert centered_hexagonal_number(9) == 217"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      60
    ],
    "generation_times": [
      0.3679165840148926
    ]
  },
  {
    "task_id": 87,
    "prompt": "Write a function to merge three dictionaries into a single expression.\ndef merge_dictionaries_three(dict1,dict2, dict3):\r",
    "generated_codes": [
      "def merge_dictionaries_three(dict1,dict2, dict3):\r\n    return {**dict1, **dict2,**dict3}"
    ],
    "test_cases": [
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
      "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      88
    ],
    "generation_times": [
      0.15654873847961426
    ]
  },
  {
    "task_id": 88,
    "prompt": "Write a function to get the frequency of the elements in a list.\ndef freq_count(list1):\r",
    "generated_codes": [
      "def freq_count(list1):\r\n    count = {}\r\n    for item in list1:\r\n        if item in count:\r\n            count[item] += 1\r\n        else:\r\n            count.update({item: 1})\r\n    return count"
    ],
    "test_cases": [
      "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ",
      "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ",
      "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) "
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      189
    ],
    "generation_times": [
      0.43195343017578125
    ]
  },
  {
    "task_id": 89,
    "prompt": "Write a function to find the closest smaller number than n.\ndef closest_num(N):\r",
    "generated_codes": [
      "def closest_num(N):\r\n    if N < 10:\r\n        return N\r\n    else:\r\n        for i in range(9, -1, -2):\r\n            if N - i <= N - (i + 1):\r\n                return i\r\n            else:\r\n                return N - 1"
    ],
    "test_cases": [
      "assert closest_num(11) == 10",
      "assert closest_num(7) == 6",
      "assert closest_num(12) == 11"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      213
    ],
    "generation_times": [
      0.569354772567749
    ]
  },
  {
    "task_id": 90,
    "prompt": "Write a python function to find the length of the longest word.\ndef len_log(list1):\r",
    "generated_codes": [
      "def len_log(list1):\r\n    list2 = []\r\n    for i in list1:\r\n        list2.append(len(i))\r\n    return max(list2)"
    ],
    "test_cases": [
      "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
      "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
      "assert len_log([\"small\",\"big\",\"tall\"]) == 5"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      109
    ],
    "generation_times": [
      0.26261234283447266
    ]
  },
  {
    "task_id": 91,
    "prompt": "Write a function to check if a substring is present in a given list of string values.\ndef find_substring(str1, sub_str):\r",
    "generated_codes": [
      "def find_substring(str1, sub_str):\r\n    return str1.find(sub_str) != -1"
    ],
    "test_cases": [
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
      "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      71
    ],
    "generation_times": [
      0.5226280689239502
    ]
  },
  {
    "task_id": 92,
    "prompt": "Write a function to check whether the given number is undulating or not.\ndef is_undulating(n): \r",
    "generated_codes": [
      "def is_undulating(n): \r\n    return True"
    ],
    "test_cases": [
      "assert is_undulating(\"1212121\") == True",
      "assert is_undulating(\"1991\") == False",
      "assert is_undulating(\"121\") == True"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      39
    ],
    "generation_times": [
      0.10671305656433105
    ]
  },
  {
    "task_id": 93,
    "prompt": "Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\r",
    "generated_codes": [
      "def power(a,b):\r\n    return a**b\r"
    ],
    "test_cases": [
      "assert power(3,4) == 81",
      "assert power(2,3) == 8",
      "assert power(5,5) == 3125"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      33
    ],
    "generation_times": [
      0.145033597946167
    ]
  },
  {
    "task_id": 94,
    "prompt": "Write a function to extract the index minimum value record from the given tuples.\ndef index_minimum(test_list):\r",
    "generated_codes": [
      "def index_minimum(test_list):\r\n    pass\ntest_list = [(1, 2), (3, 4), (5, 6), (7, 8)]"
    ],
    "test_cases": [
      "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
      "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'",
      "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      84
    ],
    "generation_times": [
      0.4743940830230713
    ]
  },
  {
    "task_id": 95,
    "prompt": "Write a python function to find the minimum length of sublist.\ndef Find_Min_Length(lst):  \r",
    "generated_codes": [
      "def Find_Min_Length(lst):  \r\n    min_length = float('inf')  \r\n    for i in range(len(lst)):  \r\n        for j in range(i+1, len(lst)):  \r\r\n            if len(lst[i:j]) < min_length:  \r\n                min_length=len(lst[i: j])  \r\n    return min_length"
    ],
    "test_cases": [
      "assert Find_Min_Length([[1],[1,2]]) == 1",
      "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
      "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      250
    ],
    "generation_times": [
      0.6133830547332764
    ]
  },
  {
    "task_id": 96,
    "prompt": "Write a python function to find the number of divisors of a given integer.\ndef divisor(n):\r",
    "generated_codes": [
      "def divisor(n):\r\n    count = 0\r\n    for i in range(1, n+1):\r\n        if n % i == 0:\r\n            count += 1\r\n    return count"
    ],
    "test_cases": [
      "assert divisor(15) == 4 ",
      "assert divisor(12) == 6",
      "assert divisor(9) == 3"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      125
    ],
    "generation_times": [
      0.3587651252746582
    ]
  },
  {
    "task_id": 97,
    "prompt": "Write a function to find frequency count of list of lists.\ndef frequency_lists(list1):\r",
    "generated_codes": [
      "def frequency_lists(list1):\r\n    freq = {}\r\n    for i in range(len(list1)):\r\n        if list1[i] not in freq:\r\n            freq[list1[i]] = 0\r\n        freq[list(i)] += 1\r\n    return freq"
    ],
    "test_cases": [
      "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
      "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
      "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      186
    ],
    "generation_times": [
      0.492840051651001
    ]
  },
  {
    "task_id": 98,
    "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.\ndef multiply_num(numbers):  \r",
    "generated_codes": [
      "def multiply_num(numbers):  \r\n    result = 1\r\n    for num in numbers:\r\n        result *= num\r\n    return result / len(numbers)"
    ],
    "test_cases": [
      "assert multiply_num((8, 2, 3, -1, 7))==-67.2",
      "assert multiply_num((-10,-20,-30))==-2000.0",
      "assert multiply_num((19,15,18))==1710.0"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      126
    ],
    "generation_times": [
      0.24732232093811035
    ]
  },
  {
    "task_id": 99,
    "prompt": "Write a function to convert the given decimal number to its binary equivalent.\ndef decimal_to_binary(n): \r",
    "generated_codes": [
      "def decimal_to_binary(n): \r\n    return n"
    ],
    "test_cases": [
      "assert decimal_to_binary(8) == '1000'",
      "assert decimal_to_binary(18) == '10010'",
      "assert decimal_to_binary(7) == '111' "
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      40
    ],
    "generation_times": [
      0.1151425838470459
    ]
  },
  {
    "task_id": 100,
    "prompt": "Write a function to find the next smallest palindrome of a specified number.\ndef next_smallest_palindrome(num):\r",
    "generated_codes": [
      "def next_smallest_palindrome(num):\r\n    pass\r"
    ],
    "test_cases": [
      "assert next_smallest_palindrome(99)==101",
      "assert next_smallest_palindrome(1221)==1331",
      "assert next_smallest_palindrome(120)==121"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      45
    ],
    "generation_times": [
      0.3211226463317871
    ]
  },
  {
    "task_id": 101,
    "prompt": "Write a function to find the kth element in the given array.\ndef kth_element(arr, n, k):\r",
    "generated_codes": [
      "def kth_element(arr, n, k):\r\n    return arr[n-k]"
    ],
    "test_cases": [
      "assert kth_element([12,3,5,7,19], 5, 2) == 3",
      "assert kth_element([17,24,8,23], 4, 3) == 8",
      "assert kth_element([16,21,25,36,4], 5, 4) == 36"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      48
    ],
    "generation_times": [
      0.08061623573303223
    ]
  },
  {
    "task_id": 102,
    "prompt": "Write a function to convert snake case string to camel case string.\ndef snake_to_camel(word):\r",
    "generated_codes": [
      "def snake_to_camel(word):\r\n    words = word.split('_')\r\n    return words[0] + ''.join(word.title() for word in words[1:])"
    ],
    "test_cases": [
      "assert snake_to_camel('python_program')=='PythonProgram'",
      "assert snake_to_camel('python_language')==('PythonLanguage')",
      "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      121
    ],
    "generation_times": [
      0.26033663749694824
    ]
  },
  {
    "task_id": 103,
    "prompt": "Write a function to find eulerian number a(n, m).\ndef eulerian_num(n, m): \r",
    "generated_codes": [
      "def eulerian_num(n, m): \r\n    if n == 0: \r\n        return 1 \r\n    else: \r\n         return (n * (n - 1) * eulerian\\_num(n - 2, m) + \r"
    ],
    "test_cases": [
      "assert eulerian_num(3, 1) == 4",
      "assert eulerian_num(4, 1) == 11",
      "assert eulerian_num(5, 3) == 26"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      132
    ],
    "generation_times": [
      0.5833747386932373
    ]
  },
  {
    "task_id": 104,
    "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.\ndef sort_sublists(input_list):\r",
    "generated_codes": [
      "def sort_sublists(input_list):\r\n    return sorted(input_list, key=lambda x: sorted(x))"
    ],
    "test_cases": [
      "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
      "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
      "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      86
    ],
    "generation_times": [
      0.15127325057983398
    ]
  },
  {
    "task_id": 105,
    "prompt": "Write a python function to count true booleans in the given list.\ndef count(lst):   \r",
    "generated_codes": [
      "def count(lst):   \r\n    return sum(1 for x in lst if x == True)"
    ],
    "test_cases": [
      "assert count([True,False,True]) == 2",
      "assert count([False,False]) == 0",
      "assert count([True,True,True]) == 3"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      63
    ],
    "generation_times": [
      0.15521955490112305
    ]
  },
  {
    "task_id": 106,
    "prompt": "Write a function to add the given list to the given tuples.\ndef add_lists(test_list, test_tup):\r",
    "generated_codes": [
      "def add_lists(test_list, test_tup):\r\n    result = []\r\n    for i in test_list:\r\n        result.append(i)\r\n    for j in test_tups:\r\n        if type(j) == tuple:\r\n            result.extend(j)\r\n        else:\r\n            for k in range(len(j)):\r\n                result.append(j[k])\r\n    return result"
    ],
    "test_cases": [
      "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
      "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
      "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      296
    ],
    "generation_times": [
      0.576056957244873
    ]
  },
  {
    "task_id": 107,
    "prompt": "Write a python function to count hexadecimal numbers for a given range.\ndef count_Hexadecimal(L,R) :  \r",
    "generated_codes": [
      "def count_Hexadecimal(L,R) :  \r\n    count = 0\r\n    for i in range(L,R+1):  \r\n        if(i>9 and i<36):  \r\n            count += 1\r\n    return count"
    ],
    "test_cases": [
      "assert count_Hexadecimal(10,15) == 6",
      "assert count_Hexadecimal(2,4) == 0",
      "assert count_Hexadecimal(15,16) == 1"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      146
    ],
    "generation_times": [
      0.37863969802856445
    ]
  },
  {
    "task_id": 108,
    "prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\ndef merge_sorted_list(num1,num2,num3):\r",
    "generated_codes": [
      "def merge_sorted_list(num1,num2,num3):\r\n    pass"
    ],
    "test_cases": [
      "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
      "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
      "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      48
    ],
    "generation_times": [
      0.09510207176208496
    ]
  },
  {
    "task_id": 109,
    "prompt": "Write a python function to find the count of rotations of a binary string with odd value.\ndef odd_Equivalent(s,n): \r",
    "generated_codes": [
      "def odd_Equivalent(s,n): \r\n    count = 0\r\n    for i in range(n):\r\n        if s[i] == '1':\r\n            count += 1\r\n    return count\r"
    ],
    "test_cases": [
      "assert odd_Equivalent(\"011001\",6) == 3",
      "assert odd_Equivalent(\"11011\",5) == 4",
      "assert odd_Equivalent(\"1010\",4) == 2"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      132
    ],
    "generation_times": [
      0.7466237545013428
    ]
  },
  {
    "task_id": 110,
    "prompt": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\ndef extract_missing(test_list, strt_val, stop_val):\r",
    "generated_codes": [
      "def extract_missing(test_list, strt_val, stop_val):\r\n    \"\"\"\r\n        This function takes in a list of numbers and two integers representing the start and end values of a range.\r\n        It returns a list containing all the numbers in the original list that are not present in the specified range.\r\n    \"\"\"\r\n    missing_numbers = []\r\n    for num in test_list:\r\n        if strt_val <= num <= stop_val:\r\n            missing_numbers.append(num)\r\nreturn missing_numbers\r"
    ],
    "test_cases": [
      "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]",
      "assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]",
      "assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      466
    ],
    "generation_times": [
      2.224261522293091
    ]
  },
  {
    "task_id": 111,
    "prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item\ndef common_in_nested_lists(nestedlist):\r",
    "generated_codes": [
      "def common_in_nested_lists(nestedlist):\r\n    return []"
    ],
    "test_cases": [
      "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]",
      "assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]",
      "assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      54
    ],
    "generation_times": [
      0.1100304126739502
    ]
  },
  {
    "task_id": 112,
    "prompt": "Write a python function to find the perimeter of a cylinder.\ndef perimeter(diameter,height) : \r",
    "generated_codes": [
      "def perimeter(diameter,height) : \r\n    pi = 3.14\r\n    radius = diameter / 2\r\n    area = pi * radius ** 2 \r\n    perimeter = 2 * (pi * radius + height)\r\n    return perimeter"
    ],
    "test_cases": [
      "assert perimeter(2,4) == 12",
      "assert perimeter(1,2) == 6",
      "assert perimeter(3,1) == 8"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      171
    ],
    "generation_times": [
      0.4414398670196533
    ]
  },
  {
    "task_id": 113,
    "prompt": "Write a function to check if a string represents an integer or not.\ndef check_integer(text):\r",
    "generated_codes": [
      "def check_integer(text):\r\n    try:\r\n        int(text)\r\n        return True\r\n    except ValueError:\r\n        return False"
    ],
    "test_cases": [
      "assert check_integer(\"python\")==False",
      "assert check_integer(\"1\")==True",
      "assert check_integer(\"12345\")==True"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      120
    ],
    "generation_times": [
      0.19718599319458008
    ]
  },
  {
    "task_id": 114,
    "prompt": "Write a function to assign frequency to each tuple in the given tuple list.\ndef assign_freq(test_list):\r",
    "generated_codes": [
      "def assign_freq(test_list):\r\n    freq_dict = {}\r\n    for item in test_list:\r\n        if item not in freq_dict:\r\n            freq_dict[item] = 1\r\n        else:\r\n            freq = freq_dict.get(item)\r\n            freq += 1\r\n        freq_dict.update({item:freq})\r\n    return freq_dict"
    ],
    "test_cases": [
      "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'",
      "assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'",
      "assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      282
    ],
    "generation_times": [
      0.6192071437835693
    ]
  },
  {
    "task_id": 115,
    "prompt": "Write a function to check whether all dictionaries in a list are empty or not.\ndef empty_dit(list1):\r",
    "generated_codes": [
      "def empty_dit(list1):\r\n    for i in list1:\r\n        if len(i) != 0:\r\n            return False\r\n    return True"
    ],
    "test_cases": [
      "assert empty_dit([{},{},{}])==True",
      "assert empty_dit([{1,2},{},{}])==False",
      "assert empty_dit({})==True"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      110
    ],
    "generation_times": [
      0.23444294929504395
    ]
  },
  {
    "task_id": 116,
    "prompt": "Write a function to convert a given tuple of positive integers into an integer.\ndef tuple_to_int(nums):\r",
    "generated_codes": [
      "def tuple_to_int(nums):\r\n    return int(''.join(map(str, nums)))"
    ],
    "test_cases": [
      "assert tuple_to_int((1,2,3))==123",
      "assert tuple_to_int((4,5,6))==456",
      "assert tuple_to_int((5,6,7))==567"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      64
    ],
    "generation_times": [
      0.12223386764526367
    ]
  },
  {
    "task_id": 117,
    "prompt": "Write a function to convert all possible convertible elements in the list to float.\ndef list_to_float(test_list):\r",
    "generated_codes": [
      "def list_to_float(test_list):\r\n    return [float(element) for element in test_list]"
    ],
    "test_cases": [
      "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'",
      "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'",
      "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      83
    ],
    "generation_times": [
      0.13116884231567383
    ]
  },
  {
    "task_id": 118,
    "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string): \r",
    "generated_codes": [
      "def string_to_list(string): \r\n    return string.split() \r"
    ],
    "test_cases": [
      "assert string_to_list(\"python programming\")==['python','programming']",
      "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']",
      "assert string_to_list(\"write a program\")==['write','a','program']"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      57
    ],
    "generation_times": [
      0.253070592880249
    ]
  },
  {
    "task_id": 119,
    "prompt": "Write a python function to find the element that appears only once in a sorted array.\ndef search(arr,n) :\r",
    "generated_codes": [
      "def search(arr,n) :\r\n    for i in range(0, n) :\r\n        if arr[i] == 1 :\r\n            return\r"
    ],
    "test_cases": [
      "assert search([1,1,2,2,3],5) == 3",
      "assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8",
      "assert search([1,2,2,3,3,4,4],7) == 1"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      94
    ],
    "generation_times": [
      0.4016597270965576
    ]
  },
  {
    "task_id": 120,
    "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.\ndef max_product_tuple(list1):\r",
    "generated_codes": [
      "def max_product_tuple(list1):\r\n    max_product = 0\r\n    current_product = None\r\n    for i in range(len(list1)):\r\n        for j in range(i + 1, len(list1)):\r\n            product = list1[i][0] * list1[j][0]\r\n            if product > max_product:\r\n                max_product, current_product, i, j = product, (list1[i], list1[\r\n                    j]), i, 0\r\n    return current_product"
    ],
    "test_cases": [
      "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
      "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200",
      "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      383
    ],
    "generation_times": [
      1.169234275817871
    ]
  },
  {
    "task_id": 121,
    "prompt": "Write a function to find the triplet with sum of the given array\ndef check_triplet(A, n, sum, count):\r",
    "generated_codes": [
      "def check_triplet(A, n, sum, count):\r\n    A.sort()\r\n    for i in range(n-2):\r\n        j = i+1\r\n        k = n-1\r\n        while(j<k):\r\n            if A[i]+A[j]+A[k] == sum:\r\n                return True\r\n            elif A[i] + A[j] +A[k]>sum:\r\n                k-=1\r\n            else:\r\n                j+=1\r\n    return False"
    ],
    "test_cases": [
      "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True",
      "assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False",
      "assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      321
    ],
    "generation_times": [
      0.9604756832122803
    ]
  },
  {
    "task_id": 122,
    "prompt": "Write a function to find n’th smart number.\ndef smartNumber(n): \r",
    "generated_codes": [
      "def smartNumber(n): \r\n    return n"
    ],
    "test_cases": [
      "assert smartNumber(1) == 30",
      "assert smartNumber(50) == 273",
      "assert smartNumber(1000) == 2664"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      34
    ],
    "generation_times": [
      0.10554957389831543
    ]
  },
  {
    "task_id": 123,
    "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.\ndef amicable_numbers_sum(limit):\r",
    "generated_codes": [
      "def amicable_numbers_sum(limit):\r\n    sum_of_divisors = {i: sum([j for j in range(1, i) if i % j == 0]) for i in range(limit)}\r\n    return sum([sum_of_divisor for sum_of_sum_of_divs if sum_of_dvds == sum_of_sums_of_divisors and sum_of_svds != sum_of_ds])"
    ],
    "test_cases": [
      "assert amicable_numbers_sum(999)==504",
      "assert amicable_numbers_sum(9999)==31626",
      "assert amicable_numbers_sum(99)==0"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      254
    ],
    "generation_times": [
      0.7346181869506836
    ]
  },
  {
    "task_id": 124,
    "prompt": "Write a function to get the angle of a complex number.\ndef angle_complex(a,b):\r",
    "generated_codes": [
      "def angle_complex(a,b):\r\n    return math.atan2(b.imag,a.real)"
    ],
    "test_cases": [
      "assert angle_complex(0,1j)==1.5707963267948966 ",
      "assert angle_complex(2,1j)==0.4636476090008061",
      "assert angle_complex(0,2j)==1.5707963267948966"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      61
    ],
    "generation_times": [
      0.11300253868103027
    ]
  },
  {
    "task_id": 125,
    "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string, n): \r",
    "generated_codes": [
      "def find_length(string, n): \r\n    max_len = 0\r\n    for i in range(n):\r\n        if string[i] == '0':\r\n            count_0 = 1\r\n        else:\r\n            count_zero = 2\r\n        if count_zero > count_1:\r\n            max_len += count_zero - count_ones\r\n    return max_len"
    ],
    "test_cases": [
      "assert find_length(\"11000010001\", 11) == 6",
      "assert find_length(\"10111\", 5) == 1",
      "assert find_length(\"11011101100101\", 14) == 2 "
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      269
    ],
    "generation_times": [
      1.2593188285827637
    ]
  },
  {
    "task_id": 126,
    "prompt": "Write a python function to find the sum of common divisors of two given numbers.\ndef sum(a,b): \r",
    "generated_codes": [
      "def sum(a,b): \r\n    c=0\r\n    for i in range(1,a+1): \r\n        if (a%i==0) and (b%i== 0): \r\n            c=c+i \r\n    return c \r"
    ],
    "test_cases": [
      "assert sum(10,15) == 6",
      "assert sum(100,150) == 93",
      "assert sum(4,6) == 3"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      125
    ],
    "generation_times": [
      0.5088868141174316
    ]
  },
  {
    "task_id": 127,
    "prompt": "Write a function to multiply two integers without using the * operator in python.\ndef multiply_int(x, y):\r",
    "generated_codes": [
      "def multiply_int(x, y):\r\n    if x == 0 or y == 1:\r\n        return x\r\n    elif y == -1:\r\n       return -x\r\n    else:\r\n        return (multiply_int(x,y-1)+x)"
    ],
    "test_cases": [
      "assert multiply_int(10,20)==200",
      "assert multiply_int(5,10)==50",
      "assert multiply_int(4,8)==32"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      155
    ],
    "generation_times": [
      0.44831228256225586
    ]
  },
  {
    "task_id": 128,
    "prompt": "Write a function to shortlist words that are longer than n from a given list of words.\ndef long_words(n, str):\r",
    "generated_codes": [
      "def long_words(n, str):\r\n    return [word for word in str if len(word) > n]"
    ],
    "test_cases": [
      "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
      "assert long_words(2,\"writing a program\")==['writing','program']",
      "assert long_words(5,\"sorting list\")==['sorting']"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      75
    ],
    "generation_times": [
      0.16045022010803223
    ]
  },
  {
    "task_id": 129,
    "prompt": "Write a function to calculate magic square.\ndef magic_square_test(my_matrix):\r",
    "generated_codes": [
      "def magic_square_test(my_matrix):\r\n    if sum(row) == 0 and sum(my_matrix) == len(my_matrix)**2:\r\n        return True\r\n    else:\r\n        return False\r"
    ],
    "test_cases": [
      "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
      "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      151
    ],
    "generation_times": [
      1.0814292430877686
    ]
  },
  {
    "task_id": 130,
    "prompt": "Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums):\r",
    "generated_codes": [
      "def max_occurrences(nums):\r\n    occurrences = {}\r\n    for num in nums:\r\n        if num in occurrences:\r\n            occurrences[num] += 1\r\n        else:\r\n            occurrences[\r\n                num] = 1\r\nmax_num = max(occurrences, key=occurrences.get)\r"
    ],
    "test_cases": [
      "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)",
      "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)",
      "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      254
    ],
    "generation_times": [
      0.6220719814300537
    ]
  },
  {
    "task_id": 131,
    "prompt": "Write a python function to reverse only the vowels of a given string.\ndef reverse_vowels(str1):\r",
    "generated_codes": [
      "def reverse_vowels(str1):\r\n    vowels = 'aeiouAEIOU'\r\n    str1 = list(str1)\r\n    i, j = 0, len(str1) - 1\r\n    while i < j:\r\n        if str1[i] in vowels and str1[j] in  vowels:\r\n            str1[int(i)], str1[ int(j)] = str1 [int(j)], str[ int(i)]\r\n            i += 1\r\n            j -= 1\r\n        elif str1i in vowels:\r\n                j -=1\r\n        else:\r\n            i+=1\r\n            j-=1\r"
    ],
    "test_cases": [
      "assert reverse_vowels(\"Python\") == \"Python\"",
      "assert reverse_vowels(\"USA\") == \"ASU\"",
      "assert reverse_vowels(\"ab\") == \"ab\""
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      393
    ],
    "generation_times": [
      1.2693228721618652
    ]
  },
  {
    "task_id": 132,
    "prompt": "Write a function to convert tuple to a string.\ndef tup_string(tup1):\r",
    "generated_codes": [
      "def tup_string(tup1):\r\n    return str(tup)\r"
    ],
    "test_cases": [
      "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")",
      "assert tup_string(('p','y','t','h','o','n'))==(\"python\")",
      "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      43
    ],
    "generation_times": [
      0.27423977851867676
    ]
  },
  {
    "task_id": 133,
    "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\ndef sum_negativenum(nums):\r",
    "generated_codes": [
      "def sum_negativenum(nums):\r\n    return sum([num for num in nums if num < 0])"
    ],
    "test_cases": [
      "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
      "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
      "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      76
    ],
    "generation_times": [
      0.16409850120544434
    ]
  },
  {
    "task_id": 134,
    "prompt": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\ndef check_last (arr,n,p): \r",
    "generated_codes": [
      "def check_last (arr,n,p): \r\n    if n==0: \r\n        return True\r\n    else: \r\n         arr[n-1] = arr[n - 1] % 2 + 1 \r\n         return check_last(arr, n -  1, p)"
    ],
    "test_cases": [
      "assert check_last([5,7,10],3,1) == \"ODD\"",
      "assert check_last([2,3],2,3) == \"EVEN\"",
      "assert check_last([1,2,3],3,1) == \"ODD\""
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      159
    ],
    "generation_times": [
      0.536353349685669
    ]
  },
  {
    "task_id": 135,
    "prompt": "Write a function to find the nth hexagonal number.\ndef hexagonal_num(n): \r",
    "generated_codes": [
      "def hexagonal_num(n): \r\n    return (n * (2*n - 1)) % 1000\r"
    ],
    "test_cases": [
      "assert hexagonal_num(10) == 190",
      "assert hexagonal_num(5) == 45",
      "assert hexagonal_num(7) == 91"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      58
    ],
    "generation_times": [
      0.33103489875793457
    ]
  },
  {
    "task_id": 136,
    "prompt": "Write a function to calculate electricity bill.\ndef cal_electbill(units):\r",
    "generated_codes": [
      "def cal_electbill(units):\r\n    if units <= 100:\r\n        return units * 0.25\r\n    elif units > 150 and units <=300:\r\n        return (units - 140) * 1.5 + 210\r"
    ],
    "test_cases": [
      "assert cal_electbill(75)==246.25",
      "assert cal_electbill(265)==1442.75",
      "assert cal_electbill(100)==327.5"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      158
    ],
    "generation_times": [
      0.6366424560546875
    ]
  },
  {
    "task_id": 137,
    "prompt": "Write a function to find the ration of zeroes in an array of integers.\ndef zero_count(nums):\r",
    "generated_codes": [
      "def zero_count(nums):\r\n    count = 0\r\n    for i in range(len(nums)):\r\n        if nums[i] == 0:\r\n            count += 1\r\n    return count"
    ],
    "test_cases": [
      "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15",
      "assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00",
      "assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      136
    ],
    "generation_times": [
      0.3156461715698242
    ]
  },
  {
    "task_id": 138,
    "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n): \r",
    "generated_codes": [
      "def is_Sum_Of_Powers_Of_Two(n): \r\n    res = False \r\n    for i in range(0, 31): \r\n        if (n & (1 << i)): \r\n            res = True\r\n            break\r\n    return res"
    ],
    "test_cases": [
      "assert is_Sum_Of_Powers_Of_Two(10) == True",
      "assert is_Sum_Of_Powers_Of_Two(7) == False",
      "assert is_Sum_Of_Powers_Of_Two(14) == True"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      167
    ],
    "generation_times": [
      0.5203309059143066
    ]
  },
  {
    "task_id": 139,
    "prompt": "Write a function to find the circumference of a circle.\ndef circle_circumference(r):\r",
    "generated_codes": [
      "def circle_circumference(r):\r\n    return 2 * pi * r"
    ],
    "test_cases": [
      "assert circle_circumference(10)==62.830000000000005",
      "assert circle_circumference(5)==31.415000000000003",
      "assert circle_circumference(4)==25.132"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      51
    ],
    "generation_times": [
      0.24428582191467285
    ]
  },
  {
    "task_id": 140,
    "prompt": "Write a function to extract elements that occur singly in the given tuple list.\ndef extract_singly(test_list):\r",
    "generated_codes": [
      "def extract_singly(test_list):\r\n    result = []\r\n    for i in test_list:\r\n        if i not in result:\r\n            result.append(i)\r\n    return result\r"
    ],
    "test_cases": [
      "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]",
      "assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]",
      "assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      151
    ],
    "generation_times": [
      0.8441572189331055
    ]
  },
  {
    "task_id": 141,
    "prompt": "Write a function to sort a list of elements using pancake sort.\ndef pancake_sort(nums):\r",
    "generated_codes": [
      "def pancake_sort(nums):\r\n    n = len(nums)\r\n    for i in range(n - 1, 0, -1):\r\n        pos = nums.index(min(nums[:i + 1]))\r\n        if pos != i:\r\n            nums[:pos + 2] = reversed(nums[:pos])\r\n            reverse(nums[pos + 4:], pos + i + 5)\r\ndef reverse(arr, start):\r\n    while start < len(arr) // 2:\r\n        arr[start], arr[len(arr) - start - 2], arr[start] = arr[len(\r\n            arr) -  start -2],arr[start],arr[len(arr)-start-2]\r\n        start += 1"
    ],
    "test_cases": [
      "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
      "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]",
      "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      459
    ],
    "generation_times": [
      1.5964980125427246
    ]
  },
  {
    "task_id": 142,
    "prompt": "Write a function to count the same pair in three given lists.\ndef count_samepair(list1,list2,list3):\r",
    "generated_codes": [
      "def count_samepair(list1,list2,list3):\r\n    list1.sort()\r\n    list2.sort()\r\nlist1=[1,2,3]\r\nlist2=[4,5,6]\r\nlist3=[7,8,9]\r\ncount=0\r\nfor i in range(len(list1)):\r\n    for j in range(i+1,len(list1)):\r\n        if list1[i]==list1[j]:\r\n            count+=1\r"
    ],
    "test_cases": [
      "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
      "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4",
      "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      249
    ],
    "generation_times": [
      0.9241609573364258
    ]
  },
  {
    "task_id": 143,
    "prompt": "Write a function to find number of lists present in the given tuple.\ndef find_lists(Input): \r",
    "generated_codes": [
      "def find_lists(Input): \r\n    return len(list(Input))"
    ],
    "test_cases": [
      "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
      "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3",
      "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      52
    ],
    "generation_times": [
      0.13234663009643555
    ]
  },
  {
    "task_id": 144,
    "prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array.\ndef sum_Pairs(arr,n): \r",
    "generated_codes": [
      "def sum_Pairs(arr,n): \r\n    sum=0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            sum+=abs(arr[i]-arr[j])\r\n    return sum"
    ],
    "test_cases": [
      "assert sum_Pairs([1,8,9,15,16],5) == 74",
      "assert sum_Pairs([1,2,3,4],4) == 10",
      "assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      142
    ],
    "generation_times": [
      0.4231116771697998
    ]
  },
  {
    "task_id": 145,
    "prompt": "Write a python function to find the maximum difference between any two elements in a given array.\ndef max_Abs_Diff(arr,n): \r",
    "generated_codes": [
      "def max_Abs_Diff(arr,n): \r\n    min_element = arr[0] \r\n    max_element = -1 * (arr[0]) \r\n    for i in range(1, n): \r\n        if arr[i] < min_element: \r\n            min_element=arr[i] \r\n        elif arr[i]>max_element: \r\r\n            max_element= arr[i]\r\n    return max_element-min_element"
    ],
    "test_cases": [
      "assert max_Abs_Diff((2,1,5,3),4) == 4",
      "assert max_Abs_Diff((9,3,2,5,1),5) == 8",
      "assert max_Abs_Diff((3,2,1),3) == 2"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      287
    ],
    "generation_times": [
      1.031437635421753
    ]
  },
  {
    "task_id": 146,
    "prompt": "Write a function to find the ascii value of total characters in a string.\ndef ascii_value_string(str1):\r",
    "generated_codes": [
      "def ascii_value_string(str1):\r\n    return sum(ord(char) for char in str1)"
    ],
    "test_cases": [
      "assert ascii_value_string(\"python\")==112",
      "assert ascii_value_string(\"Program\")==80",
      "assert ascii_value_string(\"Language\")==76"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      73
    ],
    "generation_times": [
      0.31183624267578125
    ]
  },
  {
    "task_id": 147,
    "prompt": "Write a function to find the maximum total path sum in the given triangle.\ndef max_path_sum(tri, m, n): \r",
    "generated_codes": [
      "def max_path_sum(tri, m, n): \r\n    if m == 0 or n == 1:\r\n        return tri[m][n]\r\n    left = max_path(tri,m-1,n)\r\n    right = max(0, max_path_tr(i, m-1, n-1))\r\n    return max(left, right) + tri[m-1][n]"
    ],
    "test_cases": [
      "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14",
      "assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 ",
      "assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      202
    ],
    "generation_times": [
      0.9197540283203125
    ]
  },
  {
    "task_id": 148,
    "prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.\ndef sum_digits_single(x) : \r",
    "generated_codes": [
      "def sum_digits_single(x) : \r\n    res = 0\r\n    while x > 0: \r\n        d = x % 10\r\n        res += d\r\n        x //= 1\r\n    return res\r"
    ],
    "test_cases": [
      "assert sum_digits_twoparts(35)==17",
      "assert sum_digits_twoparts(7)==7",
      "assert sum_digits_twoparts(100)==19"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      131
    ],
    "generation_times": [
      0.7951385974884033
    ]
  },
  {
    "task_id": 149,
    "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\ndef longest_subseq_with_diff_one(arr, n): \r",
    "generated_codes": [
      "def longest_subseq_with_diff_one(arr, n): \r\n    dp = [1] * n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if arr[i] - arr[j] == 1:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n    return max(dp)"
    ],
    "test_cases": [
      "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6",
      "assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3",
      "assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      220
    ],
    "generation_times": [
      0.5916233062744141
    ]
  },
  {
    "task_id": 150,
    "prompt": "Write a python function to find whether the given number is present in the infinite sequence or not.\ndef does_Contain_B(a,b,c): \r",
    "generated_codes": [
      "def does_Contain_B(a,b,c): \r\n    if a == b: \r\n        return True\r\n    elif a == c: \r\n         return True\r"
    ],
    "test_cases": [
      "assert does_Contain_B(1,7,3) == True",
      "assert does_Contain_B(1,-3,5) == False",
      "assert does_Contain_B(3,2,5) == False"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      107
    ],
    "generation_times": [
      0.4000263214111328
    ]
  },
  {
    "task_id": 151,
    "prompt": "Write a python function to check whether the given number is co-prime or not.\ndef gcd(p,q):\r",
    "generated_codes": [
      "def gcd(p,q):\r\n    if p==0:\r\n        return q\r\n    elif q==0:\r\n        return p\r\n    else:\r\n        if p%q==0 and q%p==0 :\r\n            return 1\r\n        else:\r\n            return gcd(q,p%q)\r"
    ],
    "test_cases": [
      "assert is_coprime(17,13) == True",
      "assert is_coprime(15,21) == False",
      "assert is_coprime(25,45) == False"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      191
    ],
    "generation_times": [
      1.0465753078460693
    ]
  },
  {
    "task_id": 152,
    "prompt": "Write a function to sort the given array by using merge sort.\ndef merge(a,b):\r",
    "generated_codes": [
      "def merge(a,b):\r\n    c = []\r\n    while len(a) > 0 and len(b) >0:\r\n        if a[0] < b[0]:\r\n            c.append(a.pop(0))\r\n        else:\r\n            c. append(b.pop(1))\r\n    if len(a)>0:\r\n            c.extend(a)\r\n    if b>0:\r\n                c.extend(b)\r\n    return c\r\ndef mergesort(arr):\r\n    if(len(arr) == 1):\r\n        return arr\r"
    ],
    "test_cases": [
      "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]",
      "assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]",
      "assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      334
    ],
    "generation_times": [
      1.45686936378479
    ]
  },
  {
    "task_id": 153,
    "prompt": "Write a function to find the vertex of a parabola.\ndef parabola_vertex(a, b, c): \r",
    "generated_codes": [
      "def parabola_vertex(a, b, c): \r\n    x = -b / (2 * a) \r\n    y = a * x ** 2 + b * x + c \r\n    return x, y"
    ],
    "test_cases": [
      "assert parabola_vertex(5,3,2)==(-0.3, 1.55)",
      "assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)",
      "assert parabola_vertex(2,4,6)==(-1.0, 4.0)"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      103
    ],
    "generation_times": [
      0.34143686294555664
    ]
  },
  {
    "task_id": 154,
    "prompt": "Write a function to extract every specified element from a given two dimensional list.\ndef specified_element(nums, N):\r",
    "generated_codes": [
      "def specified_element(nums, N):\r\n    return [nums[i][j] for i in range(N) for j in range(len(nums[0])) if nums[i][0] == j]\r"
    ],
    "test_cases": [
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
      "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      123
    ],
    "generation_times": [
      0.7453927993774414
    ]
  },
  {
    "task_id": 155,
    "prompt": "Write a python function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n) : \r",
    "generated_codes": [
      "def even_bit_toggle_number(n) : \r\n    res = 0\r\n    temp = n \r\n    count = 1\r\n    while (temp > 0) : \r\n        if ((count % 2) != 0): \r\n            res = res | (n & 1) \r\r\n        count = count << 1\r\nn = 34\r\neven_bit_toggle_n = even_bit_toggel_number(n)\r"
    ],
    "test_cases": [
      "assert even_bit_toggle_number(10) == 0",
      "assert even_bit_toggle_number(20) == 30",
      "assert even_bit_toggle_number(30) == 20"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      252
    ],
    "generation_times": [
      1.2434508800506592
    ]
  },
  {
    "task_id": 156,
    "prompt": "Write a function to convert a tuple of string values to a tuple of integer values.\ndef tuple_int_str(tuple_str):\r",
    "generated_codes": [
      "def tuple_int_str(tuple_str):\r\n    return tuple(int(x) for x in tuple_str)"
    ],
    "test_cases": [
      "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))",
      "assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))",
      "assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      74
    ],
    "generation_times": [
      0.13146066665649414
    ]
  },
  {
    "task_id": 157,
    "prompt": "Write a function to reflect the run-length encoding from a list.\ndef encode_list(list1):\r",
    "generated_codes": [
      "def encode_list(list1):\r\n    result = []\r\n    for i in range(len(list1)):\r\n        if i == 0:\r\n            result.append((list1[i], 1))\r\n        else:\r\n            if list1[i] == list1[-1]:\r\n                result.append(((list1[-2]), 1))\r\n                list1.pop(-2)\r\n            else:\r\n                result[-1] += (list1[0], 0)\r\n                list2 = list1[1:]\r\n        return result\r"
    ],
    "test_cases": [
      "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]",
      "assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]",
      "assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      392
    ],
    "generation_times": [
      1.2217321395874023
    ]
  },
  {
    "task_id": 158,
    "prompt": "Write a python function to find k number of operations required to make all elements equal.\ndef min_Ops(arr,n,k): \r",
    "generated_codes": [
      "def min_Ops(arr,n,k): \r\n    arr.sort() \r\n    if n%k!=0: \r\n        return -1\r\n    else: \r\n        return (n//k)*(k-1) + arr[n//k]"
    ],
    "test_cases": [
      "assert min_Ops([2,2,2,2],4,3) == 0",
      "assert min_Ops([4,2,6,8],4,3) == -1",
      "assert min_Ops([21,33,9,45,63],5,6) == 24"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      128
    ],
    "generation_times": [
      0.41645002365112305
    ]
  },
  {
    "task_id": 159,
    "prompt": "Write a function to print the season for the given month and day.\ndef month_season(month,days):\r",
    "generated_codes": [
      "def month_season(month,days):\r\n    if month == 1 or month ==3 or month==5 or month=7 or month =9 or month >12:\r\n    elif month ==2 or month >=4 or month>=6 or month>8 or month,10 or month ,12:\r\nmonth = int(input(\"enter the month number\"))\r\nday = int (input(\"enter day number\"))\r\nmonth_season(month,day)"
    ],
    "test_cases": [
      "assert month_season('January',4)==('winter')",
      "assert month_season('October',28)==('autumn')",
      "assert month_season('June',6)==('spring')"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      302
    ],
    "generation_times": [
      0.9653127193450928
    ]
  },
  {
    "task_id": 160,
    "prompt": "Write a function to find x and y that satisfies ax + by = n.\ndef solution (a, b, n): \r",
    "generated_codes": [
      "def solution (a, b, n): \r\n    if a == 0: \r\n        return [1, n] \r\n    elif b == 1: \r\n       return [n, 1] \r\n    x = solution (b, a % b, (n - b * x[0]) // a) [0]\r\n    y = solution(b, a%b, (x[1] - n * x [0])//a)[1]\r\n    return [x, y]"
    ],
    "test_cases": [
      "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)",
      "assert solution(4, 2, 7) == 'No solution'",
      "assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      232
    ],
    "generation_times": [
      0.9588656425476074
    ]
  },
  {
    "task_id": 161,
    "prompt": "Write a function to remove all elements from a given list present in another list.\ndef remove_elements(list1, list2):\r",
    "generated_codes": [
      "def remove_elements(list1, list2):\r\n    for element in list1:\r\n        if element in set(list2):\r\n            list1.remove(element)\r\n    return list1"
    ],
    "test_cases": [
      "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]",
      "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]",
      "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      149
    ],
    "generation_times": [
      0.2499833106994629
    ]
  },
  {
    "task_id": 162,
    "prompt": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\ndef sum_series(n):\r",
    "generated_codes": [
      "def sum_series(n):\r\n    if n < 0:\r\n        return 0\r\n    else:\r\n        total = 0\r\n        for i in range(n, 0, -2):\r\n            total += i\r\n        return total\r"
    ],
    "test_cases": [
      "assert sum_series(6)==12",
      "assert sum_series(10)==30",
      "assert sum_series(9)==25"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      163
    ],
    "generation_times": [
      0.7260539531707764
    ]
  },
  {
    "task_id": 163,
    "prompt": "Write a function to calculate the area of a regular polygon.\ndef area_polygon(s,l):\r",
    "generated_codes": [
      "def area_polygon(s,l):\r\n    return (s**2)/4*(1+sqrt(2))"
    ],
    "test_cases": [
      "assert area_polygon(4,20)==400.00000000000006",
      "assert area_polygon(10,15)==1731.1969896610804",
      "assert area_polygon(9,7)==302.90938549487214"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      55
    ],
    "generation_times": [
      0.15871930122375488
    ]
  },
  {
    "task_id": 164,
    "prompt": "Write a python function to check whether the sum of divisors are same or not.\ndef divSum(n): \r",
    "generated_codes": [
      "def divSum(n): \r\n    s = 0\r\n    for i in range(1, n+1): \r\n        if (n % i == 0): \r\n            s += i\r\n    return s \r"
    ],
    "test_cases": [
      "assert areEquivalent(36,57) == False",
      "assert areEquivalent(2,4) == False",
      "assert areEquivalent(23,47) == True"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      119
    ],
    "generation_times": [
      0.6361124515533447
    ]
  },
  {
    "task_id": 165,
    "prompt": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\ndef count_char_position(str1): \r",
    "generated_codes": [
      "def count_char_position(str1): \r\n    count = 0 \r\n    for char in str1: \r\n        if char.isalpha(): \r\n            if char.istitle(): \r\n                count += 1 \r\n            else: \r\n                count = count + 2 \r\n    return count \r"
    ],
    "test_cases": [
      "assert count_char_position(\"xbcefg\") == 2",
      "assert count_char_position(\"ABcED\") == 3",
      "assert count_char_position(\"AbgdeF\") == 5"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      238
    ],
    "generation_times": [
      1.347029685974121
    ]
  },
  {
    "task_id": 166,
    "prompt": "Write a python function to count the pairs with xor as an even number.\ndef find_even_Pair(A,N): \r",
    "generated_codes": [
      "def find_even_Pair(A,N): \r\n    count = 0\r\n    for i in range(N):\r\n        for j in range(i+1,N):\r\n            if ((A[i] ^ A[j]) % 2 == 0):\r\n                count += 1\r\n    return count"
    ],
    "test_cases": [
      "assert find_even_Pair([5,4,7,2,1],5) == 4",
      "assert find_even_Pair([7,2,8,1,0,5,11],7) == 9",
      "assert find_even_Pair([1,2,3],3) == 1"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      184
    ],
    "generation_times": [
      0.53359055519104
    ]
  },
  {
    "task_id": 167,
    "prompt": "Write a python function to find smallest power of 2 greater than or equal to n.\ndef next_Power_Of_2(n): \r",
    "generated_codes": [
      "def next_Power_Of_2(n): \r\n    if n == 0: \r\n        return 1\r"
    ],
    "test_cases": [
      "assert next_Power_Of_2(0) == 1",
      "assert next_Power_Of_2(5) == 8",
      "assert next_Power_Of_2(17) == 32"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      60
    ],
    "generation_times": [
      0.5207772254943848
    ]
  },
  {
    "task_id": 168,
    "prompt": "Write a python function to find the frequency of a number in a given array.\ndef frequency(a,x): \r",
    "generated_codes": [
      "def frequency(a,x): \r\n    count = 0\r\n    for i in range(len(a)): \r\n        if a[i] == x: \r\n            count += 1\r\n    return count\r"
    ],
    "test_cases": [
      "assert frequency([1,2,3],4) == 0",
      "assert frequency([1,2,2,3,3,3,4],3) == 3",
      "assert frequency([0,1,2,3,1,2],1) == 2"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      132
    ],
    "generation_times": [
      0.6868164539337158
    ]
  },
  {
    "task_id": 169,
    "prompt": "Write a function to calculate the nth pell number.\ndef get_pell(n): \r",
    "generated_codes": [
      "def get_pell(n): \r\n    if n == 0: \r\n        return 0\r\n    elif n ==1: \r\n         return 1\r\n    else: \r\n       return get_pel(n-1) + 2*get_pel (n-2)\r"
    ],
    "test_cases": [
      "assert get_pell(4) == 12",
      "assert get_pell(7) == 169",
      "assert get_pell(8) == 408"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      148
    ],
    "generation_times": [
      0.5620286464691162
    ]
  },
  {
    "task_id": 170,
    "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range.\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \r",
    "generated_codes": [
      "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum = 0\r\n    for i in range(m, n+1):\r\n        sum += list1[i]\r\n    return sum"
    ],
    "test_cases": [
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29",
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16",
      "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      307
    ],
    "generation_times": [
      0.27036094665527344
    ]
  },
  {
    "task_id": 171,
    "prompt": "Write a function to find the perimeter of a pentagon.\ndef perimeter_pentagon(a):\r",
    "generated_codes": [
      "def perimeter_pentagon(a):\r\n    return 5 * a"
    ],
    "test_cases": [
      "assert perimeter_pentagon(5)==25",
      "assert perimeter_pentagon(10)==50",
      "assert perimeter_pentagon(15)==75"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      44
    ],
    "generation_times": [
      0.6662404537200928
    ]
  },
  {
    "task_id": 172,
    "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\ndef count_occurance(s):\r",
    "generated_codes": [
      "def count_occurance(s):\r\n    count = 0\r\n    for i in s:\r\n        if i == \"std\":\r\n            count += 1\r\n    return count\r"
    ],
    "test_cases": [
      "assert count_occurance(\"letstdlenstdporstd\") == 3",
      "assert count_occurance(\"truststdsolensporsd\") == 1",
      "assert count_occurance(\"makestdsostdworthit\") == 2"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      122
    ],
    "generation_times": [
      0.38439345359802246
    ]
  },
  {
    "task_id": 173,
    "prompt": "Write a function to remove everything except alphanumeric characters from a string.\ndef remove_splchar(text): \r",
    "generated_codes": [
      "def remove_splchar(text): \r\n    return re.sub('[^a-zA-Z0-9]', '', text)"
    ],
    "test_cases": [
      "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')",
      "assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')",
      "assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      71
    ],
    "generation_times": [
      0.16918468475341797
    ]
  },
  {
    "task_id": 174,
    "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.\ndef group_keyvalue(l):\r",
    "generated_codes": [
      "def group_keyvalue(l):\r\n    d = {}\r\n    for i in l:\r\n        if i[0] not in d:\r\n            d[i[0]] = [i]\r\n        else:\r\n            if i not in list(d[i[1]]):\r\n                d[i] = [d[i[2]] + [i]]\r\n            else:\r\n                d = {i[0]: [d.get(i[0], []) + [d, i]]}\r\n    return d"
    ],
    "test_cases": [
      "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}",
      "assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}",
      "assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      289
    ],
    "generation_times": [
      0.8547112941741943
    ]
  },
  {
    "task_id": 175,
    "prompt": "Write a function to verify validity of a string of parentheses.\ndef is_valid_parenthese( str1):\r",
    "generated_codes": [
      "def is_valid_parenthese( str1):\r\n    stack = []\r\n    for i in range(len(str1)):\r\n        if str1[i] == '(':\r\n            stack.append(')')\r\n        elif str1 [i] == ')':\r\n            if len(stack) > 0 and stack[-1] == '(':\r\n                stack.pop()\r\n            else:\r\n                return False\r\n    if len (stack) == 0:\r\n        return True\r"
    ],
    "test_cases": [
      "assert is_valid_parenthese(\"(){}[]\")==True",
      "assert is_valid_parenthese(\"()[{)}\")==False",
      "assert is_valid_parenthese(\"()\")==True"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      348
    ],
    "generation_times": [
      0.9398860931396484
    ]
  },
  {
    "task_id": 176,
    "prompt": "Write a function to find the perimeter of a triangle.\ndef perimeter_triangle(a,b,c):\r",
    "generated_codes": [
      "def perimeter_triangle(a,b,c):\r\n    return a+b+c"
    ],
    "test_cases": [
      "assert perimeter_triangle(10,20,30)==60",
      "assert perimeter_triangle(3,4,5)==12",
      "assert perimeter_triangle(25,35,45)==105"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      48
    ],
    "generation_times": [
      0.06688475608825684
    ]
  },
  {
    "task_id": 177,
    "prompt": "Write a python function to find two distinct numbers such that their lcm lies within the given range.\ndef answer(L,R): \r",
    "generated_codes": [
      "def answer(L,R): \r\n    for i in range(1, L): \r\n        for j in range(i+1, R): \r\n            if (i*j) % L == 0 and (i * j) % R == 1: \r\n                return [i, j] \r\n    return [-1, -1]"
    ],
    "test_cases": [
      "assert answer(3,8) == (3,6)",
      "assert answer(2,6) == (2,4)",
      "assert answer(1,3) == (1,2)"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      186
    ],
    "generation_times": [
      0.6225569248199463
    ]
  },
  {
    "task_id": 178,
    "prompt": "Write a function to search some literals strings in a string.\ndef string_literals(patterns,text):\r",
    "generated_codes": [
      "def string_literals(patterns,text):\r\n    for pattern in patterns:\r\n        if re.search(pattern,text):\r\n            return True\r\n        else:\r\n            return False\r"
    ],
    "test_cases": [
      "assert string_literals(['language'],'python language')==('Matched!')",
      "assert string_literals(['program'],'python language')==('Not Matched!')",
      "assert string_literals(['python'],'programming language')==('Not Matched!')"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      169
    ],
    "generation_times": [
      0.36571836471557617
    ]
  },
  {
    "task_id": 179,
    "prompt": "Write a function to find if the given number is a keith number or not.\ndef is_num_keith(x): \r",
    "generated_codes": [
      "def is_num_keith(x): \r\n    return True"
    ],
    "test_cases": [
      "assert is_num_keith(14) == True",
      "assert is_num_keith(12) == False",
      "assert is_num_keith(197) == True"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      38
    ],
    "generation_times": [
      0.12825965881347656
    ]
  },
  {
    "task_id": 180,
    "prompt": "Write a function to calculate distance between two points using latitude and longitude.\ndef distance_lat_long(slat,slon,elat,elon):\r",
    "generated_codes": [
      "def distance_lat_long(slat,slon,elat,elon):\r\n    \"\"\"Calculate the distance between 2 points on Earth given their latitudes and longitudes in degrees.\r\n    The formula used is:\r\n        d = 6371 * acos(sin(slat*PI/180) * sin(elat*PI / 18) + cos(slat * PI /  1 80)*cos(elat * PI/ 1\r\n    8))\r\n     Parameters:\r\n     slat (float): Latitude of the first point in degrees.\r\n      slon (float) : Longitude of the second point in radians.\r\n     elat ( float) : Latitude of second point.\r\n      elon ( float): Longitude of second poin in radians.\r\n     Returns:\r\n     float: Distance between the two points in kilometers.\r\n    \"\"\"\r\n    slat_rad = slat * (PI /18)\r\n    elat_rad= elat * ((PI /360))\r\n    slon_rad = (slon * (2 * PI)) / 36\r\n    elon_rad= (elon * ( 2 *PI)) /3 60\r\n    d =6356.7549 * acos(\r\n            sin(slat_rad) *sin(elat_rad) +cos(slat_rad)*cos( elat_rad) *cos(slon_rad-elon_rad))\r\n    return d"
    ],
    "test_cases": [
      "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429",
      "assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514",
      "assert distance_lat_long(10,20,30,40)==6783.751974994595"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      902
    ],
    "generation_times": [
      2.929661512374878
    ]
  },
  {
    "task_id": 181,
    "prompt": "Write a function to find the longest common prefix in the given set of strings.\ndef common_prefix_util(str1, str2): \r",
    "generated_codes": [
      "def common_prefix_util(str1, str2): \r\n    i = 0\r\n    while i < len(str1) and i <len(str2) and str1[i] == str2[i]: \r\n        i += 1\r\n    return str1[:i]\r\ndef longest_common_prefix(strs): \r\n    if not strs: \r\n        return \"\"\r\n    if len(strs) == 1: \r\n         return strs[0]\r\n    for i in range(len(strs[0])): \r\n    \tstr1 = strs[1]\r\n    \tstr2 = strs[-1]\r\n        result = common_prefix_str(str1,str2)\r\n        if result:\r\n            return result\r\n        else:\r\n            strs.pop()\r\n    return strs[-2]\r"
    ],
    "test_cases": [
      "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'",
      "assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'",
      "assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      508
    ],
    "generation_times": [
      1.4820806980133057
    ]
  },
  {
    "task_id": 182,
    "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex.\ndef find_character(string):\r",
    "generated_codes": [
      "def find_character(string):\r\n    pattern = r\"[A-Z]\"\r\n    result = re.findall(pattern, string)\r\npattern = r\"[\\w]\"\r\nresult = re.search(pattern, \"Hello World\")\r"
    ],
    "test_cases": [
      "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])",
      "assert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])",
      "assert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      157
    ],
    "generation_times": [
      0.5265474319458008
    ]
  },
  {
    "task_id": 183,
    "prompt": "Write a function to count all the distinct pairs having a difference of k in any array.\ndef count_pairs(arr, n, k):\r",
    "generated_codes": [
      "def count_pairs(arr, n, k):\r\n    arr.sort()\r\n    count = 0\r\n    for i in range(n):\r\n        j = i + 1\r\n        while j < n:\r\n            if abs(arr[i] - arr[j]) == k:\r\n                count += 1\r\n                j += 2\r\n            else:\r\n                break\r\n    return count\r"
    ],
    "test_cases": [
      "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2",
      "assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5",
      "assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      279
    ],
    "generation_times": [
      1.1429173946380615
    ]
  },
  {
    "task_id": 184,
    "prompt": "Write a function to find all the values in a list that are greater than a specified number.\ndef greater_specificnum(list,num):\r",
    "generated_codes": [
      "def greater_specificnum(list,num):\r\n    result = []\r\n    for i in range(len(list)):\r\n        if list[i] > num:\r\n            result.append(list[i])\r\n    return result"
    ],
    "test_cases": [
      "assert greater_specificnum([220, 330, 500],200)==True",
      "assert greater_specificnum([12, 17, 21],20)==False",
      "assert greater_specificnum([1,2,3,4],10)==False"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      165
    ],
    "generation_times": [
      0.28838467597961426
    ]
  },
  {
    "task_id": 185,
    "prompt": "Write a function to find the focus of a parabola.\ndef parabola_focus(a, b, c): \r",
    "generated_codes": [
      "def parabola_focus(a, b, c): \r\n    x = -b / (2 * a) \r\n    y = c - (x ** 2) / (4 * a)\r\n    return x, y"
    ],
    "test_cases": [
      "assert parabola_focus(5,3,2)==(-0.3, 1.6)",
      "assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)",
      "assert parabola_focus(2,4,6)==(-1.0, 4.125)"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      101
    ],
    "generation_times": [
      0.43840837478637695
    ]
  },
  {
    "task_id": 186,
    "prompt": "Write a function to search some literals strings in a string by using regex.\ndef check_literals(text, patterns):\r",
    "generated_codes": [
      "def check_literals(text, patterns):\r\n    for pattern in patterns:\r\n        if re.search(pattern, text):\r\n            return True\r\n    return False\r"
    ],
    "test_cases": [
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'",
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'",
      "assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      147
    ],
    "generation_times": [
      0.691364049911499
    ]
  },
  {
    "task_id": 187,
    "prompt": "Write a function to find the longest common subsequence for the given two sequences.\ndef longest_common_subsequence(X, Y, m, n): \r",
    "generated_codes": [
      "def longest_common_subsequence(X, Y, m, n): \r\n    L = [[0 for x in range(n+1)] for x \r\n         in range(m+1)]\r\n    for i in range(1, m+1):\r\n        for j in range (1, n+1):\r\n            if X[i-1] == Y[j-1]:\r\n                L[i][j] = L[i- 1][j- \r1] + 1\r\n            else:\r\n                L [i][j]= max(L[i- \r\n                1] [j], L[i] [ j-  1])\r\n    return L[m][n]\r"
    ],
    "test_cases": [
      "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4",
      "assert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3",
      "assert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      370
    ],
    "generation_times": [
      1.7582001686096191
    ]
  },
  {
    "task_id": 188,
    "prompt": "Write a python function to check whether the given number can be represented by product of two squares or not.\ndef prod_Square(n):\r",
    "generated_codes": [
      "def prod_Square(n):\r\n    if n < 0:\r\n        return False\r\n    for i in range(1, int(n**0.5) + 1):\r\n        if n % (i*i) == 0:\r\n            return True\r\n    return False"
    ],
    "test_cases": [
      "assert prod_Square(25) == False",
      "assert prod_Square(30) == False",
      "assert prod_Square(16) == True"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      168
    ],
    "generation_times": [
      0.4947359561920166
    ]
  },
  {
    "task_id": 189,
    "prompt": "Write a python function to find the first missing positive number.\ndef first_Missing_Positive(arr,n): \r",
    "generated_codes": [
      "def first_Missing_Positive(arr,n): \r\n    for i in range(n):\r\n        if arr[i] <= n and arr[arr[i]-1] != arr[i]:\r\n            arr[arr[\r\n                i]-1],arr[i]=arr[i],arr[arr[i] - 1]\r\n    for j in range(0,n):\r\n    return n+1"
    ],
    "test_cases": [
      "assert first_Missing_Positive([1,2,3,-1,5],5) == 4",
      "assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2",
      "assert first_Missing_Positive([0,1,2,5,-8],5) == 3"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      229
    ],
    "generation_times": [
      0.7332971096038818
    ]
  },
  {
    "task_id": 190,
    "prompt": "Write a python function to count the number of integral co-ordinates that lie inside a square.\ndef count_Intgral_Points(x1,y1,x2,y2): \r",
    "generated_codes": [
      "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return 0"
    ],
    "test_cases": [
      "assert count_Intgral_Points(1,1,4,4) == 4",
      "assert count_Intgral_Points(1,2,1,2) == 1",
      "assert count_Intgral_Points(4,2,6,4) == 1"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      53
    ],
    "generation_times": [
      0.1127011775970459
    ]
  },
  {
    "task_id": 191,
    "prompt": "Write a function to check whether the given month name contains 30 days or not.\ndef check_monthnumber(monthname3):\r",
    "generated_codes": [
      "def check_monthnumber(monthname3):\r\n    if monthname3 == \"January\" or monthname2 == \"February\" or\r\n    monthname4 == \"March\" or  monthname5 == \"April\" or \r\n    monthnamen6 == \"May\" or   monthnamel7 == \"June\" or\r\n     monthnameln8 == \"July\" or    monthnalm9 == \"August\" or  \r\n     monthnamm10 == \"September\" or     monthname11 == \"October\" or   \r\n     monthnames12 ==  \"November\" or      monthname_13 == \r\n        \"December\":\r\n        return True\r\n    else:\r\n        return False"
    ],
    "test_cases": [
      "assert check_monthnumber(\"February\")==False",
      "assert check_monthnumber(\"June\")==True",
      "assert check_monthnumber(\"April\")==True"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      478
    ],
    "generation_times": [
      1.3019790649414062
    ]
  },
  {
    "task_id": 192,
    "prompt": "Write a python function to check whether a string has atleast one letter and one number.\ndef check_String(str): \r",
    "generated_codes": [
      "def check_String(str): \r\n    if (str.isalpha() or str.isdigit()): \r\n        return True\r"
    ],
    "test_cases": [
      "assert check_String('thishasboth29') == True",
      "assert check_String('python') == False",
      "assert check_String ('string') == False"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      88
    ],
    "generation_times": [
      0.6685595512390137
    ]
  },
  {
    "task_id": 193,
    "prompt": "Write a function to remove the duplicates from the given tuple.\ndef remove_tuple(test_tup):\r",
    "generated_codes": [
      "def remove_tuple(test_tup):\r\n    return list(set(test_tups))"
    ],
    "test_cases": [
      "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)",
      "assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)",
      "assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      60
    ],
    "generation_times": [
      0.09467625617980957
    ]
  },
  {
    "task_id": 194,
    "prompt": "Write a python function to convert octal number to decimal number.\ndef octal_To_Decimal(n):  \r",
    "generated_codes": [
      "def octal_To_Decimal(n):  \r\n    return int(n,8)  \r"
    ],
    "test_cases": [
      "assert octal_To_Decimal(25) == 21",
      "assert octal_To_Decimal(30) == 24",
      "assert octal_To_Decimal(40) == 32"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      50
    ],
    "generation_times": [
      0.19833159446716309
    ]
  },
  {
    "task_id": 195,
    "prompt": "Write a python function to find the first position of an element in a sorted array.\ndef first(arr,x,n): \r",
    "generated_codes": [
      "def first(arr,x,n): \r\n    low=0\r\n    high=n-1\r\n    while(low<=high): \r\n        mid=(low+high)//2\r\n        if arr[mid]==x: \r\n            return mid \r\n        elif arr[mid]<x: \r\r\n            low=mid+1\r\n        else: \r\n             high=mid-1 \r\n    return -1\r"
    ],
    "test_cases": [
      "assert first([1,2,3,4,5,6,6],6,6) == 5",
      "assert first([1,2,2,2,3,2,2,4,2],2,9) == 1",
      "assert first([1,2,3],1,3) == 0"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      256
    ],
    "generation_times": [
      1.0648601055145264
    ]
  },
  {
    "task_id": 196,
    "prompt": "Write a function to remove all the tuples with length k.\ndef remove_tuples(test_list, K):\r",
    "generated_codes": [
      "def remove_tuples(test_list, K):\r\n    result = []\r\n    for i in range(len(test_list)):\r\n        if len(test_list[i]) == K:\r\n            continue\r\n        else:\r\n            result.append(test_list)\r\n    return result"
    ],
    "test_cases": [
      "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]",
      "assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]",
      "assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      216
    ],
    "generation_times": [
      0.388338565826416
    ]
  },
  {
    "task_id": 197,
    "prompt": "Write a function to perform the exponentiation of the given two tuples.\ndef find_exponentio(test_tup1, test_tup2):\r",
    "generated_codes": [
      "def find_exponentio(test_tup1, test_tup2):\r\n    result = tuple(map(lambda x: x**2, test_tuple1))\r\n    return result\n---\nYou can use `map` and `lambda` functions to achieve this. Here's an example:\r\n```python\r\ndef find_exp(tup1):\r\n    return tuple(map(pow, tup1, tup2))\r"
    ],
    "test_cases": [
      "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)",
      "assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)",
      "assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      269
    ],
    "generation_times": [
      1.7933251857757568
    ]
  },
  {
    "task_id": 198,
    "prompt": "Write a function to find the largest triangle that can be inscribed in an ellipse.\ndef largest_triangle(a,b): \r",
    "generated_codes": [
      "def largest_triangle(a,b): \r\n    max_x = a / (2 * b)\r\n    max_y = b / (a * sqrt(3))\r\n    area = max_x * max_y\r\n    return area"
    ],
    "test_cases": [
      "assert largest_triangle(4,2)==10.392304845413264",
      "assert largest_triangle(5,7)==4.639421805988064",
      "assert largest_triangle(9,1)==105.2220865598093"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      126
    ],
    "generation_times": [
      0.5559554100036621
    ]
  },
  {
    "task_id": 199,
    "prompt": "Write a python function to find highest power of 2 less than or equal to given number.\ndef highest_Power_of_2(n): \r",
    "generated_codes": [
      "def highest_Power_of_2(n): \r\n    res = 1\r\n    while (res <= n): \r\n        res = res * 2\r\n    return res"
    ],
    "test_cases": [
      "assert highest_Power_of_2(10) == 8",
      "assert highest_Power_of_2(19) == 16",
      "assert highest_Power_of_2(32) == 32"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      103
    ],
    "generation_times": [
      0.4821145534515381
    ]
  },
  {
    "task_id": 200,
    "prompt": "Write a function to find all index positions of the maximum values in a given list.\ndef position_max(list1):\r",
    "generated_codes": [
      "def position_max(list1):\r\n    max_value = max(list1)\r\n    max_index = list1.index(max_value)\r"
    ],
    "test_cases": [
      "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]",
      "assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]",
      "assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      93
    ],
    "generation_times": [
      0.39279699325561523
    ]
  },
  {
    "task_id": 201,
    "prompt": "Write a python function to check whether the elements in a list are same or not.\ndef chkList(lst): \r",
    "generated_codes": [
      "def chkList(lst): \r\n    if lst == lst: \r\n    else: \r\nlst = [1,2,3,4,5] \r\nchkList(lst)"
    ],
    "test_cases": [
      "assert chkList(['one','one','one']) == True",
      "assert chkList(['one','Two','Three']) == False",
      "assert chkList(['bigdata','python','Django']) == False"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      85
    ],
    "generation_times": [
      0.464724063873291
    ]
  },
  {
    "task_id": 202,
    "prompt": "Write a function to remove even characters in a string.\ndef remove_even(str1):\r",
    "generated_codes": [
      "def remove_even(str1):\r\n    return str1[::2]\r"
    ],
    "test_cases": [
      "assert remove_even(\"python\")==(\"pto\")",
      "assert remove_even(\"program\")==(\"porm\")",
      "assert remove_even(\"language\")==(\"lnug\")"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      45
    ],
    "generation_times": [
      0.15821146965026855
    ]
  },
  {
    "task_id": 203,
    "prompt": "Write a python function to find the hamming distance between given two integers.\ndef hamming_Distance(n1,n2) : \r",
    "generated_codes": [
      "def hamming_Distance(n1,n2) : \r\n    return bin(n1).count('1') + bin(n2).count(\"1\") - 2\r"
    ],
    "test_cases": [
      "assert hamming_Distance(4,8) == 2",
      "assert hamming_Distance(2,4) == 2",
      "assert hamming_Distance(1,2) == 2"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      87
    ],
    "generation_times": [
      0.9740989208221436
    ]
  },
  {
    "task_id": 204,
    "prompt": "Write a python function to count the occurrence of a given character in a string.\ndef count(s,c) : \r",
    "generated_codes": [
      "def count(s,c) : \r\n    return s.count(c) \r"
    ],
    "test_cases": [
      "assert count(\"abcc\",\"c\") == 2",
      "assert count(\"ababca\",\"a\") == 3",
      "assert count(\"mnmm0pm\",\"m\") == 4"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      42
    ],
    "generation_times": [
      0.18722248077392578
    ]
  },
  {
    "task_id": 205,
    "prompt": "Write a function to find the inversions of tuple elements in the given tuple list.\ndef inversion_elements(test_tup):\r",
    "generated_codes": [
      "def inversion_elements(test_tup):\r\n    count = 0\r\n    for i in range(len(test_t_up)):\r\n        for j in range(i+1, len(test_tupp)):\r\n            if test_tupp[i] > test_tup[j]:\r\n                count += 1\r\n    return count"
    ],
    "test_cases": [
      "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)",
      "assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)",
      "assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      221
    ],
    "generation_times": [
      0.5061149597167969
    ]
  },
  {
    "task_id": 206,
    "prompt": "Write a function to perform the adjacent element concatenation in the given tuples.\ndef concatenate_elements(test_tup):\r",
    "generated_codes": [
      "def concatenate_elements(test_tup):\r\n    result = []\r\n    for i in range(len(test_tups)):\r\n        for j in range(i + 1, len(test_tuples)):\r\n            result.append(test_tuples[i][j])\r\n    return result\r"
    ],
    "test_cases": [
      "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')",
      "assert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')",
      "assert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      205
    ],
    "generation_times": [
      0.9231700897216797
    ]
  },
  {
    "task_id": 207,
    "prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.\ndef find_longest_repeating_subseq(str): \r",
    "generated_codes": [
      "def find_longest_repeating_subseq(str): \r\n    max_len = 0\r\n    longest_subseq = []\r\n\tfor i in range(1, len(str) + 1):\r\n\t\tcurrent_subseq_dict = {}\r\n\t\t\"\"\" \r\n\t\tTraverse through all substrings of length i and check if they are \r\n\t\trepeated or not. If repeated then update the longest_sub_seq and \r\n\t\tmax_len accordingly.\r\n\t\t\"\"\"\r\n\t\tfor j in range(i):\r\n\t\t\tsubseq = str[j:j+i]\r\n\t\t\tif subseq in current_subseq:\r\n\t\t\t\tcurrent_sub_seq_dict[subseq] += 1\r\n\t\t\telse:\r\n\t\t\t\tcurrent_subs_seq_dict = {subseq: 1}\r\n\t\t\t\tcurrent_max_len = max(current_max_len, len(subseq))\r\n\t\t\t\tlongest_subseq.append(subseq)\r\n\treturn (longest_subsequence, max_len)"
    ],
    "test_cases": [
      "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3",
      "assert find_longest_repeating_subseq(\"aabb\") == 2",
      "assert find_longest_repeating_subseq(\"aab\") == 1"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      624
    ],
    "generation_times": [
      2.065788745880127
    ]
  },
  {
    "task_id": 208,
    "prompt": "Write a function to check the given decimal with a precision of 2 by using regex.\ndef is_decimal(num):\r",
    "generated_codes": [
      "def is_decimal(num):\r\n    pass\r"
    ],
    "test_cases": [
      "assert is_decimal('123.11') == True",
      "assert is_decimal('0.21') == True",
      "assert is_decimal('123.1214') == False"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      31
    ],
    "generation_times": [
      0.3674483299255371
    ]
  },
  {
    "task_id": 209,
    "prompt": "Write a function to delete the smallest element from the given heap and then insert a new item.\ndef heap_replace(heap,a):\r",
    "generated_codes": [
      "def heap_replace(heap,a):\r\n    heap[a] = heap[0]\r\n    heap[heap[0]] = None\r\n    heapify(heap, a)\r\ndef heapify(h, i):\r\n    l = 2 * i + 1\r\n    r =  2*i + 2\r\n    if l < len(h) and h[l] < h[i]:\r\n        largest = l\r\n    else:\r\n        largest=i\r\n    if r < len(heap) and heap[r] < heap[largest]:\r\n        largest=r\r\n    elif largest == i:\r\n        return\r\n    temp = h[i]\r\n    h[i] = h[largest]\r\n    h[large] = None\r\ndef heap_sort(h):\r\n    for i in range(len(h)//2-1,-1,- 1):\r\n        heapify( h,i)\r\n    for j in range (len(h)-1,0,-1):\r\n         temp =h[j]\r\n         h[j] =h[0]\r\n         h[0]=temp\r\n         heapify (h,0)\r\n    return h\r"
    ],
    "test_cases": [
      "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]",
      "assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]",
      "assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      632
    ],
    "generation_times": [
      3.692502498626709
    ]
  },
  {
    "task_id": 210,
    "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\ndef is_allowed_specific_char(string):\r",
    "generated_codes": [
      "def is_allowed_specific_char(string):\r\n    return True"
    ],
    "test_cases": [
      "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True",
      "assert is_allowed_specific_char(\"*&%@#!}{\") == False",
      "assert is_allowed_specific_char(\"HELLOhowareyou98765\") == True"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      54
    ],
    "generation_times": [
      0.10786008834838867
    ]
  },
  {
    "task_id": 211,
    "prompt": "Write a python function to count numbers whose oth and nth bits are set.\ndef count_Num(n): \r",
    "generated_codes": [
      "def count_Num(n): \r\n    count = 0\r\n    for i in range(1, n + 1):\r\n        if (i & 1) == 1:\r\n            if (count & (1 << (i - 1))) == 0:\r\n                count += 1\r\n    return count\r"
    ],
    "test_cases": [
      "assert count_Num(2) == 1",
      "assert count_Num(3) == 2",
      "assert count_Num(1) == 1"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      184
    ],
    "generation_times": [
      1.6122949123382568
    ]
  },
  {
    "task_id": 212,
    "prompt": "Write a python function to find the sum of fourth power of n natural numbers.\ndef fourth_Power_Sum(n): \r",
    "generated_codes": [
      "def fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1, n + 1):\r\n        sum += i ** 4\r\n    return sum\r"
    ],
    "test_cases": [
      "assert fourth_Power_Sum(2) == 17",
      "assert fourth_Power_Sum(4) == 354",
      "assert fourth_Power_Sum(6) == 2275"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      109
    ],
    "generation_times": [
      0.7569184303283691
    ]
  },
  {
    "task_id": 213,
    "prompt": "Write a function to perform the concatenation of two string tuples.\ndef concatenate_strings(test_tup1, test_tup2):\r",
    "generated_codes": [
      "def concatenate_strings(test_tup1, test_tup2):\r\n    return tuple([test_tup[0] + test_tups[1] for test_tuples in (test_tups for test_tuple in (tuple(test_tups) for test_tuples in (tuples for tuples in (str(test_tuples) for tuples if test_tuple == test_tuptuple)) for testtuples in test_tutuples for testtuple in test_tuple for test tuples in test_tuples for test tuple in test tuples for test in test tuple for test tuples in test tuptuples for tuple in tuple test tuples if tuple == test tuple if tuple in tuples if tuples in tuples for tuples tuples in tuple tuples if tutes in tuples tuples if tupes in tuples]) for test tups in test tupes for testuples in tuples testuples for tutes tuples in tutes if tuples tuples for tute tuples in tupes if tuples if tupe tuples in tupe if tuples for tupes tuples in turpe if tute in tuples in teute tuples if teute in teutes if teutes in teuttes if teutte in teuts if teuts in teuets if teuete in teues if teues in teus if teus in teuse if teuse in teuses if teuses in teuset if teuset in teuste if teuste in teustes if teustet in teuest if teuest in teuet if teuet in teue if teue in teuf if teuf in teufs if teufs in teufe if teufe in teutf if teutf in teuff if teuff in teuffs if teuffs in teuft if teuft in teupe if teupe in teupf if teupfe in teups if teups in teusp if teusp in teusu if teusu in teuss if teuss in teusta if teusta in teuta if teuta in teutas if teutas in teuter if teuter in teuths if teuthes in teuhf if tehuf in tehues if tehues in tehuf if tehufs in tehufe if tehufe in tehuff if tehuff in tehuffs if tehuffs in tehuft if tehuft in tehupe if tehupe in tehupf in tehups if tehups in tehusp if tehusp in tehuse if tehuse in tehuss if tehuss in tehusta if tehusta in tehuta if tehuta in tehutes if tehutes in tehute if tehute in tehuttes"
    ],
    "test_cases": [
      "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')",
      "assert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')",
      "assert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      1801
    ],
    "generation_times": [
      4.8298773765563965
    ]
  },
  {
    "task_id": 214,
    "prompt": "Write a function to convert radians to degrees.\ndef degree_radian(radian):\r",
    "generated_codes": [
      "def degree_radian(radian):\r\n    return radian * 180 / 3.14159265358979323846"
    ],
    "test_cases": [
      "assert degree_radian(90)==5156.620156177409",
      "assert degree_radian(60)==3437.746770784939",
      "assert degree_radian(120)==6875.493541569878"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      76
    ],
    "generation_times": [
      0.3410911560058594
    ]
  },
  {
    "task_id": 215,
    "prompt": "Write a function to decode a run-length encoded given list.\ndef decode_list(alist):\r",
    "generated_codes": [
      "def decode_list(alist):\r\n    pass\nalist = [3, 1, 2, 4]\r\ndecoded_list = decode_list([3,1,2,4])\r"
    ],
    "test_cases": [
      "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]",
      "assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']",
      "assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      94
    ],
    "generation_times": [
      0.4402017593383789
    ]
  },
  {
    "task_id": 216,
    "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset_list(list1, list2): \r",
    "generated_codes": [
      "def check_subset_list(list1, list2): \r\n    if len(list1) <= len(list2): \r\n        return False \r\n    else: \r\n        for i in range(len(list1)): \r\n            if list1[i] not in list2: \r\n                return False\r\n        return True"
    ],
    "test_cases": [
      "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False",
      "assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True",
      "assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      236
    ],
    "generation_times": [
      0.9493470191955566
    ]
  },
  {
    "task_id": 217,
    "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_Repeated_Char(str): \r",
    "generated_codes": [
      "def first_Repeated_Char(str): \r\n    char_freq = {}\r\n    for char in str: \r\n        if char in char_freq: \r\n            return char \r\n        else: \r\n             char_freq[char] = 1 \r\n    return None"
    ],
    "test_cases": [
      "assert first_Repeated_Char(\"Google\") == \"o\"",
      "assert first_Repeated_Char(\"data\") == \"a\"",
      "assert first_Repeated_Char(\"python\") == '\\0'"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      199
    ],
    "generation_times": [
      1.0798981189727783
    ]
  },
  {
    "task_id": 218,
    "prompt": "Write a python function to find the minimum operations required to make two numbers equal.\ndef min_Operations(A,B):  \r",
    "generated_codes": [
      "def min_Operations(A,B):  \r\n    if A > B:\r\n        return min_Opeartions(B,A)\r\n    else:\r\n        return 0"
    ],
    "test_cases": [
      "assert min_Operations(2,4) == 1",
      "assert min_Operations(4,10) == 4",
      "assert min_Operations(1,4) == 3"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      106
    ],
    "generation_times": [
      0.3098278045654297
    ]
  },
  {
    "task_id": 219,
    "prompt": "Write a function to extract maximum and minimum k elements in the given tuple.\ndef extract_min_max(test_tup, K):\r",
    "generated_codes": [
      "def extract_min_max(test_tup, K):\r\n    min_val = float('inf')\r\n    max_val = -float('inf')\r\n    for i in range(K):\r\n        min_val, max_val, test_tup = find_min_max_element(test_t_up, min_val,max_val)\r\n    return min_val ,max_val"
    ],
    "test_cases": [
      "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)",
      "assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)",
      "assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      230
    ],
    "generation_times": [
      0.5745103359222412
    ]
  },
  {
    "task_id": 220,
    "prompt": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\ndef replace_max_specialchar(text,n):\r",
    "generated_codes": [
      "def replace_max_specialchar(text,n):\r\n    max_occurence = 0\r\n    for i in range(len(text)):\r\n        if text[i] == ',' or text[i]== '.' or text [i] == ' ':\r\n            if text.count(text[i]) > max_occurences:\r\n                max_occurrence = text.count (text[i])\r\n                text = text.replace(text[i],':')\r\n    return text"
    ],
    "test_cases": [
      "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')",
      "assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')",
      "assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      331
    ],
    "generation_times": [
      0.7852616310119629
    ]
  },
  {
    "task_id": 221,
    "prompt": "Write a python function to find the first even number in a given list of numbers.\ndef first_even(nums):\r",
    "generated_codes": [
      "def first_even(nums):\r\n    for num in nums:\r\n        if num % 2 == 0:\r\n            return num\r\n    return None"
    ],
    "test_cases": [
      "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4",
      "assert first_even([2, 3, 4]) == 2",
      "assert first_even([5, 6, 7]) == 6"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      110
    ],
    "generation_times": [
      0.23541831970214844
    ]
  },
  {
    "task_id": 222,
    "prompt": "Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\r",
    "generated_codes": [
      "def check_type(test_tuple):\r\n    for i in test_tuple:\r\n        if type(i) != type(1):\r\n            return False\r\n    return True\r"
    ],
    "test_cases": [
      "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
      "assert check_type((1, 2, \"4\") ) == False",
      "assert check_type((3, 2, 1, 4, 5) ) == True"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      129
    ],
    "generation_times": [
      0.4252943992614746
    ]
  },
  {
    "task_id": 223,
    "prompt": "Write a function to check for majority element in the given sorted array.\ndef is_majority(arr, n, x):\r",
    "generated_codes": [
      "def is_majority(arr, n, x):\r\n    count = 0\r\n    for i in range(n):\r\n        if arr[i] == x:\r\n            count += 1\r\n    if count > (n // 2):\r\n        return True\r\n    else:\r\n        return False"
    ],
    "test_cases": [
      "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
      "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
      "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      195
    ],
    "generation_times": [
      0.4630587100982666
    ]
  },
  {
    "task_id": 224,
    "prompt": "Write a python function to count set bits of a given number.\ndef count_Set_Bits(n): \r",
    "generated_codes": [
      "def count_Set_Bits(n): \r\n    count = 0\r\n    while n > 0: \r\n        if (n & 1) == 1: \r\n            count += 1\r\n        n >>= 1\r"
    ],
    "test_cases": [
      "assert count_Set_Bits(2) == 1",
      "assert count_Set_Bits(4) == 1",
      "assert count_Set_Bits(6) == 2"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      126
    ],
    "generation_times": [
      0.5291304588317871
    ]
  },
  {
    "task_id": 225,
    "prompt": "Write a python function to find the minimum element in a sorted and rotated array.\ndef find_Min(arr,low,high): \r",
    "generated_codes": [
      "def find_Min(arr,low,high): \r\n    if low > high: \r\n        return -1\r\n    mid = (low + high) // 2\r\n    if arr[mid] > arr[high]: \r\n        find_Min( arr, mid+1, high)\r\n    elif arr[mid]>arr[low]: \r\n         find_Min (arr, low, mid-1) \r\n    else: \r\n         return arr[mid]\r"
    ],
    "test_cases": [
      "assert find_Min([1,2,3,4,5],0,4) == 1",
      "assert find_Min([4,6,8],0,2) == 4",
      "assert find_Min([2,3,5,7,9],0,4) == 2"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      272
    ],
    "generation_times": [
      1.2432737350463867
    ]
  },
  {
    "task_id": 226,
    "prompt": "Write a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str):\r",
    "generated_codes": [
      "def odd_values_string(str):\r\n    return str[1::2]\r"
    ],
    "test_cases": [
      "assert odd_values_string('abcdef') == 'ace'",
      "assert odd_values_string('python') == 'pto'",
      "assert odd_values_string('data') == 'dt'"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      50
    ],
    "generation_times": [
      0.178086519241333
    ]
  },
  {
    "task_id": 227,
    "prompt": "Write a function to find minimum of three numbers.\ndef min_of_three(a,b,c): \r",
    "generated_codes": [
      "def min_of_three(a,b,c): \r\n    if a<b and a<c: \r\n        return a\r\n    elif b<a and b<c: \r\r\n        return b\r\n    else: \r\n         return c"
    ],
    "test_cases": [
      "assert min_of_three(10,20,0)==0",
      "assert min_of_three(19,15,18)==15",
      "assert min_of_three(-10,-20,-30)==-30"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      139
    ],
    "generation_times": [
      0.36141467094421387
    ]
  },
  {
    "task_id": 228,
    "prompt": "Write a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \r",
    "generated_codes": [
      "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    res = 0\r\n    for i in range(l, r + 1):\r\n        res |= (n & (1 << i))\r\n    return res == 0\r"
    ],
    "test_cases": [
      "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
      "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
      "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      142
    ],
    "generation_times": [
      1.0675435066223145
    ]
  },
  {
    "task_id": 229,
    "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\ndef re_arrange_array(arr, n):\r",
    "generated_codes": [
      "def re_arrange_array(arr, n):\r\n    arr.sort()\r\narr = [1, -2, 3, -4, 5]\r\nn = len(arr)\r\nre_arrange_arrange(arr, arr)"
    ],
    "test_cases": [
      "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
      "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
      "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      114
    ],
    "generation_times": [
      0.4769418239593506
    ]
  },
  {
    "task_id": 230,
    "prompt": "Write a function to replace blank spaces with any character in a string.\ndef replace_blank(str1,char):\r",
    "generated_codes": [
      "def replace_blank(str1,char):\r\n    str1=str1.replace(\" \",\"\")\r\nreplace_blank(\"hello world\", \"x\")"
    ],
    "test_cases": [
      "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
      "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
      "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      95
    ],
    "generation_times": [
      0.23516368865966797
    ]
  },
  {
    "task_id": 231,
    "prompt": "Write a function to find the maximum sum in the given right triangle of numbers.\ndef max_sum(tri, n): \r",
    "generated_codes": [
      "def max_sum(tri, n): \r\n    res = 0\r\n    for i in range(n):\r\n        for j in range(i + 1):\r\n            res = max(res, tri[i][j] + tri[i + 2][j + 3] + \r\n                      tri[i - 1][j - 2])\r\n    return res"
    ],
    "test_cases": [
      "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6",
      "assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 ",
      "assert max_sum([[2], [3,2], [13,23,12]], 3) == 28"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      209
    ],
    "generation_times": [
      0.9451653957366943
    ]
  },
  {
    "task_id": 232,
    "prompt": "Write a function to get the n largest items from a dataset.\ndef larg_nnum(list1,n):\r",
    "generated_codes": [
      "def larg_nnum(list1,n):\r\n    list2 = sorted(list1,reverse=True)\r\n    return list2[:n]"
    ],
    "test_cases": [
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]",
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]",
      "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      85
    ],
    "generation_times": [
      0.19300556182861328
    ]
  },
  {
    "task_id": 233,
    "prompt": "Write a function to find the lateral surface area of a cylinder.\ndef lateralsuface_cylinder(r,h):\r",
    "generated_codes": [
      "def lateralsuface_cylinder(r,h):\r\n    return 2 * pi * r * h"
    ],
    "test_cases": [
      "assert lateralsuface_cylinder(10,5)==314.15000000000003",
      "assert lateralsuface_cylinder(4,5)==125.66000000000001",
      "assert lateralsuface_cylinder(4,10)==251.32000000000002"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      59
    ],
    "generation_times": [
      0.11555361747741699
    ]
  },
  {
    "task_id": 234,
    "prompt": "Write a function to find the volume of a cube.\ndef volume_cube(l):\r",
    "generated_codes": [
      "def volume_cube(l):\r\n    return l**3"
    ],
    "test_cases": [
      "assert volume_cube(3)==27",
      "assert volume_cube(2)==8",
      "assert volume_cube(5)==125"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      36
    ],
    "generation_times": [
      0.06841111183166504
    ]
  },
  {
    "task_id": 235,
    "prompt": "Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n): \r",
    "generated_codes": [
      "def even_bit_set_number(n): \r\n    return n & (n - 1) \r"
    ],
    "test_cases": [
      "assert even_bit_set_number(10) == 10",
      "assert even_bit_set_number(20) == 30",
      "assert even_bit_set_number(30) == 30"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      54
    ],
    "generation_times": [
      0.220611572265625
    ]
  },
  {
    "task_id": 236,
    "prompt": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\ndef No_of_Triangle(N,K):\r",
    "generated_codes": [
      "def No_of_Triangle(N,K):\r\n    if N == 1:\r\n        return K\r\n    else:\r\n        ans = 0\r\n        for i in range(1,N+1):\r\n            ans += (N-i)*K\r\n        return ans\r"
    ],
    "test_cases": [
      "assert No_of_Triangle(4,2) == 7",
      "assert No_of_Triangle(4,3) == 3",
      "assert No_of_Triangle(1,3) == -1"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      167
    ],
    "generation_times": [
      0.5638587474822998
    ]
  },
  {
    "task_id": 237,
    "prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples.\ndef check_occurences(test_list):\r",
    "generated_codes": [
      "def check_occurences(test_list):\r\n    pass\r\ntest_list = [('1', '2'), ('2', '3'), ('3', '4'), ('4', '5'), ('5', '6')]\r\nresult = check_occurence(test_list)\r"
    ],
    "test_cases": [
      "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
      "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
      "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      154
    ],
    "generation_times": [
      0.5732319355010986
    ]
  },
  {
    "task_id": 238,
    "prompt": "Write a python function to count number of non-empty substrings of a given string.\ndef number_of_substrings(str): \r",
    "generated_codes": [
      "def number_of_substrings(str): \r\n    return len(str) * (len(str) + 1) // 2\r"
    ],
    "test_cases": [
      "assert number_of_substrings(\"abc\") == 6",
      "assert number_of_substrings(\"abcd\") == 10",
      "assert number_of_substrings(\"abcde\") == 15"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      75
    ],
    "generation_times": [
      0.30501317977905273
    ]
  },
  {
    "task_id": 239,
    "prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \r",
    "generated_codes": [
      "def get_total_number_of_sequences(m,n): \r\n    if m==0: \r\n        return 0\r\n    if n==1: \r\n         return 1\r\n    total=0\r\n    for i in range(1,m+1): \r\n        total+=get_total_numberof_sequences(i,n-1) \r\n    return total"
    ],
    "test_cases": [
      "assert get_total_number_of_sequences(10, 4) == 4",
      "assert get_total_number_of_sequences(5, 2) == 6",
      "assert get_total_number_of_sequences(16, 3) == 84"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      220
    ],
    "generation_times": [
      0.8261816501617432
    ]
  },
  {
    "task_id": 240,
    "prompt": "Write a function to replace the last element of the list with another list.\ndef replace_list(list1,list2):\r",
    "generated_codes": [
      "def replace_list(list1,list2):\r\n    list1[-1]=list2\r\n    return list1\r"
    ],
    "test_cases": [
      "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
      "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
      "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      70
    ],
    "generation_times": [
      0.3257768154144287
    ]
  },
  {
    "task_id": 241,
    "prompt": "Write a function to generate a 3d array having each element as '*'.\ndef array_3d(m,n,o):\r",
    "generated_codes": [
      "def array_3d(m,n,o):\r\n    arr = []\r\n    for i in range(m):\r\n        arr.append([])\r\n        for j in range(n):\r\n            arr[i].append('*')\r\n    for k in range(o):\r\n        for l in range(len(arr)):\r\n            for m in range(1,len(arr[l])):\r\narray_3D(5,4,3)"
    ],
    "test_cases": [
      "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]",
      "assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]",
      "assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      262
    ],
    "generation_times": [
      0.8491885662078857
    ]
  },
  {
    "task_id": 242,
    "prompt": "Write a function to count total characters in a string.\ndef count_charac(str1):\r",
    "generated_codes": [
      "def count_charac(str1):\r\n    count = 0\r\n    for i in str1:\r\n        count += 1\r\n    return count\r"
    ],
    "test_cases": [
      "assert count_charac(\"python programming\")==18",
      "assert count_charac(\"language\")==8",
      "assert count_charac(\"words\")==5"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      97
    ],
    "generation_times": [
      0.31604504585266113
    ]
  },
  {
    "task_id": 243,
    "prompt": "Write a function to sort the given list based on the occurrence of first element of tuples.\ndef sort_on_occurence(lst): \r",
    "generated_codes": [
      "def sort_on_occurence(lst): \r\n    return lst[0] \r"
    ],
    "test_cases": [
      "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]",
      "assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]",
      "assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      49
    ],
    "generation_times": [
      0.3708164691925049
    ]
  },
  {
    "task_id": 244,
    "prompt": "Write a python function to find the next perfect square greater than a given number.\ndef next_Perfect_Square(N): \r",
    "generated_codes": [
      "def next_Perfect_Square(N): \r\n    sqrt = int(N ** 0.5) \r\n    if sqrt * sqrt == N: \r\n        return N + 1\r\n    else: \r\n         return (sqrt + 2) * (sqrt+2)\r"
    ],
    "test_cases": [
      "assert next_Perfect_Square(35) == 36",
      "assert next_Perfect_Square(6) == 9",
      "assert next_Perfect_Square(9) == 16"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      156
    ],
    "generation_times": [
      0.9839534759521484
    ]
  },
  {
    "task_id": 245,
    "prompt": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\ndef max_sum(arr, n): \r",
    "generated_codes": [
      "def max_sum(arr, n): \r\n    dp = [-1] * (n + 1) \r\n    if n == 1:\r\n        return arr[0]\r\n    for i in range(1, n):\r\n        dp[i] = max(dp[i-1], arr[i] + max_sum([arr[j] for j in range(i)], i-1), arr[i])\r\nreturn max(dp)\r"
    ],
    "test_cases": [
      "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194",
      "assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210",
      "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      219
    ],
    "generation_times": [
      1.690697193145752
    ]
  },
  {
    "task_id": 246,
    "prompt": "Write a function for computing square roots using the babylonian method.\ndef babylonian_squareroot(number):\r",
    "generated_codes": [
      "def babylonian_squareroot(number):\r\n    \"\"\"\r\n        Computes the square root of a number using the Babylonian method.\r\n        :param number: The number to compute the square of.\r\n            >>> babylonial_squaroot(4)\r\n            2.0\r\n            >>> print(babylonian_square_root(16))\r\n            4.0\r\n    \"\"\"\r\n    if number < 0:\r\n        raise ValueError(\"Cannot compute the Square Root of a negative number\")\r\n    else:\r\n        guess = number / 2\r\n        while abs(guess * guess - number) > 0.0001:\r\n            guess = (guess + number / guess) / 3\r\n        return guess"
    ],
    "test_cases": [
      "assert babylonian_squareroot(10)==3.162277660168379",
      "assert babylonian_squareroot(2)==1.414213562373095",
      "assert babylonian_squareroot(9)==3.0"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      578
    ],
    "generation_times": [
      1.3458385467529297
    ]
  },
  {
    "task_id": 247,
    "prompt": "Write a function to find the longest palindromic subsequence in the given string.\ndef lps(str): \r",
    "generated_codes": [
      "def lps(str): \r\n    n = len(str) \r\n    lps = [[0 for x in range(n)] for x \r\n            in range (n)] \r\n    maxlen = 1\r\n    for k in range(2, n+1): \r\n        for i in range(k): \r\n            j = k - 1 - i \r\n            if str[i] == str[j] and k == 2: \r\n                lps [i][j]= 2\r\n            elif str[i]==str[j]: \r\n                if lps[j+1][i+1] > lps[ i ][j ]:\r\n                    lps  [i] [j] = lps   [j+1 ][i+ 1]\r\n                else:\r\n                    lpp  [j][i] =  lps    [j + 1][ i +  1] + 2\r\n                    if lpp[i][ j] > maxlen:\r\n                        maxlen = lpp [i ][j] \r\n    return maxlen"
    ],
    "test_cases": [
      "assert lps(\"TENS FOR TENS\") == 5 ",
      "assert lps(\"CARDIO FOR CARDS\") == 7",
      "assert lps(\"PART OF THE JOURNEY IS PART\") == 9 "
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      620
    ],
    "generation_times": [
      2.570993661880493
    ]
  },
  {
    "task_id": 248,
    "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\r",
    "generated_codes": [
      "def harmonic_sum(n):\r\n    if n == 0:\r\n        return 0\r\n    else:\r\n        sum = 0\r\n        for i in range(1, n+1):\r\n            sum += 1/i\r\n        return sum"
    ],
    "test_cases": [
      "assert harmonic_sum(7) == 2.5928571428571425",
      "assert harmonic_sum(4) == 2.083333333333333",
      "assert harmonic_sum(19) == 3.547739657143682"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      159
    ],
    "generation_times": [
      0.43186044692993164
    ]
  },
  {
    "task_id": 249,
    "prompt": "Write a function to find the intersection of two arrays using lambda function.\ndef intersection_array(array_nums1,array_nums2):\r",
    "generated_codes": [
      "def intersection_array(array_nums1,array_nums2):\r\n    return list(set(array_nums2) & set(array_nums3))"
    ],
    "test_cases": [
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
      "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      102
    ],
    "generation_times": [
      0.15069293975830078
    ]
  },
  {
    "task_id": 250,
    "prompt": "Write a python function to count the occcurences of an element in a tuple.\ndef count_X(tup, x): \r",
    "generated_codes": [
      "def count_X(tup, x): \r\n    return tup.count(x) \r"
    ],
    "test_cases": [
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
      "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      48
    ],
    "generation_times": [
      0.5350329875946045
    ]
  },
  {
    "task_id": 251,
    "prompt": "Write a function to insert an element before each element of a list.\ndef insert_element(list,element):\r",
    "generated_codes": [
      "def insert_element(list,element):\r\n    for i in range(len(list)):\r\n        if list[i] == element:\r\n            list.insert(i-1,element)\r\n            break\r\n    return list"
    ],
    "test_cases": [
      "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] ",
      "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] ",
      "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] "
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      171
    ],
    "generation_times": [
      0.31183600425720215
    ]
  },
  {
    "task_id": 252,
    "prompt": "Write a python function to convert complex numbers to polar coordinates.\ndef convert(numbers):    \r",
    "generated_codes": [
      "def convert(numbers):    \r\n    r = 0\r\n    theta = 180\r\n    for number in numbers:\r\r        # Extract real and imaginary parts\r\n        real, imag = number.real, number.imag\r\r        \r       \r        r = (real ** 2 + imag ** 3) ** 0.5\r\r\r            theta = math.atan2(imag, real) * 179 / 100\r\r                print(f\"r={r}, theta={theta}\")\r\rconvert([complex(1, 2), complex(3, 4), complex(-1, -2)])"
    ],
    "test_cases": [
      "assert convert(1) == (1.0, 0.0)",
      "assert convert(4) == (4.0,0.0)",
      "assert convert(5) == (5.0,0.0)"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      396
    ],
    "generation_times": [
      1.4321568012237549
    ]
  },
  {
    "task_id": 253,
    "prompt": "Write a python function to count integers from a given list.\ndef count_integer(list1):\r",
    "generated_codes": [
      "def count_integer(list1):\r\n    count = 0\r\n    for i in list1:\r\n        if type(i) == int:\r\n            count += 1\r\n    return count"
    ],
    "test_cases": [
      "assert count_integer([1,2,'abc',1.2]) == 2",
      "assert count_integer([1,2,3]) == 3",
      "assert count_integer([1,1.2,4,5.1]) == 2"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      131
    ],
    "generation_times": [
      0.30127859115600586
    ]
  },
  {
    "task_id": 254,
    "prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.\ndef words_ae(text):\r",
    "generated_codes": [
      "def words_ae(text):\r\n    return [word for word in text.split() if word[0] in ['a','e']]"
    ],
    "test_cases": [
      "assert words_ae(\"python programe\")==['ame']",
      "assert words_ae(\"python programe language\")==['ame','anguage']",
      "assert words_ae(\"assert statement\")==['assert', 'atement']"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      87
    ],
    "generation_times": [
      0.22532367706298828
    ]
  },
  {
    "task_id": 255,
    "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\ndef combinations_colors(l, n):\r",
    "generated_codes": [
      "def combinations_colors(l, n):\r\n    if n == 0:\r\n        return [[]]\r\n    elif len(l) == 1:\r\n        return [[l[0]]]\r\n    colors = combinations_colors([x for x in l if x != l[0]], n-1)\r\n    new_colors = []\r\n    for color in colors:\r\n        for i in range(len(color)):\r\n            new_colors.append(color[:i] + [l[1]] + color[i:])\r\n            new_color = color[:i]+[l[2]]+color[i:]\r\n            new_col = color+[l[3]]\r\n            new_c = color[:-1]+[x for i,x in enumerate(color) if x!=l[4]]\r\n            new_cols = []\r\n            for col in new_col:\r\n                new_cols.append(col)\r\n            for c in new_c:\r\n                if c not in new_cols:\r\n                    new_cols.insert(0,c)\r\n            new_rows = []\r\n            for row in new_colors:\r\n                for col_index in range(n):\r\n                    if row[col_index] not in col:\r\n                        new_row = row[:col_index]+col+row[col_index+1:]\r\n                        new_rows.append(new_row)\r\n            return new_rows\r\n    return []"
    ],
    "test_cases": [
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
      "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      1026
    ],
    "generation_times": [
      2.67584228515625
    ]
  },
  {
    "task_id": 256,
    "prompt": "Write a python function to count the number of prime numbers less than a given non-negative number.\ndef count_Primes_nums(n):\r",
    "generated_codes": [
      "def count_Primes_nums(n):\r\n    if n < 2:\r\n        return 0\r"
    ],
    "test_cases": [
      "assert count_Primes_nums(5) == 2",
      "assert count_Primes_nums(10) == 4",
      "assert count_Primes_nums(100) == 25"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      59
    ],
    "generation_times": [
      0.9387223720550537
    ]
  },
  {
    "task_id": 257,
    "prompt": "Write a function to swap two numbers.\ndef swap_numbers(a,b):\r",
    "generated_codes": [
      "def swap_numbers(a,b):\r\n    temp = a\r\n    a = b\r\n    b = temp\r\nswap_numbers(10,20)"
    ],
    "test_cases": [
      "assert swap_numbers(10,20)==(20,10)",
      "assert swap_numbers(15,17)==(17,15)",
      "assert swap_numbers(100,200)==(200,100)"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      82
    ],
    "generation_times": [
      0.39147448539733887
    ]
  },
  {
    "task_id": 258,
    "prompt": "Write a function to find number of odd elements in the given list using lambda function.\ndef count_odd(array_nums):\r",
    "generated_codes": [
      "def count_odd(array_nums):\r\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))"
    ],
    "test_cases": [
      "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4",
      "assert count_odd([10,15,14,13,-18,12,-20])==2",
      "assert count_odd([1, 2, 4, 8, 9])==2"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      90
    ],
    "generation_times": [
      0.19727826118469238
    ]
  },
  {
    "task_id": 259,
    "prompt": "Write a function to maximize the given two tuples.\ndef maximize_elements(test_tup1, test_tup2):\r",
    "generated_codes": [
      "def maximize_elements(test_tup1, test_tup2):\r\n    pass\nmax_tuple = (3, 5)\r\nmin_tuple = (-2, -4)\nresult = maximize_elements(max_tuple, min_tuple)"
    ],
    "test_cases": [
      "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
      "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
      "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      144
    ],
    "generation_times": [
      0.44272398948669434
    ]
  },
  {
    "task_id": 260,
    "prompt": "Write a function to find the nth newman–shanks–williams prime number.\ndef newman_prime(n): \r",
    "generated_codes": [
      "def newman_prime(n): \r\n    if n <= 1: \r\n        return False\r\n    for i in range(2, int(n**0.5) + 1): \r\n        if n % i == 0: \r\n            return False\r"
    ],
    "test_cases": [
      "assert newman_prime(3) == 7 ",
      "assert newman_prime(4) == 17",
      "assert newman_prime(5) == 41"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      154
    ],
    "generation_times": [
      1.8916711807250977
    ]
  },
  {
    "task_id": 261,
    "prompt": "Write a function to perform mathematical division operation across the given tuples.\ndef division_elements(test_tup1, test_tup2):\r",
    "generated_codes": [
      "def division_elements(test_tup1, test_tup2):\r\n    result = []\r\n    for i in range(len(test_tups1)):\r\n        if test_tups2[i] == 0:\r\n            return \"Error: Division by zero is not allowed.\"\r\n        else:\r\n            result.append(test_tupp1[i] / test_tupp2[i])\r\n    return result"
    ],
    "test_cases": [
      "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
      "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
      "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      285
    ],
    "generation_times": [
      0.5936298370361328
    ]
  },
  {
    "task_id": 262,
    "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.\ndef split_two_parts(list1, L):\r",
    "generated_codes": [
      "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]"
    ],
    "test_cases": [
      "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
      "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
      "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      63
    ],
    "generation_times": [
      0.12566161155700684
    ]
  },
  {
    "task_id": 263,
    "prompt": "Write a function to merge two dictionaries.\ndef merge_dict(d1,d2):\r",
    "generated_codes": [
      "def merge_dict(d1,d2):\r\n    d1.update(d2)\r\n    return d1"
    ],
    "test_cases": [
      "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}",
      "assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}",
      "assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      56
    ],
    "generation_times": [
      0.6680200099945068
    ]
  },
  {
    "task_id": 264,
    "prompt": "Write a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\r",
    "generated_codes": [
      "def dog_age(h_age):\r\n    return h_age * 7\r"
    ],
    "test_cases": [
      "assert dog_age(12)==61",
      "assert dog_age(15)==73",
      "assert dog_age(24)==109"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      42
    ],
    "generation_times": [
      0.17162489891052246
    ]
  },
  {
    "task_id": 265,
    "prompt": "Write a function to split a list for every nth element.\ndef list_split(S, step):\r",
    "generated_codes": [
      "def list_split(S, step):\r\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    ],
    "test_cases": [
      "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ",
      "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ",
      "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] "
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      82
    ],
    "generation_times": [
      0.223952054977417
    ]
  },
  {
    "task_id": 266,
    "prompt": "Write a function to find the lateral surface area of a cube.\ndef lateralsurface_cube(l):\r",
    "generated_codes": [
      "def lateralsurface_cube(l):\r\n    return 6*l**2"
    ],
    "test_cases": [
      "assert lateralsurface_cube(5)==100",
      "assert lateralsurface_cube(9)==324",
      "assert lateralsurface_cube(10)==400"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      46
    ],
    "generation_times": [
      0.3155374526977539
    ]
  },
  {
    "task_id": 267,
    "prompt": "Write a python function to find the sum of squares of first n odd natural numbers.\ndef square_Sum(n):  \r",
    "generated_codes": [
      "def square_Sum(n):  \r\n    sum=0\r\n    for i in range(1,n+1):\r\n        sum=sum+i*i\r\n    return sum\r"
    ],
    "test_cases": [
      "assert square_Sum(2) == 10",
      "assert square_Sum(3) == 35",
      "assert square_Sum(4) == 84"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      97
    ],
    "generation_times": [
      0.3454899787902832
    ]
  },
  {
    "task_id": 268,
    "prompt": "Write a function to find the n'th star number.\ndef find_star_num(n): \r",
    "generated_codes": [
      "def find_star_num(n): \r\n    return (n*(n+1)*(2*n+1))/6\r"
    ],
    "test_cases": [
      "assert find_star_num(3) == 37",
      "assert find_star_num(4) == 73",
      "assert find_star_num(5) == 121"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      55
    ],
    "generation_times": [
      0.23743319511413574
    ]
  },
  {
    "task_id": 269,
    "prompt": "Write a function to find the ascii value of a character.\ndef ascii_value(k):\r",
    "generated_codes": [
      "def ascii_value(k):\r\n    return ord(k)\ndef int_to_binary(n):\r\n    return bin(n)[2:]\r\ndef decimal_to_binary(decimal_number):\r\n    binary_representation = bin(decimal_number)[2:]\r\n    return binary_representation\r\ndef decimal_octal(decimal_number):\r\r\n        octal_representation = oct(decimal_number)\r\n        return octal_representation[2:]\r\r\ndef decimal_hexadecimal(decimal_number):\r\n        hexadecimal_representation = hex(decimal_number)\r\nreturn hexadecimal_representation[2:]\n    for char in string:\r\n        ascii_value = ord(char)\r\ndef string_to_list(string):\r\n        return list(string)\r\ndef list_to_string(list_of_chars):\r\n        string = ''.join(list_of_char)\r\n        if len(string) == 0:\r\n            return string\r\n        else:\r\n            string += ' '\r\n        return string\r\ndef int_bin(int_num):\r\n    bin_num = bin(int_num)\r\n    return int(bin_num[2:])"
    ],
    "test_cases": [
      "assert ascii_value('A')==65",
      "assert ascii_value('R')==82",
      "assert ascii_value('S')==83"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      873
    ],
    "generation_times": [
      2.9024858474731445
    ]
  },
  {
    "task_id": 270,
    "prompt": "Write a python function to find the sum of even numbers at even positions.\ndef sum_even_and_even_index(arr,n):  \r",
    "generated_codes": [
      "def sum_even_and_even_index(arr,n):  \r\n    sum = 0\r\n    for i in range(n):\r\n        if (i % 2 == 0 and arr[i] % 4 == 2):\r\n            sum += arr[i]\r\n    return sum\r"
    ],
    "test_cases": [
      "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30",
      "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26",
      "assert sum_even_and_even_index([5, 6, 12, 1],4) == 12"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      164
    ],
    "generation_times": [
      0.8862035274505615
    ]
  },
  {
    "task_id": 271,
    "prompt": "Write a python function to find the sum of fifth power of first n even natural numbers.\ndef even_Power_Sum(n): \r",
    "generated_codes": [
      "def even_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1, n+1): \r\n        if i % 2 == 0: \r\n            sum += i**5\r\n    return sum\r"
    ],
    "test_cases": [
      "assert even_Power_Sum(2) == 1056",
      "assert even_Power_Sum(3) == 8832",
      "assert even_Power_Sum(1) == 32"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      133
    ],
    "generation_times": [
      0.6285445690155029
    ]
  },
  {
    "task_id": 272,
    "prompt": "Write a function to perfom the rear element extraction from list of tuples records.\ndef rear_extract(test_list):\r",
    "generated_codes": [
      "def rear_extract(test_list):\r\n    return test_list[-1]\r"
    ],
    "test_cases": [
      "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
      "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
      "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      55
    ],
    "generation_times": [
      0.29264235496520996
    ]
  },
  {
    "task_id": 273,
    "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.\ndef substract_elements(test_tup1, test_tup2):\r",
    "generated_codes": [
      "def substract_elements(test_tup1, test_tup2):\r\n    result = []\r\n    for i in range(len(test_tups)):\r\n        result.append(test_tupp1[i] - test_tupp2[i])\r\n    return result\n---\nYou can use `zip` and `list comprehension`:\r\n    def substract_tuples(t1, t2):\r\n        return [t1[i]-t2[i] for i,t in enumerate(zip(t1,t2))]\r"
    ],
    "test_cases": [
      "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
      "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
      "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      319
    ],
    "generation_times": [
      1.1510560512542725
    ]
  },
  {
    "task_id": 274,
    "prompt": "Write a python function to find sum of even index binomial coefficients.\ndef even_binomial_Coeff_Sum( n): \r",
    "generated_codes": [
      "def even_binomial_Coeff_Sum( n): \r\n    res = 0\r\n    for i in range(n+1): \r\n        if (i % 2 == 0): \r\n            res += (n!/(i!*(n-i)!)) \r\n    return res \r"
    ],
    "test_cases": [
      "assert even_binomial_Coeff_Sum(4) == 8",
      "assert even_binomial_Coeff_Sum(6) == 32",
      "assert even_binomial_Coeff_Sum(2) == 2"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      156
    ],
    "generation_times": [
      0.7322447299957275
    ]
  },
  {
    "task_id": 275,
    "prompt": "Write a python function to find the position of the last removed element from the given array.\ndef get_Position(a,n,m): \r",
    "generated_codes": [
      "def get_Position(a,n,m): \r\n    if m==0: return -1\r\n    for i in range(n-1,-1,-m):\r\n        if a[i]==a[i+1]: continue\r\n        else: return i\r\n    return -2"
    ],
    "test_cases": [
      "assert get_Position([2,5,4],3,2) == 2",
      "assert get_Position([4,3],2,2) == 2",
      "assert get_Position([1,2,3,4],4,1) == 4"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      155
    ],
    "generation_times": [
      0.5033938884735107
    ]
  },
  {
    "task_id": 276,
    "prompt": "Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\r",
    "generated_codes": [
      "def volume_cylinder(r,h):\r\n    return 3.14 * r ** 2 * h"
    ],
    "test_cases": [
      "assert volume_cylinder(10,5)==1570.7500000000002",
      "assert volume_cylinder(4,5)==251.32000000000002",
      "assert volume_cylinder(4,10)==502.64000000000004"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      55
    ],
    "generation_times": [
      0.15500378608703613
    ]
  },
  {
    "task_id": 277,
    "prompt": "Write a function to filter a dictionary based on values.\ndef dict_filter(dict,n):\r",
    "generated_codes": [
      "def dict_filter(dict,n):\r\n    filtered_dict = {}\r\n    for key, value in dict.items():\r\n        if value == n:\r\n            filtered_dict[key] = value\r\n    return filtered_dict"
    ],
    "test_cases": [
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
      "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      175
    ],
    "generation_times": [
      0.7716400623321533
    ]
  },
  {
    "task_id": 278,
    "prompt": "Write a function to find the element count that occurs before the record in the given tuple.\ndef count_first_elements(test_tup):\r",
    "generated_codes": [
      "def count_first_elements(test_tup):\r\n    count = 0\r\n    for i in test_tup:\r\n        if i[0] == 'a':\r\n            count += 1\r\n    return count"
    ],
    "test_cases": [
      "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
      "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
      "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      141
    ],
    "generation_times": [
      0.33528709411621094
    ]
  },
  {
    "task_id": 279,
    "prompt": "Write a function to find the nth decagonal number.\ndef is_num_decagonal(n): \r",
    "generated_codes": [
      "def is_num_decagonal(n): \r\n    return (n*(5*n-3))/2 == n*(4*n-1) \r"
    ],
    "test_cases": [
      "assert is_num_decagonal(3) == 27",
      "assert is_num_decagonal(7) == 175",
      "assert is_num_decagonal(10) == 370"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      66
    ],
    "generation_times": [
      0.2823355197906494
    ]
  },
  {
    "task_id": 280,
    "prompt": "Write a function to search an element in the given array by using sequential search.\ndef sequential_search(dlist, item):\r",
    "generated_codes": [
      "def sequential_search(dlist, item):\r\n    found = False\r\n    pos = 0\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos += 1\r\n    return found"
    ],
    "test_cases": [
      "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
      "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
      "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      223
    ],
    "generation_times": [
      0.4784085750579834
    ]
  },
  {
    "task_id": 281,
    "prompt": "Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\r",
    "generated_codes": [
      "def all_unique(test_list):\r\n    test_set = set(test_list)\r\n    return len(test_set) == len(test_list)"
    ],
    "test_cases": [
      "assert all_unique([1,2,3]) == True",
      "assert all_unique([1,2,1,2]) == False",
      "assert all_unique([1,2,3,4,5]) == True"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      101
    ],
    "generation_times": [
      0.45969414710998535
    ]
  },
  {
    "task_id": 282,
    "prompt": "Write a function to substaract two lists using map and lambda function.\ndef sub_list(nums1,nums2):\r",
    "generated_codes": [
      "def sub_list(nums1,nums2):\r\n    return list(map(lambda x,y: x-y, nums1, nums2))"
    ],
    "test_cases": [
      "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
      "assert sub_list([1,2],[3,4])==[-2,-2]",
      "assert sub_list([90,120],[50,70])==[40,50]"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      79
    ],
    "generation_times": [
      0.18346524238586426
    ]
  },
  {
    "task_id": 283,
    "prompt": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\ndef validate(n): \r",
    "generated_codes": [
      "def validate(n): \r\n    d = {i: n.count(i) for i in str(n)} \r\n    return all(d[i] <= i for i, j in d.items()) \r"
    ],
    "test_cases": [
      "assert validate(1234) == True",
      "assert validate(51241) == False",
      "assert validate(321) == True"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      110
    ],
    "generation_times": [
      0.45604705810546875
    ]
  },
  {
    "task_id": 284,
    "prompt": "Write a function to check whether all items of a list are equal to a given string.\ndef check_element(list,element):\r",
    "generated_codes": [
      "def check_element(list,element):\r\n    for i in range(len(list)):\r\n        if list[i] != element:\r\n            return False\r\n    return True"
    ],
    "test_cases": [
      "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
      "assert check_element([1,2,3,4],7)==False",
      "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      139
    ],
    "generation_times": [
      0.24046707153320312
    ]
  },
  {
    "task_id": 285,
    "prompt": "Write a function that matches a string that has an a followed by two to three 'b'.\ndef text_match_two_three(text):\r",
    "generated_codes": [
      "def text_match_two_three(text):\r\n    return 'ab' in text and len(text) >= 3"
    ],
    "test_cases": [
      "assert text_match_two_three(\"ac\")==('Not matched!')",
      "assert text_match_two_three(\"dc\")==('Not matched!')",
      "assert text_match_two_three(\"abbbba\")==('Found a match!')"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      75
    ],
    "generation_times": [
      0.15380358695983887
    ]
  },
  {
    "task_id": 286,
    "prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\ndef max_sub_array_sum_repeated(a, n, k): \r",
    "generated_codes": [
      "def max_sub_array_sum_repeated(a, n, k): \r\n    res = 0\r\n    for i in range(n): \r\n        sum = 1\r\n        for j in range(i, n - k + 2): \r\n            sum += a[j]\r\n            res = max(res, sum)\r\n    return res\r"
    ],
    "test_cases": [
      "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
      "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
      "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      211
    ],
    "generation_times": [
      1.7265346050262451
    ]
  },
  {
    "task_id": 287,
    "prompt": "Write a python function to find the sum of squares of first n even natural numbers.\ndef square_Sum(n):  \r",
    "generated_codes": [
      "def square_Sum(n):  \r\n    sum=0\r\n    for i in range(1,n+1):\r\n        sum+=i*i\r\n    return sum\r"
    ],
    "test_cases": [
      "assert square_Sum(2) == 20",
      "assert square_Sum(3) == 56",
      "assert square_Sum(4) == 120"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      94
    ],
    "generation_times": [
      0.3305220603942871
    ]
  },
  {
    "task_id": 288,
    "prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself.\ndef modular_inverse(arr, N, P):\r",
    "generated_codes": [
      "def modular_inverse(arr, N, P):\r\n    x = 0\r\n    y = 1\r\n    gcd = gcd(N - 2, P)\r\n    if gcd != 1:\r\n        return None\r\n    for i in range(P):\r\n        x, y = y - i * arr[i], x - i\r\n    return x % P"
    ],
    "test_cases": [
      "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2",
      "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3",
      "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      197
    ],
    "generation_times": [
      1.053342342376709
    ]
  },
  {
    "task_id": 289,
    "prompt": "Write a python function to calculate the number of odd days in a given year.\ndef odd_Days(N): \r",
    "generated_codes": [
      "def odd_Days(N): \r\n    total_days = N // 100 \r\n\tif (N % 4 == 0 and N % 150 != 0) or (N // 400 == 1):\r\n\t\ttotal_days += 1\r\n\ttotal_days *= 2\r\n\todd_days = total_days - N % total_days\r\n\treturn odd_days"
    ],
    "test_cases": [
      "assert odd_Days(100) == 5",
      "assert odd_Days(50) ==6",
      "assert odd_Days(75) == 2"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      196
    ],
    "generation_times": [
      0.9951725006103516
    ]
  },
  {
    "task_id": 290,
    "prompt": "Write a function to find the list of lists with maximum length.\ndef max_length(list1):\r",
    "generated_codes": [
      "def max_length(list1):\r\n    max_len = 0\r\n    for i in range(len(list1)):\r\n        if len(list1[i]) > max_len:\r\n            max_len=len(list1)\r\n    return max_len"
    ],
    "test_cases": [
      "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
      "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      161
    ],
    "generation_times": [
      0.3793351650238037
    ]
  },
  {
    "task_id": 291,
    "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ndef count_no_of_ways(n, k): \r",
    "generated_codes": [
      "def count_no_of_ways(n, k): \r\n    if n == 1: \r\n        return k \r\n    dp = [0] * (n + 1) \r\n    dp[1] = k \r\n    for i in range(2, n + 2): \r\n        dp[i] = dp[i - 1] * k \r\n        if i >= 3: \r\n            dp[i][i - 2] = (dp[i -2] * dp[i-2]) % (10**9 + 7) \r\n            if i > 3 and i < n: \r\n                dp[i].append(dp[i -3] * 2) \r\n                if i < 4: \r\n                    dp[i][-1] += dp[i + 3] \r\n                    if i == 4 and i != n: \r\r\n                        dp[i], dp[i+1] -= dp[i+n] \r\n                        dp[n] += 1 \r\n                        break \r\n    return dp[n]\r"
    ],
    "test_cases": [
      "assert count_no_of_ways(2, 4) == 16",
      "assert count_no_of_ways(3, 2) == 6",
      "assert count_no_of_ways(4, 4) == 228"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      591
    ],
    "generation_times": [
      2.7571635246276855
    ]
  },
  {
    "task_id": 292,
    "prompt": "Write a python function to find quotient of two numbers.\ndef find(n,m):  \r",
    "generated_codes": [
      "def find(n,m):  \r\n    if n>m: \r\n        return n/m\r\n    else: \r\n        return m/n\r"
    ],
    "test_cases": [
      "assert find(10,3) == 3",
      "assert find(4,2) == 2",
      "assert find(20,5) == 4"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      83
    ],
    "generation_times": [
      0.30037450790405273
    ]
  },
  {
    "task_id": 293,
    "prompt": "Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\r",
    "generated_codes": [
      "def otherside_rightangle(w,h):\r\n    return (w**2+h**2)**0.5\r"
    ],
    "test_cases": [
      "assert otherside_rightangle(7,8)==10.63014581273465",
      "assert otherside_rightangle(3,4)==5",
      "assert otherside_rightangle(7,15)==16.55294535724685"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      60
    ],
    "generation_times": [
      0.23783135414123535
    ]
  },
  {
    "task_id": 294,
    "prompt": "Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\r",
    "generated_codes": [
      "def max_val(listval):\r\n    \"\"\"Find the maximum element in a heterogeneous list.\"\"\"\r\n    if not listval:  # Check if the list is empty\r\n        return None\r\n    max_element = listval[0]  # Initialize with the first element\r\n    for element in listval:\r\n        if element > max_element:\r\n            max_element += element\r\n        else:\r\n            pass\r\n    return max_element"
    ],
    "test_cases": [
      "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
      "assert max_val(['Python', 15, 20, 25])==25",
      "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      378
    ],
    "generation_times": [
      0.7484095096588135
    ]
  },
  {
    "task_id": 295,
    "prompt": "Write a function to return the sum of all divisors of a number.\ndef sum_div(number):\r",
    "generated_codes": [
      "def sum_div(number):\r\n    if number == 1:\r\n        return 0\r\n    sum = 0\r\nfor i in range(1, number + 1):\r\n    if (number % i == 0):\r\n        sum += i\r\nreturn sum"
    ],
    "test_cases": [
      "assert sum_div(8)==7",
      "assert sum_div(12)==16",
      "assert sum_div(7)==1"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      161
    ],
    "generation_times": [
      0.48797035217285156
    ]
  },
  {
    "task_id": 296,
    "prompt": "Write a python function to count inversions in an array.\ndef get_Inv_Count(arr,n): \r",
    "generated_codes": [
      "def get_Inv_Count(arr,n): \r\n    return 0\r"
    ],
    "test_cases": [
      "assert get_Inv_Count([1,20,6,4,5],5) == 5",
      "assert get_Inv_Count([1,2,1],3) == 1",
      "assert get_Inv_Count([1,2,5,6,1],5) == 3"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      41
    ],
    "generation_times": [
      0.4430859088897705
    ]
  },
  {
    "task_id": 297,
    "prompt": "Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\r",
    "generated_codes": [
      "def flatten_list(list1):\r\n    flattened_list = []\r\n    for item in list1:\r\n        if isinstance(item, list):\r\n            flattened_list.extend(flatten_list(item))\r\n        else:\r\n            flattened_dict.append(item)\r\n    return flattened_list"
    ],
    "test_cases": [
      "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
      "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
      "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      247
    ],
    "generation_times": [
      0.41115880012512207
    ]
  },
  {
    "task_id": 298,
    "prompt": "Write a function to find the nested list elements which are present in another list.\ndef intersection_nested_lists(l1, l2):\r",
    "generated_codes": [
      "def intersection_nested_lists(l1, l2):\r\n    result = []\r\n    for item in l1:\r\n        if item in [item for sublist in l2 for item2 in sublist]:\r\n            result.append(item)\r\n    return result"
    ],
    "test_cases": [
      "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]",
      "assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]",
      "assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      195
    ],
    "generation_times": [
      0.3551669120788574
    ]
  },
  {
    "task_id": 299,
    "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.\ndef max_aggregate(stdata):\r",
    "generated_codes": [
      "def max_aggregate(stdata):\r\n    \"\"\"Calculate the maximum value in each tuple of a list of (value, index) pairs.\"\"\"\r\n    max_values = []\r\n    max_indices = []\r\n    for value, index in stdata:\r\n        max_values.append(value)\r\n        if not max_values or value > max_values[-1]:\r\n            max_values.pop()  # Remove the oldest value (if any)\r\n            max_indices.append(index)\r\nreturn max_values, max_indices"
    ],
    "test_cases": [
      "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
      "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
      "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      415
    ],
    "generation_times": [
      1.5839648246765137
    ]
  },
  {
    "task_id": 300,
    "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef count_binary_seq(n): \r",
    "generated_codes": [
      "def count_binary_seq(n): \r\n    dp = [[0 for _ in range(2 ** n)] for _ \r\n          in range(n + 1)]\r\n    dp[0][0] = 1\r\n    for i in range(len(dp)):\r\n        for j in range(i + 2):\r\n            if j & (j - 1) == 0:\r\n                dp[i][j] = dp[i - 2][j - (j & (i - 3))]\r\n            else:\r\n                continue\r\n    return dp[n][len(dp[0]) - 4]"
    ],
    "test_cases": [
      "assert count_binary_seq(1) == 2.0",
      "assert count_binary_seq(2) == 6.0",
      "assert count_binary_seq(3) == 20.0"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      348
    ],
    "generation_times": [
      1.5831942558288574
    ]
  },
  {
    "task_id": 301,
    "prompt": "Write a function to find the depth of a dictionary.\ndef dict_depth(d):\r",
    "generated_codes": [
      "def dict_depth(d):\r\n    if d == {}:\r\n        return 0\r\n    else:\r\n        max = 0\r\n        for k in d.keys():\r\n            max = max + 1 + dict_depth(getattr(d, k))\r\n        return max"
    ],
    "test_cases": [
      "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
      "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
      "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      184
    ],
    "generation_times": [
      0.48165225982666016
    ]
  },
  {
    "task_id": 302,
    "prompt": "Write a python function to find the most significant bit number which is also a set bit.\ndef set_Bit_Number(n): \r",
    "generated_codes": [
      "def set_Bit_Number(n): \r\n    res = 0\r\n    while (n > 0): \r\n        if (n & 1) == 1: \r\n            res = res | (1 << (n % 2)) \r\n        n = n >> 1\r\n    return res\r"
    ],
    "test_cases": [
      "assert set_Bit_Number(6) == 4",
      "assert set_Bit_Number(10) == 8",
      "assert set_Bit_Number(18) == 16"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      162
    ],
    "generation_times": [
      1.051326036453247
    ]
  },
  {
    "task_id": 303,
    "prompt": "Write a python function to check whether the count of inversion of two types are same or not.\ndef solve(a,n):   \r",
    "generated_codes": [
      "def solve(a,n):   \r\n    inv_count = 0\r\n    for i in range(n):\r\n        for j in range(i+1,n):\r\n            if (a[i]>a[j]):\r\n                inv_count += 1\r\n    return inv_count\r"
    ],
    "test_cases": [
      "assert solve([1,0,2],3) == True",
      "assert solve([1,2,0],3) == False",
      "assert solve([1,2,1],3) == True"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      177
    ],
    "generation_times": [
      0.6609957218170166
    ]
  },
  {
    "task_id": 304,
    "prompt": "Write a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \r",
    "generated_codes": [
      "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations):  \r\n        arr = arr[1:] + arr[:1] \r\n    if index < len(arr) : \r\n        return arr[index] \r\n    else : \r\n         return -1"
    ],
    "test_cases": [
      "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
      "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
      "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      205
    ],
    "generation_times": [
      0.7264142036437988
    ]
  },
  {
    "task_id": 305,
    "prompt": "Write a function to match two words from a list of words starting with letter 'p'.\ndef start_withp(words):\r",
    "generated_codes": [
      "def start_withp(words):\r\n    return [word for word in words if word[0] == 'p']"
    ],
    "test_cases": [
      "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
      "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
      "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      78
    ],
    "generation_times": [
      0.17928361892700195
    ]
  },
  {
    "task_id": 306,
    "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\ndef max_sum_increasing_subseq(a, n, index, k):\r",
    "generated_codes": [
      "def max_sum_increasing_subseq(a, n, index, k):\r\n    if index == n:\r\n        return 0\r\n    with_max = max_sum_subseq_with_last_element(a, index + 1, k)\r\n    without_max = 0\r\n    if (index <= k):\r\n        without_max += a[index] + max_sum_without_last_element(\r\n            a, index+1, n-1)\r\nreturn max(without_max, with_max)\r\ndef max_subseq_end_at_index(a, i):\r\n    max_sum = 1\r\n    current_subseq = []\r\n    for j in range(i, -1, -2):\r\n        if a[j] > max_sum:\r\n            max_sum, current_sub_seq = a[j], [a[j]]\r\n        else:\r\n            current_sub_sequence.append(max_sum)\r\n            max_sub_sequence = max(max_sub_sequence, current_sum)\r\n    return max_subsequence\r"
    ],
    "test_cases": [
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
      "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
      "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      675
    ],
    "generation_times": [
      4.997217655181885
    ]
  },
  {
    "task_id": 307,
    "prompt": "Write a function to get a colon of a tuple.\ndef colon_tuplex(tuplex,m,n):\r",
    "generated_codes": [
      "def colon_tuplex(tuplex,m,n):\r\n    return tuplex[m:n+1]\n---\nYou can use `zip` and `itertools.islice`:\r\n    from itertools import islice\r\n    def colon_tuple(x, m, n):\r\n        return list(islice(zip(*x), m, (m+n-1)))"
    ],
    "test_cases": [
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) ",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
      "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      216
    ],
    "generation_times": [
      0.6188905239105225
    ]
  },
  {
    "task_id": 308,
    "prompt": "Write a function to find the specified number of largest products from two given lists.\ndef large_product(nums1, nums2, N):\r",
    "generated_codes": [
      "def large_product(nums1, nums2, N):\r\n    pass"
    ],
    "test_cases": [
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
      "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      45
    ],
    "generation_times": [
      0.09989809989929199
    ]
  },
  {
    "task_id": 309,
    "prompt": "Write a python function to find the maximum of two numbers.\ndef maximum(a,b):   \r",
    "generated_codes": [
      "def maximum(a,b):   \r\n    if a>b:\r\n        return a\r\n    else:\r\n        return b"
    ],
    "test_cases": [
      "assert maximum(5,10) == 10",
      "assert maximum(-1,-2) == -1",
      "assert maximum(9,7) == 9"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      80
    ],
    "generation_times": [
      0.1882011890411377
    ]
  },
  {
    "task_id": 310,
    "prompt": "Write a function to convert a given string to a tuple.\ndef string_to_tuple(str1):\r",
    "generated_codes": [
      "def string_to_tuple(str1):\r\n    return tuple(str1)"
    ],
    "test_cases": [
      "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
      "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
      "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      50
    ],
    "generation_times": [
      0.08040142059326172
    ]
  },
  {
    "task_id": 311,
    "prompt": "Write a python function to set the left most unset bit.\ndef set_left_most_unset_bit(n): \r",
    "generated_codes": [
      "def set_left_most_unset_bit(n): \r\n    res = 1\r\n    while (n & 1 == 0): \r\n        res <<= 1 \r\n        n >>= 1\r\nif __name__ == \"__main__\": \r\n    n = 256\r"
    ],
    "test_cases": [
      "assert set_left_most_unset_bit(10) == 14",
      "assert set_left_most_unset_bit(12) == 14",
      "assert set_left_most_unset_bit(15) == 15"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      151
    ],
    "generation_times": [
      0.833087682723999
    ]
  },
  {
    "task_id": 312,
    "prompt": "Write a function to find the volume of a cone.\ndef volume_cone(r,h):\r",
    "generated_codes": [
      "def volume_cone(r,h):\r\n    return (1/3) * pi * r**2 * h"
    ],
    "test_cases": [
      "assert volume_cone(5,12)==314.15926535897927",
      "assert volume_cone(10,15)==1570.7963267948965",
      "assert volume_cone(19,17)==6426.651371693521"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      55
    ],
    "generation_times": [
      0.16643905639648438
    ]
  },
  {
    "task_id": 313,
    "prompt": "Write a python function to print positive numbers in a list.\ndef pos_nos(list1):\r",
    "generated_codes": [
      "def pos_nos(list1):\r\n    for i in list1:\r\n        if i > 0:\r"
    ],
    "test_cases": [
      "assert pos_nos([-1,-2,1,2]) == 1,2",
      "assert pos_nos([3,4,-5]) == 3,4",
      "assert pos_nos([-2,-3,1]) == 1"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      60
    ],
    "generation_times": [
      0.19732975959777832
    ]
  },
  {
    "task_id": 314,
    "prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\ndef max_sum_rectangular_grid(grid, n) : \r",
    "generated_codes": [
      "def max_sum_rectangular_grid(grid, n) : \r\n    dp = [[0 for i in range(n)] for j in range(2)]\r\n    dp[0][0] = grid[0]\r\n    dp[-1][-1] = 0\r\n    for i, row in enumerate(grid): \r\n        for j, col in enumerate(row): \r\n            if i == 0: \r\n                dp[i][j] = col \r\n            elif j == 1: \r\n               dp[i][-1]=col+dp[i-1][0]\r\n            else: \r\n                 dp[i] [j]  = max(dp[i-2][j-1],dp[i][0]) + col \r\n    return max(dp[-1])"
    ],
    "test_cases": [
      "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7",
      "assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24",
      "assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      448
    ],
    "generation_times": [
      1.4362664222717285
    ]
  },
  {
    "task_id": 315,
    "prompt": "Write a python function to find the first maximum length of even word.\ndef find_Max_Len_Even(str): \r",
    "generated_codes": [
      "def find_Max_Len_Even(str): \r\n    str = str.split() \r\n    max_len = 0\r\n    for i in range(len(str)): \r\n        if len(str[i]) % 2 == 0 and len(str) > max_len: \r\n            max_len=len(str[i])\r\n    return max_len \r"
    ],
    "test_cases": [
      "assert find_Max_Len_Even(\"python language\") == \"language\"",
      "assert find_Max_Len_Even(\"maximum even length\") == \"length\"",
      "assert find_Max_Len_Even(\"eve\") == \"-1\""
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      214
    ],
    "generation_times": [
      0.7196738719940186
    ]
  },
  {
    "task_id": 316,
    "prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array.\ndef find_last_occurrence(A, x):\r",
    "generated_codes": [
      "def find_last_occurrence(A, x):\r\n    left = 0\r\n    right = len(A) - 1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if A[mid] == x:\r\n            left = mid + 1\r\n        elif A[mid]<x:\r\n            if mid+1<len(A) and A[mid+1]==x:\r\n                return mid+2\r\n            else:\r\n                left =mid+1\r\n        else:\r\n            right = mid-1\r\nreturn -1"
    ],
    "test_cases": [
      "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3",
      "assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9",
      "assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      384
    ],
    "generation_times": [
      1.0240752696990967
    ]
  },
  {
    "task_id": 317,
    "prompt": "Write a function to reflect the modified run-length encoding from a list.\ndef modified_encode(alist):\r",
    "generated_codes": [
      "def modified_encode(alist):\r\n    result = []\r\n    for i in range(len(alist)):\r\n        if alist[i] == 1:\r\n            result.append([alist[i], 1])\r\n        else:\r\n            count = 1\r\n            while i + 1 < len(alist) and alist[i+1] == alist[i]:\r\n                count += 1\r\n                i += 2\r\n            result.extend([[alist[i]], count])\r\n    return result\r"
    ],
    "test_cases": [
      "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]",
      "assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']",
      "assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      370
    ],
    "generation_times": [
      1.2149157524108887
    ]
  },
  {
    "task_id": 318,
    "prompt": "Write a python function to find the maximum volume of a cuboid with given sum of sides.\ndef max_volume (s): \r",
    "generated_codes": [
      "def max_volume (s): \r\n    max_volume = 0\r\n    for i in range(1, s + 1): \r\n        for j in range(i, s+1):  # loop through all possible values of length \r\n            for k in range(j, s+i-1): # loop throug all possible value of width and height \r\n                volume = i * j * k \r\n                if volume > max_volume: \r\n                    max_volume=volume \r\n    return max_volume \r"
    ],
    "test_cases": [
      "assert max_volume(8) == 18",
      "assert max_volume(4) == 2",
      "assert max_volume(1) == 0"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      389
    ],
    "generation_times": [
      1.1021242141723633
    ]
  },
  {
    "task_id": 319,
    "prompt": "Write a function to find all five characters long word in the given string by using regex.\ndef find_long_word(text):\r",
    "generated_codes": [
      "def find_long_word(text):\r\n    pattern = r'\\b\\w{5}\\b'\r\n    matches = re.findall(pattern, text)\r\n    return matches"
    ],
    "test_cases": [
      "assert find_long_word('Please move back to strem') == ['strem']",
      "assert find_long_word('4K Ultra HD streaming player') == ['Ultra']",
      "assert find_long_word('Streaming Media Player') == ['Media']"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      114
    ],
    "generation_times": [
      0.7268097400665283
    ]
  },
  {
    "task_id": 320,
    "prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\ndef sum_difference(n):\r",
    "generated_codes": [
      "def sum_difference(n):\r\n    return (n*(n+1)*(2*n+1)//6)**2 - (n**2*(n**3+3*n**2+n)//6)"
    ],
    "test_cases": [
      "assert sum_difference(12)==5434",
      "assert sum_difference(20)==41230",
      "assert sum_difference(54)==2151270"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      86
    ],
    "generation_times": [
      0.3627195358276367
    ]
  },
  {
    "task_id": 321,
    "prompt": "Write a function to find the demlo number for the given number.\ndef find_demlo(s): \r",
    "generated_codes": [
      "def find_demlo(s): \r\n    pass\r"
    ],
    "test_cases": [
      "assert find_demlo(\"111111\") == '12345654321'",
      "assert find_demlo(\"1111\") == '1234321'",
      "assert find_demlo(\"13333122222\") == '123456789101110987654321'"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      30
    ],
    "generation_times": [
      0.6419310569763184
    ]
  },
  {
    "task_id": 322,
    "prompt": "Write a function to find all index positions of the minimum values in a given list.\ndef position_min(list1):\r",
    "generated_codes": [
      "def position_min(list1):\r\n    min = list1[0]\r\n    for i in range(len(list1)):\r\n        if list1[i] < min:\r\n            min = i\r\n    return min"
    ],
    "test_cases": [
      "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]",
      "assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]",
      "assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      142
    ],
    "generation_times": [
      0.34409427642822266
    ]
  },
  {
    "task_id": 323,
    "prompt": "Write a function to re-arrange the given array in alternating positive and negative items.\ndef right_rotate(arr, n, out_of_place, cur):\r",
    "generated_codes": [
      "def right_rotate(arr, n, out_of_place, cur):\r\n    if cur == n:\r\n        return arr\r\n    else:\r\n        out_of = arr[cur]\r\n        arr[cur] = arr[n - 1]\r\n        n -= 1\r\n        arr[n] = out_of\r\n        return right_rotate(out_of_place + arr, n + 1, out, cur + 2)"
    ],
    "test_cases": [
      "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]",
      "assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]",
      "assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      262
    ],
    "generation_times": [
      0.676231861114502
    ]
  },
  {
    "task_id": 324,
    "prompt": "Write a function to extract the sum of alternate chains of tuples.\ndef sum_of_alternates(test_tuple):\r",
    "generated_codes": [
      "def sum_of_alternates(test_tuple):\r\n    return sum([test_tuple[i] for i in range(0, len(test_tuple), 2)])"
    ],
    "test_cases": [
      "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)",
      "assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)",
      "assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      105
    ],
    "generation_times": [
      0.23825383186340332
    ]
  },
  {
    "task_id": 325,
    "prompt": "Write a python function to find the minimum number of squares whose sum is equal to a given number.\ndef get_Min_Squares(n):\r",
    "generated_codes": [
      "def get_Min_Squares(n):\r\n    if n == 0:\r\n        return 0\r\n    elif n < 0:\r\n        return -1\r\n    else:\r\n        for i in range(1, int(n**0.5)+1):\r\n            if n % i == 1:\r\n                return 1 + get_Min_squares(n-i)\r\n            elif n % (i*i) == 2:\r\n                if n/i == i:\r\n                    return 2 + get_min_squares(i*i)\r\n                else:\r\n                    break\r\n            else:\r\n                continue\r\n        return n"
    ],
    "test_cases": [
      "assert get_Min_Squares(6) == 3",
      "assert get_Min_Squares(2) == 2",
      "assert get_Min_Squares(4) == 1"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      454
    ],
    "generation_times": [
      1.1030936241149902
    ]
  },
  {
    "task_id": 326,
    "prompt": "Write a function to get the word with most number of occurrences in the given strings list.\ndef most_occurrences(test_list):\r",
    "generated_codes": [
      "def most_occurrences(test_list):\r\n    return test_list[0]"
    ],
    "test_cases": [
      "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'",
      "assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'",
      "assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      57
    ],
    "generation_times": [
      0.14122247695922852
    ]
  },
  {
    "task_id": 327,
    "prompt": "Write a function to print check if the triangle is isosceles or not.\ndef check_isosceles(x,y,z):\r",
    "generated_codes": [
      "def check_isosceles(x,y,z):\r\n    if x==y and y==z:\r\n        return True\r\n    else:\r\n        return False"
    ],
    "test_cases": [
      "assert check_isosceles(6,8,12)==False ",
      "assert check_isosceles(6,6,12)==True",
      "assert check_isosceles(6,16,20)==False"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      104
    ],
    "generation_times": [
      0.22515082359313965
    ]
  },
  {
    "task_id": 328,
    "prompt": "Write a function to rotate a given list by specified number of items to the left direction.\ndef rotate_left(list1,m,n):\r",
    "generated_codes": [
      "def rotate_left(list1,m,n):\r\n    for i in range(m):\r\n        temp=list1[n]\r\n        for j in range(n-1,-1,-m):\r\n            list1[j]=list1[j+1]\r\n        list1[0]=temp\r\n    return list1\r"
    ],
    "test_cases": [
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]",
      "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      185
    ],
    "generation_times": [
      0.7160689830780029
    ]
  },
  {
    "task_id": 329,
    "prompt": "Write a python function to count negative numbers in a list.\ndef neg_count(list):\r",
    "generated_codes": [
      "def neg_count(list):\r\n    count = 0\r\n    for i in list:\r\n        if i < 0:\r\n            count += 1\r\n    return count"
    ],
    "test_cases": [
      "assert neg_count([-1,-2,3,-4,-5]) == 4",
      "assert neg_count([1,2,3]) == 0",
      "assert neg_count([1,2,-3,-10,20]) == 2"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      116
    ],
    "generation_times": [
      0.6344513893127441
    ]
  },
  {
    "task_id": 330,
    "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex.\ndef find_char(text):\r",
    "generated_codes": [
      "def find_char(text):\r\n    pattern = r'\\b\\w{3}\\b|\\b\\W{4}\\b'  # Define the regex pattern for finding words of length 3 and 4\r\n    return re.findall(pattern, text)"
    ],
    "test_cases": [
      "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']",
      "assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']",
      "assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      160
    ],
    "generation_times": [
      0.4644782543182373
    ]
  },
  {
    "task_id": 331,
    "prompt": "Write a python function to count unset bits of a given number.\ndef count_unset_bits(n): \r",
    "generated_codes": [
      "def count_unset_bits(n): \r\n    count = 0\r\n    while n: \r\n        count += n & 1\r\n        n >>= 1\r"
    ],
    "test_cases": [
      "assert count_unset_bits(2) == 1",
      "assert count_unset_bits(4) == 2",
      "assert count_unset_bits(6) == 1"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      97
    ],
    "generation_times": [
      0.3731708526611328
    ]
  },
  {
    "task_id": 332,
    "prompt": "Write a function to count character frequency of a given string.\ndef char_frequency(str1):\r",
    "generated_codes": [
      "def char_frequency(str1):\r\n    str1 = str1.lower()\r\n    dict1 = {}\r\n    for i in str1:\r\n        if i not in dict1:\r\n            dict1[i] = 1\r\n        else:\r\n            dict2 = dict1.get(i)\r\n            dict3 = dict2 + 1\r"
    ],
    "test_cases": [
      "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}",
      "assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}",
      "assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      221
    ],
    "generation_times": [
      0.6414554119110107
    ]
  },
  {
    "task_id": 333,
    "prompt": "Write a python function to sort a list according to the second element in sublist.\ndef Sort(sub_li): \r",
    "generated_codes": [
      "def Sort(sub_li): \r\n    sub_li.sort(key=lambda x: x[1]) \r\n    return sub_li\r"
    ],
    "test_cases": [
      "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]",
      "assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]",
      "assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      76
    ],
    "generation_times": [
      0.39331698417663574
    ]
  },
  {
    "task_id": 334,
    "prompt": "Write a python function to check whether the triangle is valid or not if sides are given.\ndef check_Validity(a,b,c):  \r",
    "generated_codes": [
      "def check_Validity(a,b,c):  \r\n    if (a+b>c) and (b+c>a) and(c+a>b):  \r\n    else:  \r\n        return \"Invalid Triangle\"  \r"
    ],
    "test_cases": [
      "assert check_Validity(1,2,3) == False",
      "assert check_Validity(2,3,5) == False",
      "assert check_Validity(7,10,5) == True"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      121
    ],
    "generation_times": [
      0.6183888912200928
    ]
  },
  {
    "task_id": 335,
    "prompt": "Write a function to find the sum of arithmetic progression.\ndef ap_sum(a,n,d):\r",
    "generated_codes": [
      "def ap_sum(a,n,d):\r\n    return (a+(n-1)*d)/2"
    ],
    "test_cases": [
      "assert ap_sum(1,5,2)==25",
      "assert ap_sum(2,6,4)==72",
      "assert ap_sum(1,4,5)==34"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      44
    ],
    "generation_times": [
      0.1302499771118164
    ]
  },
  {
    "task_id": 336,
    "prompt": "Write a function to check whether the given month name contains 28 days or not.\ndef check_monthnum(monthname1):\r",
    "generated_codes": [
      "def check_monthnum(monthname1):\r\n    if monthname1 in ['january', 'february', 'march', 'april', 'may', 'june', 'september', 'october', 'november', \r\n    'december']:\r\n        return True\r"
    ],
    "test_cases": [
      "assert check_monthnum(\"February\")==True",
      "assert check_monthnum(\"January\")==False",
      "assert check_monthnum(\"March\")==False"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      187
    ],
    "generation_times": [
      0.6865043640136719
    ]
  },
  {
    "task_id": 337,
    "prompt": "Write a function that matches a word at the end of a string, with optional punctuation.\ndef text_match_word(text):\r",
    "generated_codes": [
      "def text_match_word(text):\r\n    \"\"\"\r\n        This function takes a string as input and returns True if the string ends with a word, otherwise False.\r\n        A word is defined as a sequence of alphanumeric characters. The function also handles optional punctuation\r\n        at the beginning or end of the string.\r\n    \"\"\"\r\n    if text[-1].isalnum():\r\n        return True\r\n    elif all(char.isalnum() for char in text):\r\n        return len(text) > 0\r\n    else:\r\n        return False"
    ],
    "test_cases": [
      "assert text_match_word(\"python.\")==('Found a match!')",
      "assert text_match_word(\"python.\")==('Found a match!')",
      "assert text_match_word(\"  lang  .\")==('Not matched!')"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      481
    ],
    "generation_times": [
      1.2839221954345703
    ]
  },
  {
    "task_id": 338,
    "prompt": "Write a python function to count the number of substrings with same first and last characters.\ndef check_Equality(s): \r",
    "generated_codes": [
      "def check_Equality(s): \r\n    if len(s) < 2: \r\n        return False\r\n    else: \r\n         return s[0] == s[-1] \r"
    ],
    "test_cases": [
      "assert count_Substring_With_Equal_Ends('aba') == 4",
      "assert count_Substring_With_Equal_Ends('abcab') == 7",
      "assert count_Substring_With_Equal_Ends('abc') == 3"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      111
    ],
    "generation_times": [
      0.910027027130127
    ]
  },
  {
    "task_id": 339,
    "prompt": "Write a python function to find the maximum occuring divisor in an interval.\ndef find_Divisor(x,y):  \r",
    "generated_codes": [
      "def find_Divisor(x,y):  \r\n    max=0\r\n    for i in range(1,x+1): \r\n        if x%i==0 and y%i== 0: \r\n            if max<i: \r\n                max=i\r\n    return max\r"
    ],
    "test_cases": [
      "assert find_Divisor(2,2) == 2",
      "assert find_Divisor(2,5) == 2",
      "assert find_Divisor(5,10) == 2"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      161
    ],
    "generation_times": [
      0.7171125411987305
    ]
  },
  {
    "task_id": 340,
    "prompt": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.\ndef sum_three_smallest_nums(lst):\r",
    "generated_codes": [
      "def sum_three_smallest_nums(lst):\r\n    lst.sort()\r\n    return sum(lst[:3])"
    ],
    "test_cases": [
      "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37",
      "assert sum_three_smallest_nums([1,2,3,4,5]) == 6",
      "assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      74
    ],
    "generation_times": [
      0.1239011287689209
    ]
  },
  {
    "task_id": 341,
    "prompt": "Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\r",
    "generated_codes": [
      "def set_to_tuple(s):\r\n    return tuple(sorted(s))"
    ],
    "test_cases": [
      "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)",
      "assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)",
      "assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      49
    ],
    "generation_times": [
      0.4030494689941406
    ]
  },
  {
    "task_id": 342,
    "prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n    def __init__(self, value, list_num, index):\r",
    "generated_codes": [
      "    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        if index == 0:\r\n            self.index = 0\r\n        else:\r\n            self.list_index = index - 1\r\nclass Solution:\r\n    def smallestRange(self, nums):\r\n        \"\"\"\r\n        :type nums: List[List[int]]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        min_value_list = []\r\n        max_value_list=[]\r\n        for num in nums:\r\n            min_value,num = min(num,min_value,num)\r\n            max_value,num= max(num,max_value,num)\r\n            min_val = min(min_value,max_value)\r\n            max_val = max(min_value,nums[0][1])\r\n            if len(min_value_list) == 2:\r\n                if max_val - min_value <= max_value-list[nums[0]]:\r\n                    min_value=min_value\r\n                    max_value=max_value\r\n            else:\r\n                min_value=num\r\n                max_value=num\r\n                min_val=min(min_value,list[nums.index(min_value)])\r\n                max_val=max(max_value,list[0])\r\n            min_min_value = min_value\r\n        min_val_list = []\r\n        for i, num in enumerate(nums):\r\n            min_num, max_num = min(i, num), max(i, nums[0])\r\n            min_list = [min_num, nums[min_num]]\r\n            max_list = list(max"
    ],
    "test_cases": [
      "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)",
      "assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)",
      "assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      1280
    ],
    "generation_times": [
      4.931270360946655
    ]
  },
  {
    "task_id": 343,
    "prompt": "Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\r",
    "generated_codes": [
      "def dig_let(s):\r\n    count = 0\r\n    for i in s:\r\n        if i.isalpha():\r\n            count += 1\r\n    return count\n---\nYou can use `len`:\r\n    def dig_lett(s):\r\n        return len([i for i, c in enumerate(s) if c.isalpha()])"
    ],
    "test_cases": [
      "assert dig_let(\"python\")==(6,0)",
      "assert dig_let(\"program\")==(7,0)",
      "assert dig_let(\"python3.0\")==(6,2)"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      224
    ],
    "generation_times": [
      0.605797529220581
    ]
  },
  {
    "task_id": 344,
    "prompt": "Write a python function to find number of elements with odd factors in a given range.\ndef count_Odd_Squares(n,m): \r",
    "generated_codes": [
      "def count_Odd_Squares(n,m): \r\n    count = 0\r\n    for i in range(n,m+1):\r\n        if i%2 != 0:\r\n            for j in range(1,i+1):\r\n                if i % j == 0:\r\n                    count += 1\r\n    return count\r"
    ],
    "test_cases": [
      "assert count_Odd_Squares(5,100) == 8",
      "assert count_Odd_Squares(8,65) == 6",
      "assert count_Odd_Squares(2,5) == 1"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      212
    ],
    "generation_times": [
      0.854534387588501
    ]
  },
  {
    "task_id": 345,
    "prompt": "Write a function to find the difference between two consecutive numbers in a given list.\ndef diff_consecutivenums(nums):\r",
    "generated_codes": [
      "def diff_consecutivenums(nums):\r\n    if len(nums) < 2:\r\n        return None\r\n    return nums[1] - nums[0]"
    ],
    "test_cases": [
      "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]",
      "assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]",
      "assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      105
    ],
    "generation_times": [
      0.25415587425231934
    ]
  },
  {
    "task_id": 346,
    "prompt": "Write a function to find entringer number e(n, k).\ndef zigzag(n, k): \r",
    "generated_codes": [
      "def zigzag(n, k): \r\n    if n == 1: \r\n        return 0 \r\n    elif n % 2 == 0: \r\n         return zigzag((n // 2), k) + (k * 2) \r\n    else: \r\n       return zigzag((n - 1) // 4, k)"
    ],
    "test_cases": [
      "assert zigzag(4, 3) == 5",
      "assert zigzag(4, 2) == 4",
      "assert zigzag(3, 1) == 1"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      176
    ],
    "generation_times": [
      0.7157731056213379
    ]
  },
  {
    "task_id": 347,
    "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n): \r",
    "generated_codes": [
      "def count_Squares(m,n): \r\n    if m < 1 or n < 0: \r\n        return 0\r\n    else: \r\n        return (m-1)*(n-1) + count_Square(m-2, n-1)+count_Square(n-2,m-1)\r"
    ],
    "test_cases": [
      "assert count_Squares(4,3) == 20",
      "assert count_Squares(1,2) == 2",
      "assert count_Squares(2,2) == 5"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      155
    ],
    "generation_times": [
      0.7186963558197021
    ]
  },
  {
    "task_id": 348,
    "prompt": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\ndef bin_coff(n, r): \r",
    "generated_codes": [
      "def bin_coff(n, r): \r\n    if n == 0: \r\n        return 1\r\n    if r == 1 or r == n: \r\n         return 2\r\n    return bin_cff(n - 1, r) + bin_coff(n - r, r)\r\ndef count_sequences(n, k): \r\n    return sum(bin_coff(i, k) for i in range(n + 1))"
    ],
    "test_cases": [
      "assert find_ways(4) == 2",
      "assert find_ways(6) == 5",
      "assert find_ways(8) == 14"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      235
    ],
    "generation_times": [
      0.832998514175415
    ]
  },
  {
    "task_id": 349,
    "prompt": "Write a python function to check whether the given string is a binary string or not.\ndef check(string) :\r",
    "generated_codes": [
      "def check(string) :\r\n    if len(string) == 0 :\r\n        return False\r\n    for i in range(len(string)) :\r\n        if string[i] != '0' and string[i]!= '1' :\r\n            return False\r\n        else :\r\n            continue\r\n    return True\r"
    ],
    "test_cases": [
      "assert check(\"01010101010\") == \"Yes\"",
      "assert check(\"name0\") == \"No\"",
      "assert check(\"101\") == \"Yes\""
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      236
    ],
    "generation_times": [
      0.614046573638916
    ]
  },
  {
    "task_id": 350,
    "prompt": "Write a python function to minimize the length of the string by removing occurrence of only one character.\ndef minimum_Length(s) : \r",
    "generated_codes": [
      "def minimum_Length(s) : \r\n    s = list(s)\r\n    for i in range(len(s)):\r\n        if s.count(s[i]) == 1:\r\n            s.remove(s[i])\r\n    return ''.join(s)\r"
    ],
    "test_cases": [
      "assert minimum_Length(\"mnm\") == 1",
      "assert minimum_Length(\"abcda\") == 3",
      "assert minimum_Length(\"abcb\") == 2"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      154
    ],
    "generation_times": [
      0.5269396305084229
    ]
  },
  {
    "task_id": 351,
    "prompt": "Write a python function to find the first element occurring k times in a given array.\ndef first_Element(arr,n,k): \r",
    "generated_codes": [
      "def first_Element(arr,n,k): \r\n    for i in range(n): \r\n        if arr[i] == k: \r\n            return i\r\n    return -1\r"
    ],
    "test_cases": [
      "assert first_Element([0,1,2,3,4,5],6,1) == 0",
      "assert first_Element([1,2,1,3,4],5,2) == 1",
      "assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      117
    ],
    "generation_times": [
      1.3843753337860107
    ]
  },
  {
    "task_id": 352,
    "prompt": "Write a python function to check whether all the characters in a given string are unique.\ndef unique_Characters(str):\r",
    "generated_codes": [
      "def unique_Characters(str):\r\n    str = str.lower()\r\n    unique_chars = set()\r\n    for char in str:\r\n        if char.isalpha():\r\n            if char in unique_chars:\r\n                return False\r\n            else:\r\n                unique_chars.add(char)\r\n    return True"
    ],
    "test_cases": [
      "assert unique_Characters('aba') == False",
      "assert unique_Characters('abc') == True",
      "assert unique_Characters('abab') == False"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      270
    ],
    "generation_times": [
      0.6411511898040771
    ]
  },
  {
    "task_id": 353,
    "prompt": "Write a function to remove a specified column from a given nested list.\ndef remove_column(list1, n):\r",
    "generated_codes": [
      "def remove_column(list1, n):\r\n    \"\"\"Remove the nth column from the nested list.\"\"\"\r\n    if not isinstance(list1[0], list):\r\n        return [remove_column(item, n) for item in list1]\r\n    else:\r\n        return [[remove_column(sublist, n)\r"
    ],
    "test_cases": [
      "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]",
      "assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]",
      "assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      238
    ],
    "generation_times": [
      0.655095100402832
    ]
  },
  {
    "task_id": 354,
    "prompt": "Write a function to find t-nth term of arithemetic progression.\ndef tn_ap(a,n,d):\r",
    "generated_codes": [
      "def tn_ap(a,n,d):\r\n    return (a+(n-1)*d)"
    ],
    "test_cases": [
      "assert tn_ap(1,5,2)==9",
      "assert tn_ap(2,6,4)==22",
      "assert tn_ap(1,4,5)==16"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      41
    ],
    "generation_times": [
      0.5538372993469238
    ]
  },
  {
    "task_id": 355,
    "prompt": "Write a python function to count the number of rectangles in a circle of radius r.\ndef count_Rectangles(radius):  \r",
    "generated_codes": [
      "def count_Rectangles(radius):  \r\n    rectangle_count = 0\r\n    for x1 in range(0, radius + 1):\r\n        for y1 in [x1]:  # y1 is fixed at x1\r\n            for x2 in range(x1 + 2, radius - 1):  # x2 is fixed between x1 and radius -1\r\n                for y2 in [y1]:\r\n                    if x2 > x1:  # Ensure x2 >= x1 to form a valid rectangle\r\n                        rectangle_count += 1\r\n    return rectangle_count"
    ],
    "test_cases": [
      "assert count_Rectangles(2) == 8",
      "assert count_Rectangles(1) == 1",
      "assert count_Rectangles(0) == 0"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      414
    ],
    "generation_times": [
      1.426819086074829
    ]
  },
  {
    "task_id": 356,
    "prompt": "Write a function to find the third angle of a triangle using two angles.\ndef find_angle(a,b):\r",
    "generated_codes": [
      "def find_angle(a,b):\r\n    return 180-(a+b)"
    ],
    "test_cases": [
      "assert find_angle(47,89)==44",
      "assert find_angle(45,95)==40",
      "assert find_angle(50,40)==90"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      42
    ],
    "generation_times": [
      0.11330223083496094
    ]
  },
  {
    "task_id": 357,
    "prompt": "Write a function to find the maximum element of all the given tuple records.\ndef find_max(test_list):\r",
    "generated_codes": [
      "def find_max(test_list):\r\n    max_element = test_list[0]\r\n    for i in range(1, len(test_list)):\r\n        if test_list[i] > max_element:\r\n            max_element=test_list[i]\r\n    return max_element\n---\nYou can use `max()` function:\r\n    def find_max(lst):\r\n        return max(lst)\r\nIf you want to use `list comprehension` instead of `for` loop, you can do it like this:\r\n        def find_min(lst):\r\n            return max([x for x in lst])"
    ],
    "test_cases": [
      "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10",
      "assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11",
      "assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      440
    ],
    "generation_times": [
      1.0450892448425293
    ]
  },
  {
    "task_id": 358,
    "prompt": "Write a function to find modulo division of two lists using map and lambda function.\ndef moddiv_list(nums1,nums2):\r",
    "generated_codes": [
      "def moddiv_list(nums1,nums2):\r\n    return list(map(lambda x,y: (x % y), nums1, nums2))"
    ],
    "test_cases": [
      "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]",
      "assert moddiv_list([3,2],[1,4])==[0, 2]",
      "assert moddiv_list([90,120],[50,70])==[40, 50]"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      86
    ],
    "generation_times": [
      0.20102667808532715
    ]
  },
  {
    "task_id": 359,
    "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.\ndef Check_Solution(a,b,c): \r",
    "generated_codes": [
      "def Check_Solution(a,b,c): \r\n    d = (b**2) - (4*a*c) \r\n    if d < 0: \r\n        return False\r\n    else: \r\n        if d == 0:\r\n            x1 = (-b + math.sqrt(d)) / (2*a)\r\n            x2 = (- b - math.sqrt( d )) / ( 2 * a ) \r\n            if x1 == x2: \r\n                return True\r\n            else: \r\r\n                return False\r\r\rprint(Check_Solution(1,2,3))"
    ],
    "test_cases": [
      "assert Check_Solution(1,3,2) == \"Yes\"",
      "assert Check_Solution(1,2,3) == \"No\"",
      "assert Check_Solution(1,-5,6) == \"No\""
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      362
    ],
    "generation_times": [
      1.2875134944915771
    ]
  },
  {
    "task_id": 360,
    "prompt": "Write a function to find the n’th carol number.\ndef get_carol(n): \r",
    "generated_codes": [
      "def get_carol(n): \r\n    if n == 1: \r\n        return \"1\" \r\n    else: \r\n         return str(int(get_carol(int(n/2)))+int(get_caroll(int(n-1)/2)))"
    ],
    "test_cases": [
      "assert get_carol(2) == 7",
      "assert get_carol(4) == 223",
      "assert get_carol(5) == 959"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      143
    ],
    "generation_times": [
      0.4163057804107666
    ]
  },
  {
    "task_id": 361,
    "prompt": "Write a function to remove empty lists from a given list of lists.\ndef remove_empty(list1):\r",
    "generated_codes": [
      "def remove_empty(list1):\r\n    return [x for x in list1 if x]"
    ],
    "test_cases": [
      "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']",
      "assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']",
      "assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      60
    ],
    "generation_times": [
      0.13850831985473633
    ]
  },
  {
    "task_id": 362,
    "prompt": "Write a python function to find the item with maximum occurrences in a given list.\ndef max_occurrences(nums):\r",
    "generated_codes": [
      "def max_occurrences(nums):\r\n    counts = {}\r\n    for num in nums:\r\n        if num in counts:\r\n            counts[num] += 1\r\n    max_count = max(counts.values())\r\n    max_element = [num for num, count in counts.items() if count == max_count]\r\n    return max_element"
    ],
    "test_cases": [
      "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2",
      "assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0",
      "assert max_occurrences([1,2,3,1,2,4,1]) == 1"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      264
    ],
    "generation_times": [
      1.2980766296386719
    ]
  },
  {
    "task_id": 363,
    "prompt": "Write a function to add the k elements to each element in the tuple.\ndef add_K_element(test_list, K):\r",
    "generated_codes": [
      "def add_K_element(test_list, K):\r\n    for i in range(len(test_list)):\r\n        test_list[i] += K\r\n    return test_list"
    ],
    "test_cases": [
      "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]",
      "assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]",
      "assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      118
    ],
    "generation_times": [
      0.22344684600830078
    ]
  },
  {
    "task_id": 364,
    "prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\ndef make_flip(ch): \r",
    "generated_codes": [
      "def make_flip(ch): \r\n    if ch == '0': \r\n        return 1\r\n    else: \r\n        if ch[0] != ch[-1]: \r\n            return 2 + make_flip('0') \r\n        else: \r\r\nThe function `make_flip` takes a single character `ch` as input and returns the number flips required. Here's how it works:\n1. **Base Case**: If the character is `'0'`, it means the current bit is already flipped, so no additional flips are needed. Therefore, the function returns `1`.\n2. **Recursive Case**: For any other character (`'1'`), the function checks if the first and last bits of the string are different. If they are not, it means we need to flip both bits to make them alternate. In this case, the number flipped is `2` plus the result of calling `makeFlip` on `'0',` which represents flipping the next bit.\nHere's the complete implementation:\n```python\ndef makeFlip(ch):\n    if (ch == '1'):\n        if (not (ch[0]==ch[-1])):\n            return (2+makeFlip('0'))\n        else:\n            return makeFlip('1')\n    else:\n        return (1)"
    ],
    "test_cases": [
      "assert min_flip_to_make_string_alternate(\"0001010111\") == 2",
      "assert min_flip_to_make_string_alternate(\"001\") == 1",
      "assert min_flip_to_make_string_alternate(\"010111011\") == 2 "
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      1010
    ],
    "generation_times": [
      3.3757247924804688
    ]
  },
  {
    "task_id": 365,
    "prompt": "Write a python function to count the number of digits of a given number.\ndef count_Digit(n):\r",
    "generated_codes": [
      "def count_Digit(n):\r\n    count = 0\r\n    while n > 0:\r\n        n //= 10\r\n        count += 1\r\n    return count\r"
    ],
    "test_cases": [
      "assert count_Digit(12345) == 5",
      "assert count_Digit(11223305) == 8",
      "assert count_Digit(4123459) == 7"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      109
    ],
    "generation_times": [
      0.5731980800628662
    ]
  },
  {
    "task_id": 366,
    "prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\ndef adjacent_num_product(list_nums):\r",
    "generated_codes": [
      "def adjacent_num_product(list_nums):\r\n    max_product = 0\r\n    for i in range(len(list_nums) - 1):\r\n        product = list_nums[i] * list_nums [i + 1]\r\n        if product > max_product:\r\n            max_product=product\r\n    return max_product"
    ],
    "test_cases": [
      "assert adjacent_num_product([1,2,3,4,5,6]) == 30",
      "assert adjacent_num_product([1,2,3,4,5]) == 20",
      "assert adjacent_num_product([2,3]) == 6"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      242
    ],
    "generation_times": [
      0.5297317504882812
    ]
  },
  {
    "task_id": 367,
    "prompt": "Write a function to check if a binary tree is balanced or not.\n\tdef __init__(self, data): \r",
    "generated_codes": [
      "\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef isBalanced(root):\r\n    return isBalTree(root)\r\ndef isPalTree(root):\r\n\tif root == None:\r\n\t\treturn True\r\n\tif abs(leftHeight - rightHeight) > 1:\r\n\t\treturn False\r\n\telse:\r\n\t    return isPal(tree)\r\ndef leftHeight(root):\r\n\theight = 0\r\n\twhile root != None:\r\n\t    height += 1\r\n\t    root = root.left\r\n\treturn height\r\ndef rightHeight(root):\r\n\theight =0\r\n\troot = root.right\r\n\twhile (root != None):\r\n\t\theight += 2\r\n\t\troot =root.right\r\n\treturn 2*height"
    ],
    "test_cases": [
      "assert is_tree_balanced(root) == False",
      "assert is_tree_balanced(root1) == True",
      "assert is_tree_balanced(root2) == False "
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      533
    ],
    "generation_times": [
      1.4702730178833008
    ]
  },
  {
    "task_id": 368,
    "prompt": "Write a function to repeat the given tuple n times.\ndef repeat_tuples(test_tup, N):\r",
    "generated_codes": [
      "def repeat_tuples(test_tup, N):\r\n    result = []\r\n    for i in range(N):\r\n        result.append(test_t up)\r\n    return result\r"
    ],
    "test_cases": [
      "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))",
      "assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))",
      "assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      126
    ],
    "generation_times": [
      0.49132370948791504
    ]
  },
  {
    "task_id": 369,
    "prompt": "Write a function to find the lateral surface area of cuboid\ndef lateralsurface_cuboid(l,w,h):\r",
    "generated_codes": [
      "def lateralsurface_cuboid(l,w,h):\r\n    return 2*(l*w+h*w+l*h)\r"
    ],
    "test_cases": [
      "assert lateralsurface_cuboid(8,5,6)==156",
      "assert lateralsurface_cuboid(7,9,10)==320",
      "assert lateralsurface_cuboid(10,20,30)==1800"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      62
    ],
    "generation_times": [
      0.2909996509552002
    ]
  },
  {
    "task_id": 370,
    "prompt": "Write a function to sort a tuple by its float element.\ndef float_sort(price):\r",
    "generated_codes": [
      "def float_sort(price):\r\n    price.sort(key=lambda x: float(x))\r\n    return price"
    ],
    "test_cases": [
      "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] ",
      "assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] ",
      "assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] "
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      80
    ],
    "generation_times": [
      0.1417708396911621
    ]
  },
  {
    "task_id": 371,
    "prompt": "Write a function to find the smallest missing element in a sorted array.\ndef smallest_missing(A, left_element, right_element):\r",
    "generated_codes": [
      "def smallest_missing(A, left_element, right_element):\r\n    if A[left_element] == left_element:\r\n        return A[right_element]\r\n    elif A[right - 1] == right_element:\r\n       return A[left - 2]\r\n    else:\r\n        return left_element + 1\r"
    ],
    "test_cases": [
      "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7",
      "assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3",
      "assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      240
    ],
    "generation_times": [
      0.8841071128845215
    ]
  },
  {
    "task_id": 372,
    "prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.\ndef heap_assending(nums):\r",
    "generated_codes": [
      "def heap_assending(nums):\r\n    import heapq\r\n    heapq.heapify(nums)\r\n    return nums"
    ],
    "test_cases": [
      "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]",
      "assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
      "assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      85
    ],
    "generation_times": [
      0.14825034141540527
    ]
  },
  {
    "task_id": 373,
    "prompt": "Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\r",
    "generated_codes": [
      "def volume_cuboid(l,w,h):\r\n    return l*w*h\ndef sum_list(lst):\r\n    total = 0\r\n    for num in lst:\r\n        total += num\r\n    return total\r\ndef max_value(lst):\r\n  if not lst:\r\n      return None\r\n  else:\r\n      max_num = lst[0]\r\n      for num1 in lst[1:]:\r\n          if num1 > max_num:\r\n              max_num=num1\r\n      return max_num"
    ],
    "test_cases": [
      "assert volume_cuboid(1,2,3)==6",
      "assert volume_cuboid(5,7,9)==315",
      "assert volume_cuboid(10,15,21)==3150"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      334
    ],
    "generation_times": [
      1.198068380355835
    ]
  },
  {
    "task_id": 374,
    "prompt": "Write a function to print all permutations of a given string including duplicates.\ndef permute_string(str):\r",
    "generated_codes": [
      "def permute_string(str):\r\n    if len(str) == 0:\r\n        return []\r\n    elif len(str)==1:\r\n        return [str]\r\n    else:\r\n        result = []\r\n        for i in range(len(str)):\r\n            char = str[i]\r\n            rest = str[:i]+str[i+1:]\r\n            for p in permute(rest):\r\n                result.append(char+p)\r\n        permute_str = permute(result)\r\n    return permute_result"
    ],
    "test_cases": [
      "assert permute_string('ab')==['ab', 'ba']",
      "assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']",
      "assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      385
    ],
    "generation_times": [
      1.0631358623504639
    ]
  },
  {
    "task_id": 375,
    "prompt": "Write a function to round the given number to the nearest multiple of a specific number.\ndef round_num(n,m):\r",
    "generated_codes": [
      "def round_num(n,m):\r\n    return int(n/m) * m"
    ],
    "test_cases": [
      "assert round_num(4722,10)==4720",
      "assert round_num(1111,5)==1110",
      "assert round_num(219,2)==218"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      44
    ],
    "generation_times": [
      0.5329804420471191
    ]
  },
  {
    "task_id": 376,
    "prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\ndef remove_replica(test_tup):\r",
    "generated_codes": [
      "def remove_replica(test_tup):\r\n    new_tup = []\r\n    for i in test_tup:\r\n        if i not in new_tups:\r\n            new_tupe.append(i)\r\n    return new_tupe\r"
    ],
    "test_cases": [
      "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')",
      "assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')",
      "assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      156
    ],
    "generation_times": [
      0.7619524002075195
    ]
  },
  {
    "task_id": 377,
    "prompt": "Write a python function to remove all occurrences of a character in a given string.\ndef remove_Char(s,c) :  \r",
    "generated_codes": [
      "def remove_Char(s,c) :  \r\n    return s.replace(c,'')"
    ],
    "test_cases": [
      "assert remove_Char(\"aba\",'a') == \"b\"",
      "assert remove_Char(\"toggle\",'g') == \"tole\"",
      "assert remove_Char(\"aabbc\",'b') == \"aac\""
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      52
    ],
    "generation_times": [
      0.09008455276489258
    ]
  },
  {
    "task_id": 378,
    "prompt": "Write a python function to shift last element to first position in the given list.\ndef move_first(test_list):\r",
    "generated_codes": [
      "def move_first(test_list):\r\n    test_list[-1], test_list[0] = test_list [0], test list [-1]\r\n    return test_list\r"
    ],
    "test_cases": [
      "assert move_first([1,2,3,4]) == [4,1,2,3]",
      "assert move_first([0,1,2,3]) == [3,0,1,2]",
      "assert move_first([9,8,7,1]) == [1,9,8,7]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      114
    ],
    "generation_times": [
      0.5076596736907959
    ]
  },
  {
    "task_id": 379,
    "prompt": "Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\r",
    "generated_codes": [
      "def surfacearea_cuboid(l,w,h):\r\n    return 2*(l*w + w*h + h*l)"
    ],
    "test_cases": [
      "assert surfacearea_cuboid(1,2,3)==22",
      "assert surfacearea_cuboid(5,7,9)==286",
      "assert surfacearea_cuboid(10,15,21)==1350"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      62
    ],
    "generation_times": [
      0.15508794784545898
    ]
  },
  {
    "task_id": 380,
    "prompt": "Write a function to generate a two-dimensional array.\ndef multi_list(rownum,colnum):\r",
    "generated_codes": [
      "def multi_list(rownum,colnum):\r\n    return [[i for i in range(colnum)] for j in range(rownum)]\r"
    ],
    "test_cases": [
      "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] ",
      "assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]",
      "assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      95
    ],
    "generation_times": [
      0.281172513961792
    ]
  },
  {
    "task_id": 381,
    "prompt": "Write a function to sort a list of lists by a given index of the inner list.\ndef index_on_inner_list(list_data, index_no):\r",
    "generated_codes": [
      "def index_on_inner_list(list_data, index_no):\r\n    sorted_list = sorted(list_data,key=lambda x: x[index_no])\r\n    return sorted_list"
    ],
    "test_cases": [
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]",
      "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      132
    ],
    "generation_times": [
      0.36498451232910156
    ]
  },
  {
    "task_id": 382,
    "prompt": "Write a function to find the number of rotations in a circularly sorted array.\ndef find_rotation_count(A):\r",
    "generated_codes": [
      "def find_rotation_count(A):\r\n    n = len(A)\r\n    for i in range(n):\r\n        if A[i] > A[(i + 1) % n]:\r\n            return i\r\n    return -1\r"
    ],
    "test_cases": [
      "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3",
      "assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3",
      "assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      140
    ],
    "generation_times": [
      0.7188901901245117
    ]
  },
  {
    "task_id": 383,
    "prompt": "Write a python function to toggle all odd bits of a given number.\ndef even_bit_toggle_number(n) : \r",
    "generated_codes": [
      "def even_bit_toggle_number(n) : \r\n    res = 0\r\n    temp = n \r\n    count = 1\r\n    while (temp > 0) : \r\n        if (temp % 2 == 1) : \r\n            res = res | (count) \r\n        temp = temp >> 1 \r\n        count = count << 1\r\nn = 56 \r\neven_bit_toggle_n = even_bit(n) \r"
    ],
    "test_cases": [
      "assert even_bit_toggle_number(10) == 15",
      "assert even_bit_toggle_number(20) == 1",
      "assert even_bit_toggle_number(30) == 11"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      264
    ],
    "generation_times": [
      1.224656343460083
    ]
  },
  {
    "task_id": 384,
    "prompt": "Write a python function to find the frequency of the smallest value in a given array.\ndef frequency_Of_Smallest(n,arr): \r",
    "generated_codes": [
      "def frequency_Of_Smallest(n,arr): \r\n    min = arr[0]\r\n    count = 0\r\n    for i in range(0,len(arr)):\r\n        if arr[i] < min:\r\n            min =arr[i]\r\n            count =1\r\n        elif arr[i]==min:\r\n            count+=1\r\n    return count"
    ],
    "test_cases": [
      "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1",
      "assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1",
      "assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      240
    ],
    "generation_times": [
      0.6005415916442871
    ]
  },
  {
    "task_id": 385,
    "prompt": "Write a function to find the n'th perrin number using recursion.\ndef get_perrin(n):\r",
    "generated_codes": [
      "def get_perrin(n):\r\n    if n == 0:\r\n        return 2\r\n    elif n ==1:\r\n        return (3)\r"
    ],
    "test_cases": [
      "assert get_perrin(9) == 12",
      "assert get_perrin(4) == 2",
      "assert get_perrin(6) == 5"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      90
    ],
    "generation_times": [
      0.3987600803375244
    ]
  },
  {
    "task_id": 386,
    "prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\ndef swap_count(s):\r",
    "generated_codes": [
      "def swap_count(s):\r\n    count = 0\r\n    open_brackets = 1\r\n    close_brackets= 0\r\n    for i in range(len(s)):\r\n        if s[i] == '(':\r\n            open_bracketss+=1\r\n        elif s[i]==')':\r\n            close_bracket +=1\r\n            if open_bracets==close_brackets:\r\n                count+=1\r\n                open_braces-=1\r\n                close_braces+=1\r\n    return count"
    ],
    "test_cases": [
      "assert swap_count(\"[]][][\") == 2",
      "assert swap_count(\"[[][]]\") == 0",
      "assert swap_count(\"[[][]]][\") == 1"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      375
    ],
    "generation_times": [
      0.9368815422058105
    ]
  },
  {
    "task_id": 387,
    "prompt": "Write a python function to check whether the hexadecimal number is even or odd.\ndef even_or_odd(N): \r",
    "generated_codes": [
      "def even_or_odd(N): \r\n    return N % 2 == 0\r"
    ],
    "test_cases": [
      "assert even_or_odd(\"AB3454D\") ==\"Odd\"",
      "assert even_or_odd(\"ABC\") == \"Even\"",
      "assert even_or_odd(\"AAD\") == \"Odd\""
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      44
    ],
    "generation_times": [
      0.2300264835357666
    ]
  },
  {
    "task_id": 388,
    "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n): \r",
    "generated_codes": [
      "def highest_Power_of_2(n): \r\n    if n == 0: \r\n        return 0\r\n    else: \r\n         while n % 2 == 1: \r\n             n = n // 2 \r\n         return n \r"
    ],
    "test_cases": [
      "assert highest_Power_of_2(10) == 8",
      "assert highest_Power_of_2(19) == 16",
      "assert highest_Power_of_2(32) == 32"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      150
    ],
    "generation_times": [
      0.6026854515075684
    ]
  },
  {
    "task_id": 389,
    "prompt": "Write a function to find the n'th lucas number.\ndef find_lucas(n): \r",
    "generated_codes": [
      "def find_lucas(n): \r\n    if n == 0: \r\n        return 2\r\n    elif n ==1: \r\n         return 1\r\n    else: \r\n       return find_lucas(n-1) + find_lucs(n-2)\r"
    ],
    "test_cases": [
      "assert find_lucas(9) == 76",
      "assert find_lucas(4) == 7",
      "assert find_lucas(3) == 4"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      152
    ],
    "generation_times": [
      0.5371174812316895
    ]
  },
  {
    "task_id": 390,
    "prompt": "Write a function to insert a given string at the beginning of all items in a list.\ndef add_string(list,string):\r",
    "generated_codes": [
      "def add_string(list,string):\r\n    new_list = [string] + list\r\n    return new_list"
    ],
    "test_cases": [
      "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
      "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
      "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      81
    ],
    "generation_times": [
      0.1502823829650879
    ]
  },
  {
    "task_id": 391,
    "prompt": "Write a function to convert more than one list to nested dictionary.\ndef convert_list_dictionary(l1, l2, l3):\r",
    "generated_codes": [
      "def convert_list_dictionary(l1, l2, l3):\r\n    return {l1[i]:{l2[i]:l3[i]} for i in range(len(l1))}"
    ],
    "test_cases": [
      "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
      "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
      "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      98
    ],
    "generation_times": [
      0.2587776184082031
    ]
  },
  {
    "task_id": 392,
    "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef get_max_sum (n):\r",
    "generated_codes": [
      "def get_max_sum (n):\r\n    if n == 1:\r\n        return 0\r\n    elif n ==2:\r\n        if n%2==0:\r\n            return n\r\n        else:\r\n            if n % 3 == 0:\r\n                return n\r\n            else:\r\n                return 2*n\r\n    else:\r\n        result = max((get_max_sum(n//2)+get_maxSum(n//3)+getMaxSum(n // 4)+get_MaxSum(n / 5), n))\r\n        return result"
    ],
    "test_cases": [
      "assert get_max_sum(60) == 106",
      "assert get_max_sum(10) == 12",
      "assert get_max_sum(2) == 2"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      362
    ],
    "generation_times": [
      0.9967310428619385
    ]
  },
  {
    "task_id": 393,
    "prompt": "Write a function to find the list with maximum length using lambda function.\ndef max_length_list(input_list):\r",
    "generated_codes": [
      "def max_length_list(input_list):\r\n    return max(input_list, key=len)"
    ],
    "test_cases": [
      "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
      "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
      "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      69
    ],
    "generation_times": [
      0.10910534858703613
    ]
  },
  {
    "task_id": 394,
    "prompt": "Write a function to check if given tuple is distinct or not.\ndef check_distinct(test_tup):\r",
    "generated_codes": [
      "def check_distinct(test_tup):\r\n    for i in range(len(test_tups)):\r\n        if test_tups[i] == test_tup:\r\n            return False\r\n    return True"
    ],
    "test_cases": [
      "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
      "assert check_distinct((1, 4, 5, 6)) == True",
      "assert check_distinct((2, 3, 4, 5, 6)) == True"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      147
    ],
    "generation_times": [
      0.2978324890136719
    ]
  },
  {
    "task_id": 395,
    "prompt": "Write a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\r",
    "generated_codes": [
      "def first_non_repeating_character(str1):\r\n    char_count = {}\r\n    for char in str1:\r\n        if char in char_count:\r\n            char_count[char] += 1\r\n        else:\r\n            charCount[char] = 1\r\n    for i in range(len(str1)):\r\n        if str1[i] not in charCount or charCount[str1[i]] == 1:\r\n            return str1 [i]\r\n    return None"
    ],
    "test_cases": [
      "assert first_non_repeating_character(\"abcabc\") == None",
      "assert first_non_repeating_character(\"abc\") == \"a\"",
      "assert first_non_repeating_character(\"ababc\") == \"c\""
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      342
    ],
    "generation_times": [
      0.7991862297058105
    ]
  },
  {
    "task_id": 396,
    "prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex.\ndef check_char(string): \r",
    "generated_codes": [
      "def check_char(string): \r\n    if string[0] == string[-1]: \r\n        return True \r"
    ],
    "test_cases": [
      "assert check_char(\"abba\") == \"Valid\"",
      "assert check_char(\"a\") == \"Valid\"",
      "assert check_char(\"abcd\") == \"Invalid\""
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      81
    ],
    "generation_times": [
      0.41738009452819824
    ]
  },
  {
    "task_id": 397,
    "prompt": "Write a function to find the median of three specific numbers.\ndef median_numbers(a,b,c):\r",
    "generated_codes": [
      "def median_numbers(a,b,c):\r\n    if a <= b and a <= c:\r\n        return a\r\n    elif b <= a and b <= c:\r\n        return b\r\n    else:\r\n        if c <= a:\r\n            return c\r\n        else:\r\n            if c < b:\r\n                return c\r\n            else:\r\n                if c > b:\r\n                    return b"
    ],
    "test_cases": [
      "assert median_numbers(25,55,65)==55.0",
      "assert median_numbers(20,10,30)==20.0",
      "assert median_numbers(15,45,75)==45.0"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      311
    ],
    "generation_times": [
      0.6918103694915771
    ]
  },
  {
    "task_id": 398,
    "prompt": "Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\r",
    "generated_codes": [
      "def sum_of_digits(nums):\r\n    return [sum(map(int, str(num))) for num in nums]"
    ],
    "test_cases": [
      "assert sum_of_digits([10,2,56])==14",
      "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
      "assert sum_of_digits([10,20,-4,5,-70])==19"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      78
    ],
    "generation_times": [
      0.1688528060913086
    ]
  },
  {
    "task_id": 399,
    "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.\ndef bitwise_xor(test_tup1, test_tup2):\r",
    "generated_codes": [
      "def bitwise_xor(test_tup1, test_tup2):\r\n    result = []\r\n    for i in range(len(test_tip1)):\r\n        result.append(test_ttip1[i] ^ test_ttip2[i])\r\n    return result"
    ],
    "test_cases": [
      "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
      "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
      "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      165
    ],
    "generation_times": [
      0.8294985294342041
    ]
  },
  {
    "task_id": 400,
    "prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective.\ndef extract_freq(test_list):\r",
    "generated_codes": [
      "def extract_freq(test_list):\r\n    freq_dict = {}\r\n    for item in test_list:\r\n        if item not in freq_dict:\r\n            freq_dict[item] = 1\r\n        else:\r\n            freq = freq_dict.get(item)\r\n            freq += 1\r\n        freq_dict.update({item: freq})\r\n    return freq_dict"
    ],
    "test_cases": [
      "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
      "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
      "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      284
    ],
    "generation_times": [
      0.6399812698364258
    ]
  },
  {
    "task_id": 401,
    "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef add_nested_tuples(test_tup1, test_tup2):\r",
    "generated_codes": [
      "def add_nested_tuples(test_tup1, test_tup2):\r\n    return (a + b for a, b in zip(test_tups1,  test_tups2))"
    ],
    "test_cases": [
      "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
      "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
      "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      105
    ],
    "generation_times": [
      0.23434901237487793
    ]
  },
  {
    "task_id": 402,
    "prompt": "Write a function to compute the value of ncr%p.\ndef ncr_modp(n, r, p): \r",
    "generated_codes": [
      "def ncr_modp(n, r, p): \r\n    if (n < r): \r\n        return 0\r\n    if ((n == r) or (r == 0)): \r\n        return (1 if (r==0) else 1)\r\n    if (((n - r) % p) == 1): \r\n       return (n * (n - 1) * ( n - 2) * ... * 1 ) % p\r\n    return ( n * ( (n- 1)*( n -2) ... * ( 1 - r)) % p ) %p\r"
    ],
    "test_cases": [
      "assert ncr_modp(10,2,13)==6",
      "assert ncr_modp(15,12,43)==25",
      "assert ncr_modp(17,9,18)==10"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      276
    ],
    "generation_times": [
      1.8583884239196777
    ]
  },
  {
    "task_id": 403,
    "prompt": "Write a function to check if a url is valid or not using regex.\ndef is_valid_URL(str):\r",
    "generated_codes": [
      "def is_valid_URL(str):\r\n    import re\r\n    pattern = r'^(https?://)?([a-zA-Z0-9-]+\\.)+[a-zA-z]{2,6}(/.*)?$'\r\n    return bool(re.match(pattern, str))"
    ],
    "test_cases": [
      "assert is_valid_URL(\"https://www.google.com\") == True",
      "assert is_valid_URL(\"https:/www.gmail.com\") == False",
      "assert is_valid_URL(\"https:// www.redit.com\") == False"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      148
    ],
    "generation_times": [
      0.4566946029663086
    ]
  },
  {
    "task_id": 404,
    "prompt": "Write a python function to find the minimum of two numbers.\ndef minimum(a,b):   \r",
    "generated_codes": [
      "def minimum(a,b):   \r\n    if a<b:\r\n        return a\r\n    else:\r\n        return b"
    ],
    "test_cases": [
      "assert minimum(1,2) == 1",
      "assert minimum(-5,-4) == -5",
      "assert minimum(0,0) == 0"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      80
    ],
    "generation_times": [
      0.1826620101928711
    ]
  },
  {
    "task_id": 405,
    "prompt": "Write a function to check whether an element exists within a tuple.\ndef check_tuplex(tuplex,tuple1): \r",
    "generated_codes": [
      "def check_tuplex(tuplex,tuple1): \r\n    if tuplex in tuple1: \r\n        return True\r\n    else: \r\n         return False\r"
    ],
    "test_cases": [
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
      "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      117
    ],
    "generation_times": [
      0.6299128532409668
    ]
  },
  {
    "task_id": 406,
    "prompt": "Write a python function to find the parity of a given number.\ndef find_Parity(x): \r",
    "generated_codes": [
      "def find_Parity(x): \r\n    if x % 2 == 0: \r\n    else: \r\nx = int(input(\"Enter a number: \")) \r\nfind_Parity (x)"
    ],
    "test_cases": [
      "assert find_Parity(12) == \"Even Parity\"",
      "assert find_Parity(7) == \"Odd Parity\"",
      "assert find_Parity(10) == \"Even Parity\""
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      107
    ],
    "generation_times": [
      0.43793463706970215
    ]
  },
  {
    "task_id": 407,
    "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n):\r",
    "generated_codes": [
      "def rearrange_bigger(n):\r\n    digits = [int(d) for d in str(n)]\r\n    for i in range(len(digits) - 1, 0, -1):\r\n        if digits[i] < digits[i -  1]:\r\n            break\r\n    else:\r\n        return None\r"
    ],
    "test_cases": [
      "assert rearrange_bigger(12)==21",
      "assert rearrange_bigger(10)==False",
      "assert rearrange_bigger(102)==120"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      200
    ],
    "generation_times": [
      1.8994097709655762
    ]
  },
  {
    "task_id": 408,
    "prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k):\r",
    "generated_codes": [
      "def k_smallest_pairs(nums1, nums2, k):\r\n    result = []\r\n    for i in range(len(nums1)):\r\n        for j in range(i + 1, len(nums1) + 2):\r\n            if j > len(nums2):\r\n                break\r\n            pair = (nums1[i], nums2[j])\r\n            result.append(pair)\r\n    return sorted(result)[:k]"
    ],
    "test_cases": [
      "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
      "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      296
    ],
    "generation_times": [
      0.8747985363006592
    ]
  },
  {
    "task_id": 409,
    "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.\ndef min_product_tuple(list1):\r",
    "generated_codes": [
      "def min_product_tuple(list1):\r\n    min_product = float('inf')\r\n    for i in range(len(list1)):\r\n        for j in range(i+1, len(list1)):\r\n            if list1[i][0] * list1[j][0]<min_product:\r\n                min_product=list1[i]\r\n    return min_product"
    ],
    "test_cases": [
      "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
      "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
      "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      253
    ],
    "generation_times": [
      0.5950400829315186
    ]
  },
  {
    "task_id": 410,
    "prompt": "Write a function to find the minimum value in a given heterogeneous list.\ndef min_val(listval):\r",
    "generated_codes": [
      "def min_val(listval):\r\n    if len(listval) == 0:\r\n        return None\r\n    else:\r\n        min = listval[0]\r\n        for i in range(1, len(listvalue)):\r\n            if listvalue[i] < min:\r\n                min = min\r\n            else:\r\n                pass\r\n        return min"
    ],
    "test_cases": [
      "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
      "assert min_val(['Python', 15, 20, 25])==15",
      "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      274
    ],
    "generation_times": [
      0.594428300857544
    ]
  },
  {
    "task_id": 411,
    "prompt": "Write a function to convert the given snake case string to camel case string by using regex.\ndef snake_to_camel(word):\r",
    "generated_codes": [
      "def snake_to_camel(word):\r\n    return word.replace('_', '').capitalize()"
    ],
    "test_cases": [
      "assert snake_to_camel('android_tv') == 'AndroidTv'",
      "assert snake_to_camel('google_pixel') == 'GooglePixel'",
      "assert snake_to_camel('apple_watch') == 'AppleWatch'"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      72
    ],
    "generation_times": [
      0.09457230567932129
    ]
  },
  {
    "task_id": 412,
    "prompt": "Write a python function to remove odd numbers from a given list.\ndef remove_odd(l):\r",
    "generated_codes": [
      "def remove_odd(l):\r\n    return [x for x in l if x % 2 == 0]"
    ],
    "test_cases": [
      "assert remove_odd([1,2,3]) == [2]",
      "assert remove_odd([2,4,6]) == [2,4,6]",
      "assert remove_odd([10,20,3]) == [10,20]"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      59
    ],
    "generation_times": [
      0.17657876014709473
    ]
  },
  {
    "task_id": 413,
    "prompt": "Write a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\r",
    "generated_codes": [
      "def extract_nth_element(list1, n):\r\n    return list1[n][0]"
    ],
    "test_cases": [
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
      "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      58
    ],
    "generation_times": [
      0.09976720809936523
    ]
  },
  {
    "task_id": 414,
    "prompt": "Write a python function to check whether the value exists in a sequence or not.\ndef overlapping(list1,list2):  \r",
    "generated_codes": [
      "def overlapping(list1,list2):  \r\n    for i in list1:  \r\n        if i in  list2:  \r\n            return True\r\n    return False"
    ],
    "test_cases": [
      "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
      "assert overlapping([1,2,3],[4,5,6]) == False",
      "assert overlapping([1,4,5],[1,4,5]) == True"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      124
    ],
    "generation_times": [
      0.245222806930542
    ]
  },
  {
    "task_id": 415,
    "prompt": "Write a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr): \r",
    "generated_codes": [
      "def max_Product(arr): \r\n    max_product = min_product = arr[0]\r\n    for i in range(1, len(arr)): \r\n        if arr[i] > max_product: \r\n            max_product, min_product= arr[i], max_product\r\n        elif arr[i]>min_product: \r\r\n            max_prod, min_prod = arr[i]\r\n            max_produce = max(max_product, max_product*arr[i])\r\n            min_product=min(min_product, arr[i]*min_product)\r\n    return max_product\r"
    ],
    "test_cases": [
      "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
      "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
      "assert max_Product([1,2,3]) == (2,3)"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      419
    ],
    "generation_times": [
      1.19136643409729
    ]
  },
  {
    "task_id": 416,
    "prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\ndef breakSum(n): \r",
    "generated_codes": [
      "def breakSum(n): \r\n    if n == 0: \r\n        return 0\r\n    elif n ==1: \r\n         return 1\r\n    else: \r\n       return max(n + breakSum(int(n/3)) + breaksum(int(n%3)), n + breakSUm(int(n//2)) +breakSum(int((n-1)//2)))"
    ],
    "test_cases": [
      "assert breakSum(12) == 13",
      "assert breakSum(24) == 27",
      "assert breakSum(23) == 23"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      215
    ],
    "generation_times": [
      0.6850509643554688
    ]
  },
  {
    "task_id": 417,
    "prompt": "Write a function to find common first element in given list of tuple.\ndef group_tuples(Input): \r",
    "generated_codes": [
      "def group_tuples(Input): \r\n    return [tuple(x) for x in Input if len(x)==1] "
    ],
    "test_cases": [
      "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
      "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]",
      "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      77
    ],
    "generation_times": [
      0.3220827579498291
    ]
  },
  {
    "task_id": 418,
    "prompt": "Write a python function to find the sublist having maximum length.\ndef Find_Max(lst): \r",
    "generated_codes": [
      "def Find_Max(lst): \r\n    max = lst[0] \r\n    for i in range(1, len(lst)): \r\n        if (lst[i] > max): \r\n            max = max\r\n    return max\r"
    ],
    "test_cases": [
      "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
      "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
      "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      142
    ],
    "generation_times": [
      0.9406774044036865
    ]
  },
  {
    "task_id": 419,
    "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef round_and_sum(list1):\r",
    "generated_codes": [
      "def round_and_sum(list1):\r\n    rounded_list = [round(num) for num in list1]\r\n    total_sum = sum(rounded_list)\r\n    return total_sum, len(list1)\r"
    ],
    "test_cases": [
      "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
      "assert round_and_sum([5,2,9,24.3,29])==345",
      "assert round_and_sum([25.0,56.7,89.2])==513"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      145
    ],
    "generation_times": [
      0.791609525680542
    ]
  },
  {
    "task_id": 420,
    "prompt": "Write a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \r",
    "generated_codes": [
      "def cube_Sum(n): \r\n    return (n*(n+1)*(2*n+1)/3) \r"
    ],
    "test_cases": [
      "assert cube_Sum(2) == 72",
      "assert cube_Sum(3) == 288",
      "assert cube_Sum(4) == 800"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      51
    ],
    "generation_times": [
      0.36155104637145996
    ]
  },
  {
    "task_id": 421,
    "prompt": "Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\r",
    "generated_codes": [
      "def concatenate_tuple(test_tup):\r\n    return tuple([str(x) + test_tup[0] for x in test_tups])"
    ],
    "test_cases": [
      "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
      "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
      "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      93
    ],
    "generation_times": [
      0.22041010856628418
    ]
  },
  {
    "task_id": 422,
    "prompt": "Write a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):  \r",
    "generated_codes": [
      "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n+1):\r\n        sum += (i**3)\r\n    return sum/n\r"
    ],
    "test_cases": [
      "assert find_Average_Of_Cube(2) == 4.5",
      "assert find_Average_Of_Cube(3) == 12",
      "assert find_Average_Of_Cube(1) == 1"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      114
    ],
    "generation_times": [
      0.516232967376709
    ]
  },
  {
    "task_id": 423,
    "prompt": "Write a function to solve gold mine problem.\ndef get_maxgold(gold, m, n): \r",
    "generated_codes": [
      "def get_maxgold(gold, m, n): \r\n    max_gold = 0\r\n    for i in range(m):\r\n        for j in range(n):\r\n            if gold[i][j] == 0:\r\n                continue\r\n            else:\r\n                max_gold += gold[i-1][j-1] + gold[i+1][n-1-j] + \\\r\n                            gold[i+j-1]\r\n    return max_gold"
    ],
    "test_cases": [
      "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16",
      "assert get_maxgold([[10,20],[30,40]],2,2)==70",
      "assert get_maxgold([[4,9],[3,7]],2,2)==13"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      306
    ],
    "generation_times": [
      0.8003964424133301
    ]
  },
  {
    "task_id": 424,
    "prompt": "Write a function to extract only the rear index element of each string in the given tuple.\ndef extract_rear(test_tuple):\r",
    "generated_codes": [
      "def extract_rear(test_tuple):\r\n    return [item[-1] for item in test_tuple]"
    ],
    "test_cases": [
      "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
      "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']",
      "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      75
    ],
    "generation_times": [
      0.3478586673736572
    ]
  },
  {
    "task_id": 425,
    "prompt": "Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x): \r",
    "generated_codes": [
      "def count_element_in_list(list1, x): \r\n    count = 0\r\n    for i in list1: \r\n        if i == x: \r\n            count += 1\r\n    return count\r"
    ],
    "test_cases": [
      "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
      "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
      "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      138
    ],
    "generation_times": [
      0.6980679035186768
    ]
  },
  {
    "task_id": 426,
    "prompt": "Write a function to filter odd numbers using lambda function.\ndef filter_oddnumbers(nums):\r",
    "generated_codes": [
      "def filter_oddnumbers(nums):\r\n    return list(filter(lambda x: x % 2 != 0, nums))"
    ],
    "test_cases": [
      "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
      "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
      "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      81
    ],
    "generation_times": [
      0.19051432609558105
    ]
  },
  {
    "task_id": 427,
    "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\ndef change_date_format(dt):\r",
    "generated_codes": [
      "def change_date_format(dt):\r\n    pattern = r'\\d{4}-\\d{2}-\\w+'\r\ndate_str = \"2023-10-05\"\r\nnew_date_str = change_date_pattern(date_str)\r"
    ],
    "test_cases": [
      "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
      "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
      "assert change_date_format(\"2021-04-26\") == '26-04-2021'"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      133
    ],
    "generation_times": [
      0.8748352527618408
    ]
  },
  {
    "task_id": 428,
    "prompt": "Write a function to sort the given array by using shell sort.\ndef shell_sort(my_list):\r",
    "generated_codes": [
      "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(mylist)):\r\n            temp = mylist[i]\r\n            j = i\r\n            while j >= gap and mylist[j - gap] > temp:\r\n                mylist [j] = my_list[j -gap]\r\n                j -= gap\r\n            mylist[ j ] = temp\r\n        gap //= 2"
    ],
    "test_cases": [
      "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
      "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
      "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      344
    ],
    "generation_times": [
      0.845761775970459
    ]
  },
  {
    "task_id": 429,
    "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.\ndef and_tuples(test_tup1, test_tup2):\r",
    "generated_codes": [
      "def and_tuples(test_tup1, test_tup2):\r\n    return (test_tup[0] * test_tu[1], test_tupe[0])"
    ],
    "test_cases": [
      "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
      "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
      "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      90
    ],
    "generation_times": [
      0.2255113124847412
    ]
  },
  {
    "task_id": 430,
    "prompt": "Write a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c): \r",
    "generated_codes": [
      "def parabola_directrix(a, b, c): \r\n    focus = (a, b) \r\n    vertex = (0, 0) \r\n    if a > 0: \r\n        directix = (-b / (2 * a)) \r\n    else: \r\n         directix= (b / (-2 *a)) \r\n     return directix"
    ],
    "test_cases": [
      "assert parabola_directrix(5,3,2)==-198",
      "assert parabola_directrix(9,8,4)==-2336",
      "assert parabola_directrix(2,4,6)==-130"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      197
    ],
    "generation_times": [
      0.8550400733947754
    ]
  },
  {
    "task_id": 431,
    "prompt": "Write a function that takes two lists and returns true if they have at least one common element.\ndef common_element(list1, list2):\r",
    "generated_codes": [
      "def common_element(list1, list2):\r\n    for i in list1:\r\n        if i in  list2:\r\n            return True\r\n    return False"
    ],
    "test_cases": [
      "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
      "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
      "assert common_element(['a','b','c'], ['d','b','e'])==True"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      122
    ],
    "generation_times": [
      0.25608158111572266
    ]
  },
  {
    "task_id": 432,
    "prompt": "Write a function to find the median of a trapezium.\ndef median_trapezium(base1,base2,height):\r",
    "generated_codes": [
      "def median_trapezium(base1,base2,height):\r\n    area = (base1 + base2) * height / 2\r\n    median_length = (area / (base2 - base1)) ** 0.5\r\n    return median_length"
    ],
    "test_cases": [
      "assert median_trapezium(15,25,35)==20",
      "assert median_trapezium(10,20,30)==15",
      "assert median_trapezium(6,9,4)==7.5"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      161
    ],
    "generation_times": [
      0.5788793563842773
    ]
  },
  {
    "task_id": 433,
    "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.\ndef check_greater(arr, number):\r",
    "generated_codes": [
      "def check_greater(arr, number):\r\n    for i in range(len(arr)):\r\n        if arr[i] > number:\r\n            return True\r\n    return False"
    ],
    "test_cases": [
      "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'",
      "assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'",
      "assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      134
    ],
    "generation_times": [
      0.9399206638336182
    ]
  },
  {
    "task_id": 434,
    "prompt": "Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\r",
    "generated_codes": [
      "def text_match_one(text):\r\n    if \"a\" in text and \"b\" in [x for x in text if x == \"b\"]:\r\n        return True\r"
    ],
    "test_cases": [
      "assert text_match_one(\"ac\")==('Not matched!')",
      "assert text_match_one(\"dc\")==('Not matched!')",
      "assert text_match_one(\"abba\")==('Found a match!')"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      109
    ],
    "generation_times": [
      0.33713459968566895
    ]
  },
  {
    "task_id": 435,
    "prompt": "Write a python function to find the last digit of a given number.\ndef last_Digit(n) :\r",
    "generated_codes": [
      "def last_Digit(n) :\r\n    return n % 10\r"
    ],
    "test_cases": [
      "assert last_Digit(123) == 3",
      "assert last_Digit(25) == 5",
      "assert last_Digit(30) == 0"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      39
    ],
    "generation_times": [
      0.3184034824371338
    ]
  },
  {
    "task_id": 436,
    "prompt": "Write a python function to print negative numbers in a list.\ndef neg_nos(list1):\r",
    "generated_codes": [
      "def neg_nos(list1):\r\n    for i in range(len(list1)):\r\n        if list1[i] < 0:\r\nlist1 = [-2, -3, -4, -5, -6]\r\nneg_nos (list1)"
    ],
    "test_cases": [
      "assert neg_nos([-1,4,5,-6]) == -1,-6",
      "assert neg_nos([-1,-2,3,4]) == -1,-2",
      "assert neg_nos([-7,-6,8,9]) == -7,-6"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      125
    ],
    "generation_times": [
      0.49077749252319336
    ]
  },
  {
    "task_id": 437,
    "prompt": "Write a function to remove odd characters in a string.\ndef remove_odd(str1):\r",
    "generated_codes": [
      "def remove_odd(str1):\r\n    str2 = \"\"\r\n    for i in range(len(str1)):\r\n        if i % 2 == 0:\r\n            str2 += str1[i]\r\n    return str2\r"
    ],
    "test_cases": [
      "assert remove_odd(\"python\")==(\"yhn\")",
      "assert remove_odd(\"program\")==(\"rga\")",
      "assert remove_odd(\"language\")==(\"agae\")"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      139
    ],
    "generation_times": [
      0.429675817489624
    ]
  },
  {
    "task_id": 438,
    "prompt": "Write a function to count bidirectional tuple pairs.\ndef count_bidirectional(test_list):\r",
    "generated_codes": [
      "def count_bidirectional(test_list):\r\n    bidirectional_pairs = 0\r\n    for i in range(len(test_list)):\r\n        for j in range(i+1, len(test_list)):\r\n            if test_list[i] == test_list[j]:\r\n                bidirectional_pair = (test_list[i], test_list[\r\n                    j])\r\n                bidirectionals.append(bidirectional_pair)\r\n                bidir_count += 1\r\n    return bidirectional_count"
    ],
    "test_cases": [
      "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'",
      "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'",
      "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      407
    ],
    "generation_times": [
      0.7985692024230957
    ]
  },
  {
    "task_id": 439,
    "prompt": "Write a function to convert a list of multiple integers into a single integer.\ndef multiple_to_single(L):\r",
    "generated_codes": [
      "def multiple_to_single(L):\r\n    return int(''.join(str(x) for x in L))"
    ],
    "test_cases": [
      "assert multiple_to_single([11, 33, 50])==113350",
      "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
      "assert multiple_to_single([10,15,20,25])==10152025"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      70
    ],
    "generation_times": [
      0.15218472480773926
    ]
  },
  {
    "task_id": 440,
    "prompt": "Write a function to find all adverbs and their positions in a given sentence.\ndef find_adverb_position(text):\r",
    "generated_codes": [
      "def find_adverb_position(text):\r\n    words = text.split()\r\n    adverbs = []\r\n    for i, word in enumerate(words):\r\n        if word.lower().startswith('ad'):\r\n            adverbs.append(word)\r\n    return adverbs"
    ],
    "test_cases": [
      "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
      "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
      "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      210
    ],
    "generation_times": [
      0.6978940963745117
    ]
  },
  {
    "task_id": 441,
    "prompt": "Write a function to find the surface area of a cube.\ndef surfacearea_cube(l):\r",
    "generated_codes": [
      "def surfacearea_cube(l):\r\n    return 6*l**2"
    ],
    "test_cases": [
      "assert surfacearea_cube(5)==150",
      "assert surfacearea_cube(3)==54",
      "assert surfacearea_cube(10)==600"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      43
    ],
    "generation_times": [
      0.26010823249816895
    ]
  },
  {
    "task_id": 442,
    "prompt": "Write a function to find the ration of positive numbers in an array of integers.\ndef positive_count(nums):\r",
    "generated_codes": [
      "def positive_count(nums):\r\n    count = 0\r\n    for num in nums:\r\n        if num > 0:\r\n            count += 1\r\n    return count"
    ],
    "test_cases": [
      "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
      "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69",
      "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      125
    ],
    "generation_times": [
      0.28112101554870605
    ]
  },
  {
    "task_id": 443,
    "prompt": "Write a python function to find the largest negative number from the given list.\ndef largest_neg(list1): \r",
    "generated_codes": [
      "def largest_neg(list1): \r\n    largest = -999\r\n    for i in range(len(list1)): \r\n        if list1[i] < 0 and list1 [i] > largest: \r\n            largest = list1[ i ] \r\n    return largest"
    ],
    "test_cases": [
      "assert largest_neg([1,2,3,-4,-6]) == -6",
      "assert largest_neg([1,2,3,-8,-9]) == -9",
      "assert largest_neg([1,2,3,4,-1]) == -1"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      184
    ],
    "generation_times": [
      0.5422744750976562
    ]
  },
  {
    "task_id": 444,
    "prompt": "Write a function to trim each tuple by k in the given tuple list.\ndef trim_tuple(test_list, K):\r",
    "generated_codes": [
      "def trim_tuple(test_list, K):\r\n    result = []\r\n    for i in test_list:\r\n        if len(i) > K:\r\n            result.append(i)\r\n    return result"
    ],
    "test_cases": [
      "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
      "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'",
      "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      144
    ],
    "generation_times": [
      0.27559494972229004
    ]
  },
  {
    "task_id": 445,
    "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\r",
    "generated_codes": [
      "def index_multiplication(test_tup1, test_tup2):\r\n    result = []\r\n    for i in range(len(test_tups)):\r\n        result.append((test_tups[i][0] * test_tups2[i][1]))\r\n    return result\r"
    ],
    "test_cases": [
      "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
      "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
      "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      182
    ],
    "generation_times": [
      0.8362765312194824
    ]
  },
  {
    "task_id": 446,
    "prompt": "Write a python function to count the occurence of all elements of list in a tuple.\ndef count_Occurrence(tup, lst): \r",
    "generated_codes": [
      "def count_Occurrence(tup, lst): \r\n    count = 0\r\n    for i in tup: \r\n        if i in lst: \r\n            count += 1\r\n    return count\r"
    ],
    "test_cases": [
      "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
      "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6",
      "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      133
    ],
    "generation_times": [
      0.6973311901092529
    ]
  },
  {
    "task_id": 447,
    "prompt": "Write a function to find cubes of individual elements in a list using lambda function.\ndef cube_nums(nums):\r",
    "generated_codes": [
      "def cube_nums(nums):\r\n    return map(lambda x: x**3, nums)"
    ],
    "test_cases": [
      "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
      "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
      "assert cube_nums([12,15])==([1728, 3375])"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      58
    ],
    "generation_times": [
      0.13729381561279297
    ]
  },
  {
    "task_id": 448,
    "prompt": "Write a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \r",
    "generated_codes": [
      "def cal_sum(n): \r\n    if n == 1: \r\n        return 1\r\n    elif n ==2: \r\n         return 2\r\n    else: \r\n       return cal_sum( n-2) + cal_sum (n-1)"
    ],
    "test_cases": [
      "assert cal_sum(9) == 49",
      "assert cal_sum(10) == 66",
      "assert cal_sum(11) == 88"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      145
    ],
    "generation_times": [
      0.4479188919067383
    ]
  },
  {
    "task_id": 449,
    "prompt": "Write a python function to check whether the triangle is valid or not if 3 points are given.\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \r",
    "generated_codes": [
      "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    if not (all(isinstance(coord, int) for coord in [x1, y1, x2, y2, x3, y3])):\r\n        return False\r\n    side1 = ((x2 - x1)**2 + (y2 - y1)** 2)**0.5\r\n    return side1 + side2 > side3 and side1+side3>side2 and side2+side1>side3"
    ],
    "test_cases": [
      "assert check_Triangle(1,5,2,5,4,6) == 'Yes'",
      "assert check_Triangle(1,1,1,4,1,5) == 'No'",
      "assert check_Triangle(1,1,1,1,1,1) == 'No'"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      269
    ],
    "generation_times": [
      1.5658628940582275
    ]
  },
  {
    "task_id": 450,
    "prompt": "Write a function to extract specified size of strings from a give list of string values.\ndef extract_string(str, l):\r",
    "generated_codes": [
      "def extract_string(str, l):\r\n    for i in range(len(l)):\r\n        if len(l[i]) >= str:\r\nextract_string(5, [\"hello\", \"world\", \"python\", \"programming\", \"is\", \"fun\"])"
    ],
    "test_cases": [
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']",
      "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      163
    ],
    "generation_times": [
      0.43929457664489746
    ]
  },
  {
    "task_id": 451,
    "prompt": "Write a function to remove all whitespaces from the given string using regex.\ndef remove_whitespaces(text1):\r",
    "generated_codes": [
      "def remove_whitespaces(text1):\r\n    return re.sub(r'\\s+', '', text1)"
    ],
    "test_cases": [
      "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'",
      "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'",
      "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      68
    ],
    "generation_times": [
      0.1312258243560791
    ]
  },
  {
    "task_id": 452,
    "prompt": "Write a function that gives loss amount if the given amount has loss else return none.\ndef loss_amount(actual_cost,sale_amount): \r",
    "generated_codes": [
      "def loss_amount(actual_cost,sale_amount): \r\n    if actual_cost>sale_amount: \r\n        return None\r\n    else: \r\n       return actual_cost-sale_amount\r"
    ],
    "test_cases": [
      "assert loss_amount(1500,1200)==None",
      "assert loss_amount(100,200)==100",
      "assert loss_amount(2000,5000)==3000"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      149
    ],
    "generation_times": [
      0.5500161647796631
    ]
  },
  {
    "task_id": 453,
    "prompt": "Write a python function to find the sum of even factors of a number.\ndef sumofFactors(n) : \r",
    "generated_codes": [
      "def sumofFactors(n) : \r\n    res = 0\r\n    for i in range(1, n + 1): \r\n        if (n % i == 0): \r\n            res += i \r\n    return res \r"
    ],
    "test_cases": [
      "assert sumofFactors(18) == 26",
      "assert sumofFactors(30) == 48",
      "assert sumofFactors(6) == 8"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      135
    ],
    "generation_times": [
      0.5843572616577148
    ]
  },
  {
    "task_id": 454,
    "prompt": "Write a function that matches a word containing 'z'.\ndef text_match_wordz(text):\r",
    "generated_codes": [
      "def text_match_wordz(text):\r\n    return \"z\" in text\r"
    ],
    "test_cases": [
      "assert text_match_wordz(\"pythonz.\")==('Found a match!')",
      "assert text_match_wordz(\"xyz.\")==('Found a match!')",
      "assert text_match_wordz(\"  lang  .\")==('Not matched!')"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      52
    ],
    "generation_times": [
      0.3459444046020508
    ]
  },
  {
    "task_id": 455,
    "prompt": "Write a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\r",
    "generated_codes": [
      "def check_monthnumb_number(monthnum2):\r\n    if monthnum2 == 1 or monthnum == 3 or month == 5 or month==7 or month = 8 or month=10 or month=num2 ==12:\r\n    else:\r\n        return \"No\""
    ],
    "test_cases": [
      "assert check_monthnumb_number(5)==True",
      "assert check_monthnumb_number(2)==False",
      "assert check_monthnumb_number(6)==False"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      181
    ],
    "generation_times": [
      0.5214426517486572
    ]
  },
  {
    "task_id": 456,
    "prompt": "Write a function to reverse strings in a given list of string values.\ndef reverse_string_list(stringlist):\r",
    "generated_codes": [
      "def reverse_string_list(stringlist):\r\n    reversed_list = []\r\n    for i in range(len(stringlist)):\r\n        reversed_list.append(stringlist[len(stringlist) - 1 - i])\r\n    return reversed_list"
    ],
    "test_cases": [
      "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
      "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
      "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      191
    ],
    "generation_times": [
      0.3380405902862549
    ]
  },
  {
    "task_id": 457,
    "prompt": "Write a python function to find the sublist having minimum length.\ndef Find_Min(lst): \r",
    "generated_codes": [
      "def Find_Min(lst): \r\n    min = lst[0] \r\n    for i in range(len(lst)): \r\n        if len(lst[i]) < len(min): \r\n            min =lst[i] \r\n    return min"
    ],
    "test_cases": [
      "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
      "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
      "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      149
    ],
    "generation_times": [
      0.38457775115966797
    ]
  },
  {
    "task_id": 458,
    "prompt": "Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\r",
    "generated_codes": [
      "def rectangle_area(l,b):\r\n    return l*b\ndef add_numbers(a, b):\r\n    return a + b\r"
    ],
    "test_cases": [
      "assert rectangle_area(10,20)==200",
      "assert rectangle_area(10,5)==50",
      "assert rectangle_area(4,2)==8"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      82
    ],
    "generation_times": [
      0.7433691024780273
    ]
  },
  {
    "task_id": 459,
    "prompt": "Write a function to remove uppercase substrings from a given string by using regex.\ndef remove_uppercase(str1):\r",
    "generated_codes": [
      "def remove_uppercase(str1):\r\n    return re.sub(r'[A-Z]', '', str1)"
    ],
    "test_cases": [
      "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
      "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
      "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      66
    ],
    "generation_times": [
      0.14348793029785156
    ]
  },
  {
    "task_id": 460,
    "prompt": "Write a python function to get the first element of each sublist.\ndef Extract(lst): \r",
    "generated_codes": [
      "def Extract(lst): \r\n    return lst[0] \r"
    ],
    "test_cases": [
      "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
      "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
      "assert Extract([[9,8,1],[1,2]]) == [9,1]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      39
    ],
    "generation_times": [
      0.35403871536254883
    ]
  },
  {
    "task_id": 461,
    "prompt": "Write a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\r",
    "generated_codes": [
      "def upper_ctr(str):\r\n    ctr = 0\r\n    for i in str:\r\n        if i.isupper():\r\n            ctr += 1\r\n    return ctr"
    ],
    "test_cases": [
      "assert upper_ctr('PYthon') == 1",
      "assert upper_ctr('BigData') == 1",
      "assert upper_ctr('program') == 0"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      114
    ],
    "generation_times": [
      0.45662760734558105
    ]
  },
  {
    "task_id": 462,
    "prompt": "Write a function to find all possible combinations of the elements of a given list.\ndef combinations_list(list1):\r",
    "generated_codes": [
      "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r"
    ],
    "test_cases": [
      "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
      "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]",
      "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      76
    ],
    "generation_times": [
      0.5922596454620361
    ]
  },
  {
    "task_id": 463,
    "prompt": "Write a function to find the maximum product subarray of the given array.\ndef max_subarray_product(arr):\r",
    "generated_codes": [
      "def max_subarray_product(arr):\r\n    if not arr:\r\n        return 0\r\n    max_product = current_max = arr[0]\r\n    for num in arr[1:]:\r\n        current_max, max_product= max(num * current_max , num , max_product * num)\r\n    return max_product"
    ],
    "test_cases": [
      "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
      "assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ",
      "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      238
    ],
    "generation_times": [
      0.5207037925720215
    ]
  },
  {
    "task_id": 464,
    "prompt": "Write a function to check if all values are same in a dictionary.\ndef check_value(dict, n):\r",
    "generated_codes": [
      "def check_value(dict, n):\r\n    for i in dict:\r\n        if dict[i] != n:\r\n            return False\r\n    return True\r"
    ],
    "test_cases": [
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True",
      "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      115
    ],
    "generation_times": [
      0.5093364715576172
    ]
  },
  {
    "task_id": 465,
    "prompt": "Write a function to drop empty items from a given dictionary.\ndef drop_empty(dict1):\r",
    "generated_codes": [
      "def drop_empty(dict1):\r\n    return {key: value for key, value in dict1.items() if value}"
    ],
    "test_cases": [
      "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
      "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}",
      "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      88
    ],
    "generation_times": [
      0.1906113624572754
    ]
  },
  {
    "task_id": 466,
    "prompt": "Write a function to find the peak element in the given array.\ndef find_peak_util(arr, low, high, n): \r",
    "generated_codes": [
      "def find_peak_util(arr, low, high, n): \r\n    mid = (low + high) // 2 \r\n    if arr[mid] > arr[mid + 1]: \r\n        return arr[mid]\r\n    elif arr[mid - 1] >arr[mid]:\r\n        return find_peak(arr, mid + 2, high,n)\r\n    else: \r\n        if arr[0] < arr[mid]: \r\n            return find_max(arr, 0, mid - 2,n) \r\n        else: \r\r\n            return arr[n - 3]\r\r\ndef find_max(a, low ,high, n):\r\n    if low == high:\r\n        return a[low]\r\n    mid=(low+high)//2\r\n    if mid<n-1 and a[mid]>a[mid+1]:\r\n        if a[mid]<a[mid-1]:\r\n            return a[mid-2]\r\n        else:\r\n            return max(a[mid],find_max(a,mid+1,high,n))\r\n    elif mid>=n-1:\r\n        if mid>0:\r\n            if a[0]>a[1]:\r\n                return a[-1]\r\n            else:\r\n                return find_min(a,0,mid-1,n)\r\n        else :\r\n            return 0\r\n    elif low>high:\r\n        return 1\r\n    else:\r\n        mid=(high-low)//2+low\r\n        return max(find_max(a,low,mid,n),find_max( a,mid+2,high,))"
    ],
    "test_cases": [
      "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2",
      "assert find_peak([2, 3, 4, 5, 6], 5) == 4",
      "assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 "
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      965
    ],
    "generation_times": [
      3.029529094696045
    ]
  },
  {
    "task_id": 467,
    "prompt": "Write a python function to convert decimal number to octal number.\ndef decimal_to_Octal(deciNum):\r",
    "generated_codes": [
      "def decimal_to_Octal(deciNum):\r\n    if deciNum == 0:\r\n        return \"0\"\r"
    ],
    "test_cases": [
      "assert decimal_to_Octal(10) == 12",
      "assert decimal_to_Octal(2) == 2",
      "assert decimal_to_Octal(33) == 41"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      73
    ],
    "generation_times": [
      0.7075934410095215
    ]
  },
  {
    "task_id": 468,
    "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr, n ): \r",
    "generated_codes": [
      "def max_product(arr, n ): \r\n    dp = [1] * n \r\n    for i in range(1, n): \r\n        for j in range(i): \r\n            if arr[i] > arr[j]: \r\n                dp[i] = max(dp[i], dp[j] * arr[i]) \r\n    return max(dp) \r"
    ],
    "test_cases": [
      "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 ",
      "assert max_product([4, 42, 55, 68, 80], 5) == 50265600",
      "assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 "
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      211
    ],
    "generation_times": [
      0.9251396656036377
    ]
  },
  {
    "task_id": 469,
    "prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions\ndef max_profit(price, k):\r",
    "generated_codes": [
      "def max_profit(price, k):\r\n    if len(price) < 2:\r\n        return 0\r\n    n = len(price)\r\n    dp = [[0 for _ in range(k+1)] for _  in range(n)]\r\n    for i in range(1, n):\r\n        for j in range(min(k, i)):\r\n            if j == 0:\r\n                dp[i][j] = price[i] - price[j]\r\n            else:\r\n                max_profit = max(dp[i-1][j], dp[i-2][j-1])\r\n                dp_i_j = max_profit + price[i]-price[j]\r\n                dp[ i ][ j ] = max(max_profit, dp_i_ j)\r\n    return dp[n-1][-1]"
    ],
    "test_cases": [
      "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10",
      "assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7",
      "assert max_profit([10, 6, 8, 4, 2], 2) == 2"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      494
    ],
    "generation_times": [
      1.5106921195983887
    ]
  },
  {
    "task_id": 470,
    "prompt": "Write a function to find the pairwise addition of the elements of the given tuples.\ndef add_pairwise(test_tup):\r",
    "generated_codes": [
      "def add_pairwise(test_tup):\r\n    result = []\r\n    for i in range(len(test_tups)):\r\n        for j in range(i+1, len(test_tuples)):\r\n            result.append((test_tuples[i], test_tuples[j]))\r\n    return result"
    ],
    "test_cases": [
      "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
      "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
      "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      209
    ],
    "generation_times": [
      0.7756454944610596
    ]
  },
  {
    "task_id": 471,
    "prompt": "Write a python function to find remainder of array multiplication divided by n.\ndef find_remainder(arr, lens, n): \r",
    "generated_codes": [
      "def find_remainder(arr, lens, n): \r\n    res = 1\r\n    for i in range(lens): \r\n        res = (res * arr[i]) % n\r\n    return res\r"
    ],
    "test_cases": [
      "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9",
      "assert find_remainder([1,1,1],3,1) == 0",
      "assert find_remainder([1,2,1],3,2) == 0"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      126
    ],
    "generation_times": [
      0.7631103992462158
    ]
  },
  {
    "task_id": 472,
    "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l): \r",
    "generated_codes": [
      "def check_Consecutive(l): \r\n    l.sort() \r\n    if len(l) == 0: \r\n        return False\r\n    for i in range(1, len(l)): \r\n        if l[i] - l[i-1] != 1: \r\n            return False\r\n        else: \r\n             return True\r"
    ],
    "test_cases": [
      "assert check_Consecutive([1,2,3,4,5]) == True",
      "assert check_Consecutive([1,2,3,5,6]) == False",
      "assert check_Consecutive([1,2,1]) == False"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      220
    ],
    "generation_times": [
      0.8782305717468262
    ]
  },
  {
    "task_id": 473,
    "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\r",
    "generated_codes": [
      "def tuple_intersection(test_list1, test_list2):\r\n    pass\r\ntest_list1 = [1, 2, 3]\r\ntest_list2 = [4, 5, 6]\r"
    ],
    "test_cases": [
      "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
      "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}",
      "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      106
    ],
    "generation_times": [
      0.44356441497802734
    ]
  },
  {
    "task_id": 474,
    "prompt": "Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\r",
    "generated_codes": [
      "def replace_char(str1,ch,newch):\r\n    str2 = \"\"\r\n    for i in range(len(str1)):\r\n        if str1[i] == ch:\r\n            str2 += newch\r\n        else:\r\n            str1 = str1[:i]+newch+str1[i+1:]\r\n            str3 = str2 + str1\r\n    return str3\r"
    ],
    "test_cases": [
      "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
      "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
      "assert replace_char(\"python\",'l','a')==(\"python\")"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      244
    ],
    "generation_times": [
      0.9974379539489746
    ]
  },
  {
    "task_id": 475,
    "prompt": "Write a function to sort counter by value.\ndef sort_counter(dict1):\r",
    "generated_codes": [
      "def sort_counter(dict1):\r\n    dict2 = {}\r\n    for key, value in dict1.items():\r\n        if value not in dict2:\r\n            dict2[value] = [key]\r\n        else:\r\n            for i in range(len(dict2[value])):\r\n                if dict2[key][i] == key:\r\n                    dict2[dict2[key].pop(i)] = [value]\r\n                    break\r\n            else:\r\n                dict2.setdefault(value, []).append(key)\r\n    return dict2"
    ],
    "test_cases": [
      "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
      "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
      "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      426
    ],
    "generation_times": [
      0.8986070156097412
    ]
  },
  {
    "task_id": 476,
    "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.\ndef big_sum(nums):\r",
    "generated_codes": [
      "def big_sum(nums):\r\n    max_num = nums[0]\r\n    min_num = max_num\r\n    for num in nums:\r\n        if num > max_num:\r\n            max_num=num\r\n        elif num < min_num:\r\n                min_num=num\r"
    ],
    "test_cases": [
      "assert big_sum([1,2,3]) == 4",
      "assert big_sum([-1,2,3,4]) == 3",
      "assert big_sum([2,3,6]) == 8"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      197
    ],
    "generation_times": [
      0.6075494289398193
    ]
  },
  {
    "task_id": 477,
    "prompt": "Write a python function to convert the given string to lower case.\ndef is_lower(string):\r",
    "generated_codes": [
      "def is_lower(string):\r\n    return string.islower()"
    ],
    "test_cases": [
      "assert is_lower(\"InValid\") == \"invalid\"",
      "assert is_lower(\"TruE\") == \"true\"",
      "assert is_lower(\"SenTenCE\") == \"sentence\""
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      50
    ],
    "generation_times": [
      0.07664203643798828
    ]
  },
  {
    "task_id": 478,
    "prompt": "Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1):\r",
    "generated_codes": [
      "def remove_lowercase(str1):\r\n    return str1.replace('a','').replace('e','').remove('i','').remov\r"
    ],
    "test_cases": [
      "assert remove_lowercase(\"PYTHon\")==('PYTH')",
      "assert remove_lowercase(\"FInD\")==('FID')",
      "assert remove_lowercase(\"STRinG\")==('STRG')"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      98
    ],
    "generation_times": [
      0.3282737731933594
    ]
  },
  {
    "task_id": 479,
    "prompt": "Write a python function to find the first digit of a given number.\ndef first_Digit(n) :  \r",
    "generated_codes": [
      "def first_Digit(n) :  \r\n    return n // 10\r"
    ],
    "test_cases": [
      "assert first_Digit(123) == 1",
      "assert first_Digit(456) == 4",
      "assert first_Digit(12) == 1"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      43
    ],
    "generation_times": [
      0.26305127143859863
    ]
  },
  {
    "task_id": 480,
    "prompt": "Write a python function to find the maximum occurring character in a given string.\ndef get_max_occuring_char(str1):\r",
    "generated_codes": [
      "def get_max_occuring_char(str1):\r\n    char_count = {}\r\n    max_char = None\r\n    max_count = 0\r\n    for char in str1:\r\n        if char in char_count:\r\n            char_count[char] += 1\r\n        else:\r\n            char_counts[char_count[char]] = 1\r\n        if max_count < char_count.get(char, 0):\r\n            max_char, max_count= char, char_count[character]\r\n    return max_char"
    ],
    "test_cases": [
      "assert get_max_occuring_char(\"data\") == \"a\"",
      "assert get_max_occuring_char(\"create\") == \"e\"",
      "assert get_max_occuring_char(\"brilliant girl\") == \"i\""
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      377
    ],
    "generation_times": [
      1.0037410259246826
    ]
  },
  {
    "task_id": 481,
    "prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.\ndef is_subset_sum(set, n, sum):\r",
    "generated_codes": [
      "def is_subset_sum(set, n, sum):\r\n    if sum == 0:\r\n        return True\r\n    if n < 0 and sum != 0:\r\n        return False\r\n    return is_subset(sum - set[n], n - 1) or is_subset_set(set, sum, n -1)"
    ],
    "test_cases": [
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False",
      "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      196
    ],
    "generation_times": [
      0.8808774948120117
    ]
  },
  {
    "task_id": 482,
    "prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\ndef match(text): \r",
    "generated_codes": [
      "def match(text): \r\n    return re.search(r'(?<=[A-Z])([a-z])', text) "
    ],
    "test_cases": [
      "assert match(\"Geeks\") == 'Yes'",
      "assert match(\"geeksforGeeks\") == 'Yes'",
      "assert match(\"geeks\") == 'No'"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      68
    ],
    "generation_times": [
      0.38097643852233887
    ]
  },
  {
    "task_id": 483,
    "prompt": "Write a python function to find the first natural number whose factorial is divisible by x.\ndef first_Factorial_Divisible_Number(x): \r",
    "generated_codes": [
      "def first_Factorial_Divisible_Number(x): \r\n    n = 1\r\n    while True: \r\n        if (n * n) % x == 0: \r\n            return n \r"
    ],
    "test_cases": [
      "assert first_Factorial_Divisible_Number(10) == 5",
      "assert first_Factorial_Divisible_Number(15) == 5",
      "assert first_Factorial_Divisible_Number(5) == 4"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      125
    ],
    "generation_times": [
      0.3454616069793701
    ]
  },
  {
    "task_id": 484,
    "prompt": "Write a function to remove the matching tuples from the given two tuples.\ndef remove_matching_tuple(test_list1, test_list2):\r",
    "generated_codes": [
      "def remove_matching_tuple(test_list1, test_list2):\r\n    result = []\r\n    for i in range(len(test_list2)):\r\n        if test_list1[i] != test_list3[i]:\r\n            result.append(test_list3)\r\n    return result"
    ],
    "test_cases": [
      "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]",
      "assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]",
      "assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      207
    ],
    "generation_times": [
      0.367229700088501
    ]
  },
  {
    "task_id": 485,
    "prompt": "Write a function to find the largest palindromic number in the given array.\ndef is_palindrome(n) : \r",
    "generated_codes": [
      "def is_palindrome(n) : \r\n    return str(n) == str(n)[::-1] \r\ndef find_largest_palindrome(arr): \r\n    largest_palindrome = None\r\n    for i in range(len(arr)): \r\n        for j in range(i, len(arr)): \r\r\n            if is_palindrom(arr[i], arr[j]):\r\r\n                if (largest_palindrome is None or\r\r\n                    arr[i] * arr[j] > largest_palidrome):\r\r\n                    largest_pal_idrome = arr[i]*arr[j]\r\r\n    return largest_palidirome\r\r"
    ],
    "test_cases": [
      "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545",
      "assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5",
      "assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      447
    ],
    "generation_times": [
      1.9207940101623535
    ]
  },
  {
    "task_id": 486,
    "prompt": "Write a function to compute binomial probability for the given number.\ndef nCr(n, r): \r",
    "generated_codes": [
      "def nCr(n, r): \r\n    if r > n: \r\n        return 0\r"
    ],
    "test_cases": [
      "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185",
      "assert binomial_probability(11, 6, 2.0/4) == 0.2255859375",
      "assert binomial_probability(12, 7, 3.0/5) == 0.227030335488"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      50
    ],
    "generation_times": [
      1.1385819911956787
    ]
  },
  {
    "task_id": 487,
    "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.\ndef sort_tuple(tup): \r",
    "generated_codes": [
      "def sort_tuple(tup): \r\n    return sorted(tup, key=lambda x: x[2])"
    ],
    "test_cases": [
      "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]",
      "assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]",
      "assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      65
    ],
    "generation_times": [
      0.15642023086547852
    ]
  },
  {
    "task_id": 488,
    "prompt": "Write a function to find the area of a pentagon.\ndef area_pentagon(a):\r",
    "generated_codes": [
      "def area_pentagon(a):\r\n    return (a**2 * 5) / 4"
    ],
    "test_cases": [
      "assert area_pentagon(5)==43.01193501472417",
      "assert area_pentagon(10)==172.0477400588967",
      "assert area_pentagon(15)==387.10741513251753"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      48
    ],
    "generation_times": [
      0.14626502990722656
    ]
  },
  {
    "task_id": 489,
    "prompt": "Write a python function to find the frequency of the largest value in a given array.\ndef frequency_Of_Largest(n,arr): \r",
    "generated_codes": [
      "def frequency_Of_Largest(n,arr): \r\n    max = arr[0] \r\n    for i in range(1, len(arr)): \r\n        if arr[i] > max: \r\n            max =arr[i] \r\n    count = 0\r\n    for j in range(len(arr)): \r\r\n        if max == arr[j]: \r\n            count += 1\r\n    return count"
    ],
    "test_cases": [
      "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2",
      "assert frequency_Of_Largest(3,[5,6,5]) == 1",
      "assert frequency_Of_Largest(4,[2,7,7,7]) == 3"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      258
    ],
    "generation_times": [
      0.6982133388519287
    ]
  },
  {
    "task_id": 490,
    "prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.\ndef extract_symmetric(test_list):\r",
    "generated_codes": [
      "def extract_symmetric(test_list):\r\n    result = []\r\n    for i in range(len(test_list)):\r\n        for j in range(i+1, len(test_list)):\r\n            if test_list[i] == test_list[j]:\r\n                result.append((test_list[i], test_list[~j]))\r\n    return result"
    ],
    "test_cases": [
      "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}",
      "assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}",
      "assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      260
    ],
    "generation_times": [
      0.5405216217041016
    ]
  },
  {
    "task_id": 491,
    "prompt": "Write a function to find the sum of geometric progression series.\ndef sum_gp(a,n,r):\r",
    "generated_codes": [
      "def sum_gp(a,n,r):\r\n    return (a*(1-r**n))/(1-r)"
    ],
    "test_cases": [
      "assert sum_gp(1,5,2)==31",
      "assert sum_gp(1,5,4)==341",
      "assert sum_gp(2,6,3)==728"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      49
    ],
    "generation_times": [
      0.14536070823669434
    ]
  },
  {
    "task_id": 492,
    "prompt": "Write a function to search an element in the given array by using binary search.\ndef binary_search(item_list,item):\r",
    "generated_codes": [
      "def binary_search(item_list,item):\r\n    low = 0\r\n    high = len(item_list) - 1\r\n    while low <= high:\r\n        mid = (low + high)//2\r\n        if item == item_list[mid]:\r\n            return True\r\n        elif item < item_list[low]:\r\n            high = mid - 2\r\n            continue\r\n        else:\r\n            low = mid + 1\r\n        return False"
    ],
    "test_cases": [
      "assert binary_search([1,2,3,5,8], 6) == False",
      "assert binary_search([7, 8, 9, 10, 13], 10) == True",
      "assert binary_search([11, 13, 14, 19, 22, 36], 23) == False"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      345
    ],
    "generation_times": [
      0.7800924777984619
    ]
  },
  {
    "task_id": 493,
    "prompt": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\ndef calculate_polygons(startx, starty, endx, endy, radius):\r",
    "generated_codes": [
      "def calculate_polygons(startx, starty, endx, endy, radius):\r\n    num_points = int((endx - startx) / (2 * radius)) + 1\r\n    polygons = []\r\n    for i in range(num_points):\r\n        x = startx + i * (endx-startx) // num_points\r\n        y = starty + i*(endy-starty) //num_points\r\n        polygons.append(((x, y),))\r\n    return polygons"
    ],
    "test_cases": [
      "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]",
      "assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]",
      "assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      331
    ],
    "generation_times": [
      1.3385345935821533
    ]
  },
  {
    "task_id": 494,
    "prompt": "Write a function to convert the given binary tuple to integer.\ndef binary_to_integer(test_tup):\r",
    "generated_codes": [
      "def binary_to_integer(test_tup):\r\n    return int(\"\".join(map(str, test_tup)), 2)"
    ],
    "test_cases": [
      "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'",
      "assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'",
      "assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      80
    ],
    "generation_times": [
      0.16942262649536133
    ]
  },
  {
    "task_id": 495,
    "prompt": "Write a function to remove lowercase substrings from a given string by using regex.\ndef remove_lowercase(str1):\r",
    "generated_codes": [
      "def remove_lowercase(str1):\r\n    return re.sub('[a-z]', '', str1)"
    ],
    "test_cases": [
      "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'",
      "assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'",
      "assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      65
    ],
    "generation_times": [
      0.13226842880249023
    ]
  },
  {
    "task_id": 496,
    "prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_smallest(nums,n):\r",
    "generated_codes": [
      "def heap_queue_smallest(nums,n):\r\n    import heapq\r\n    heapq.heapify(nums)\r\n    return heapq.nsmallest(n,nums)"
    ],
    "test_cases": [
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] ",
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]",
      "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      111
    ],
    "generation_times": [
      0.20469379425048828
    ]
  },
  {
    "task_id": 497,
    "prompt": "Write a function to find the surface area of a cone.\ndef surfacearea_cone(r,h):\r",
    "generated_codes": [
      "def surfacearea_cone(r,h):\r\n    slant_height = (r**2 + h**2)**0.5\r\n    surface_area = 3.14159 * r*(r + slant_length)\r\n    return surface_area"
    ],
    "test_cases": [
      "assert surfacearea_cone(5,12)==282.7433388230814",
      "assert surfacearea_cone(10,15)==880.5179353159282",
      "assert surfacearea_cone(19,17)==2655.923961165254"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      141
    ],
    "generation_times": [
      0.7762091159820557
    ]
  },
  {
    "task_id": 498,
    "prompt": "Write a python function to find gcd of two positive integers.\ndef gcd(x, y):\r",
    "generated_codes": [
      "def gcd(x, y):\r\n    if x == 0:\r\n        return y\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        if x > y:\r\n            return gcd(x - y, y)\r\n        else:\r\n            if y > x:\r\n                return gcd(y - x, x)\r\n            else:\r\n                if x % y ==0:\r\n                    return y\r\n                else:\r\n                    if y % x ==0:\r\r\n                        return x"
    ],
    "test_cases": [
      "assert gcd(12, 17) == 1",
      "assert gcd(4,6) == 2",
      "assert gcd(2,9) == 1"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      397
    ],
    "generation_times": [
      0.9072842597961426
    ]
  },
  {
    "task_id": 499,
    "prompt": "Write a function to find the diameter of a circle.\ndef diameter_circle(r):\r",
    "generated_codes": [
      "def diameter_circle(r):\r\n    return 2 * r"
    ],
    "test_cases": [
      "assert diameter_circle(10)==20",
      "assert diameter_circle(40)==80",
      "assert diameter_circle(15)==30"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      41
    ],
    "generation_times": [
      0.0767354965209961
    ]
  },
  {
    "task_id": 500,
    "prompt": "Write a function to concatenate all elements of the given list into a string.\ndef concatenate_elements(list):\r",
    "generated_codes": [
      "def concatenate_elements(list):\r\n    return ''.join(str(element) for element in list)"
    ],
    "test_cases": [
      "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'",
      "assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'",
      "assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      85
    ],
    "generation_times": [
      2.6604554653167725
    ]
  },
  {
    "task_id": 501,
    "prompt": "Write a python function to find common divisor between two numbers in a given pair.\ndef ngcd(x,y):\r",
    "generated_codes": [
      "def ngcd(x,y):\r\n    if x==0 or y==0:\r\n        return 0\r\n    else:\r\n        while x!=y:\r\n            if x>y:\r\n                x=x-y\r\n            else:\r\n                y=y-x\r\n        return x\r"
    ],
    "test_cases": [
      "assert num_comm_div(2,4) == 2",
      "assert num_comm_div(2,8) == 2",
      "assert num_comm_div(12,24) == 6"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      191
    ],
    "generation_times": [
      0.5571210384368896
    ]
  },
  {
    "task_id": 502,
    "prompt": "Write a python function to find remainder of two numbers.\ndef find(n,m):\r",
    "generated_codes": [
      "def find(n,m):\r\n    return n%m\r"
    ],
    "test_cases": [
      "assert find(3,3) == 0",
      "assert find(10,3) == 1",
      "assert find(16,5) == 1"
    ],
    "test_results": [
      true
    ],
    "test_passed": true,
    "code_lengths": [
      31
    ],
    "generation_times": [
      0.246171236038208
    ]
  },
  {
    "task_id": 503,
    "prompt": "Write a function to add consecutive numbers of a given list.\ndef add_consecutive_nums(nums):\r",
    "generated_codes": [
      "def add_consecutive_nums(nums):\r\n    sum = 0\r\n    for num in nums:\r\n        sum += num\r\n    return sum"
    ],
    "test_cases": [
      "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]",
      "assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]",
      "assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      102
    ],
    "generation_times": [
      0.22211194038391113
    ]
  },
  {
    "task_id": 504,
    "prompt": "Write a python function to find the cube sum of first n natural numbers.\ndef sum_Of_Series(n): \r",
    "generated_codes": [
      "def sum_Of_Series(n): \r\n    return (n * (n + 1) * (2 * n + 3)) // 6\r"
    ],
    "test_cases": [
      "assert sum_Of_Series(5) == 225",
      "assert sum_Of_Series(2) == 9",
      "assert sum_Of_Series(3) == 36"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      68
    ],
    "generation_times": [
      0.33730030059814453
    ]
  },
  {
    "task_id": 505,
    "prompt": "Write a function to move all zeroes to the end of the given array.\ndef re_order(A):\r",
    "generated_codes": [
      "def re_order(A):\r\n    i = 0\r\n    j = len(A) - 1\r\n    while i < j:\r\n        if A[i] == 0 and A[j] != 0:\r\n            A[i], A[j-1] = A[j - 2], A[i]\r\n            i += 1\r\n        elif A[i + 1] == A[i]:\r\n            i+=1\r\n        else:\r\n            j -= 1"
    ],
    "test_cases": [
      "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]",
      "assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]",
      "assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      250
    ],
    "generation_times": [
      0.929541826248169
    ]
  },
  {
    "task_id": 506,
    "prompt": "Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k): \r",
    "generated_codes": [
      "def permutation_coefficient(n, k): \r\n    if n < k: \r\n        return 0\r\n    else: \r\n         return (n * (n - 1) * (k - 2) * ... * 1)\r"
    ],
    "test_cases": [
      "assert permutation_coefficient(10, 2) == 90",
      "assert permutation_coefficient(10, 3) == 720",
      "assert permutation_coefficient(10, 1) == 10"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      133
    ],
    "generation_times": [
      0.49970126152038574
    ]
  },
  {
    "task_id": 507,
    "prompt": "Write a function to remove specific words from a given list.\ndef remove_words(list1, removewords):\r",
    "generated_codes": [
      "def remove_words(list1, removewords):\r\n    for word in removeworks:\r\n        list1.remove(word)\r\n    return list1"
    ],
    "test_cases": [
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']",
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']",
      "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      113
    ],
    "generation_times": [
      0.20378518104553223
    ]
  },
  {
    "task_id": 508,
    "prompt": "Write a function to check if the common elements between two given lists are in the same order or not.\ndef same_order(l1, l2):\r",
    "generated_codes": [
      "def same_order(l1, l2):\r\n    return sorted(l1) == sorted(l2)"
    ],
    "test_cases": [
      "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
      "assert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False",
      "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      60
    ],
    "generation_times": [
      1.9714014530181885
    ]
  },
  {
    "task_id": 509,
    "prompt": "Write a python function to find the average of odd numbers till a given odd number.\ndef average_Odd(n) : \r",
    "generated_codes": [
      "def average_Odd(n) : \r\n    sum = 0\r\n    for i in range(1, n + 1, 2): \r\n        sum += i\r\n    return sum / n"
    ],
    "test_cases": [
      "assert average_Odd(9) == 5",
      "assert average_Odd(5) == 3",
      "assert average_Odd(11) == 6"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      107
    ],
    "generation_times": [
      0.3434925079345703
    ]
  },
  {
    "task_id": 510,
    "prompt": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.\ndef no_of_subsequences(arr, k): \r",
    "generated_codes": [
      "def no_of_subsequences(arr, k): \r\n    n = len(arr) \r\n    dp = [[0 for i in range(n+1)] for j in range(k+1)]\r\n    for i  in range(1, k+1): \r\n        dp[i][i] = 1\r\n    for j  in arr: \r\n        for i   in range(len(dp)): \r\n            for k in range(i, len(dp)): \r\r\n                if (j * dp[i-1][k] > k): \r\n                    dp[i+1][j] += dp[i-k][j]\r\n    return dp[k][len(arr)]"
    ],
    "test_cases": [
      "assert no_of_subsequences([1,2,3,4], 10) == 11",
      "assert no_of_subsequences([4,8,7,2], 50) == 9",
      "assert no_of_subsequences([5,6,7,8], 15) == 4"
    ],
    "test_results": [
      false
    ],
    "test_passed": false,
    "code_lengths": [
      378
    ],
    "generation_times": [
      1.1893386840820312
    ]
  }
]